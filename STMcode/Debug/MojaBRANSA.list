
MojaBRANSA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         000088cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08008a5c  08008a5c  00009a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cec  08008cec  0000a09c  2**0
                  CONTENTS
  4 .ARM          00000008  08008cec  08008cec  00009cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cf4  08008cf4  0000a09c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cf4  08008cf4  00009cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008cf8  08008cf8  00009cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  08008cfc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a09c  2**0
                  CONTENTS
 10 .bss          00000338  2000009c  2000009c  0000a09c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003d4  200003d4  0000a09c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001423b  00000000  00000000  0000a0cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002dec  00000000  00000000  0001e307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d8  00000000  00000000  000210f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eca  00000000  00000000  000223d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024b30  00000000  00000000  0002329a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017c04  00000000  00000000  00047dca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd322  00000000  00000000  0005f9ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013ccf0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b10  00000000  00000000  0013cd34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00142844  2**0
=======
  1 .text         00004c6c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000022c  08004dfc  08004dfc  00005dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005028  08005028  00007098  2**0
                  CONTENTS
  4 .ARM          00000008  08005028  08005028  00006028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005030  08005030  00007098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005030  08005030  00006030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005034  08005034  00006034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08005038  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007098  2**0
                  CONTENTS
 10 .bss          00000268  20000098  20000098  00007098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000300  20000300  00007098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dc55  00000000  00000000  000070c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fa6  00000000  00000000  00014d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d78  00000000  00000000  00016cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a82  00000000  00000000  00017a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000043b9  00000000  00000000  000184c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f833  00000000  00000000  0001c87b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd245  00000000  00000000  0002c0ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f92f3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000407c  00000000  00000000  000f9338  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  000fd3b4  2**0
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000009c 	.word	0x2000009c
 80001ac:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001b0:	08008a44 	.word	0x08008a44
=======
 80001b0:	08004de4 	.word	0x08004de4
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	08008a44 	.word	0x08008a44
=======
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	08004de4 	.word	0x08004de4
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b80:	f000 b96a 	b.w	8000e58 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	460c      	mov	r4, r1
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d14e      	bne.n	8000c46 <__udivmoddi4+0xaa>
 8000ba8:	4694      	mov	ip, r2
 8000baa:	458c      	cmp	ip, r1
 8000bac:	4686      	mov	lr, r0
 8000bae:	fab2 f282 	clz	r2, r2
 8000bb2:	d962      	bls.n	8000c7a <__udivmoddi4+0xde>
 8000bb4:	b14a      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb6:	f1c2 0320 	rsb	r3, r2, #32
 8000bba:	4091      	lsls	r1, r2
 8000bbc:	fa20 f303 	lsr.w	r3, r0, r3
 8000bc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc4:	4319      	orrs	r1, r3
 8000bc6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bce:	fa1f f68c 	uxth.w	r6, ip
 8000bd2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bd6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bda:	fb07 1114 	mls	r1, r7, r4, r1
 8000bde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be2:	fb04 f106 	mul.w	r1, r4, r6
 8000be6:	4299      	cmp	r1, r3
 8000be8:	d90a      	bls.n	8000c00 <__udivmoddi4+0x64>
 8000bea:	eb1c 0303 	adds.w	r3, ip, r3
 8000bee:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bf2:	f080 8112 	bcs.w	8000e1a <__udivmoddi4+0x27e>
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	f240 810f 	bls.w	8000e1a <__udivmoddi4+0x27e>
 8000bfc:	3c02      	subs	r4, #2
 8000bfe:	4463      	add	r3, ip
 8000c00:	1a59      	subs	r1, r3, r1
 8000c02:	fa1f f38e 	uxth.w	r3, lr
 8000c06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c12:	fb00 f606 	mul.w	r6, r0, r6
 8000c16:	429e      	cmp	r6, r3
 8000c18:	d90a      	bls.n	8000c30 <__udivmoddi4+0x94>
 8000c1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c22:	f080 80fc 	bcs.w	8000e1e <__udivmoddi4+0x282>
 8000c26:	429e      	cmp	r6, r3
 8000c28:	f240 80f9 	bls.w	8000e1e <__udivmoddi4+0x282>
 8000c2c:	4463      	add	r3, ip
 8000c2e:	3802      	subs	r0, #2
 8000c30:	1b9b      	subs	r3, r3, r6
 8000c32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c36:	2100      	movs	r1, #0
 8000c38:	b11d      	cbz	r5, 8000c42 <__udivmoddi4+0xa6>
 8000c3a:	40d3      	lsrs	r3, r2
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d905      	bls.n	8000c56 <__udivmoddi4+0xba>
 8000c4a:	b10d      	cbz	r5, 8000c50 <__udivmoddi4+0xb4>
 8000c4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c50:	2100      	movs	r1, #0
 8000c52:	4608      	mov	r0, r1
 8000c54:	e7f5      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000c56:	fab3 f183 	clz	r1, r3
 8000c5a:	2900      	cmp	r1, #0
 8000c5c:	d146      	bne.n	8000cec <__udivmoddi4+0x150>
 8000c5e:	42a3      	cmp	r3, r4
 8000c60:	d302      	bcc.n	8000c68 <__udivmoddi4+0xcc>
 8000c62:	4290      	cmp	r0, r2
 8000c64:	f0c0 80f0 	bcc.w	8000e48 <__udivmoddi4+0x2ac>
 8000c68:	1a86      	subs	r6, r0, r2
 8000c6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	d0e6      	beq.n	8000c42 <__udivmoddi4+0xa6>
 8000c74:	e9c5 6300 	strd	r6, r3, [r5]
 8000c78:	e7e3      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000c7a:	2a00      	cmp	r2, #0
 8000c7c:	f040 8090 	bne.w	8000da0 <__udivmoddi4+0x204>
 8000c80:	eba1 040c 	sub.w	r4, r1, ip
 8000c84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c88:	fa1f f78c 	uxth.w	r7, ip
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c96:	fb08 4416 	mls	r4, r8, r6, r4
 8000c9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ca2:	4298      	cmp	r0, r3
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x11c>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x11a>
 8000cb0:	4298      	cmp	r0, r3
 8000cb2:	f200 80cd 	bhi.w	8000e50 <__udivmoddi4+0x2b4>
 8000cb6:	4626      	mov	r6, r4
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	fa1f f38e 	uxth.w	r3, lr
 8000cbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000cc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cca:	fb00 f707 	mul.w	r7, r0, r7
 8000cce:	429f      	cmp	r7, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x148>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x146>
 8000cdc:	429f      	cmp	r7, r3
 8000cde:	f200 80b0 	bhi.w	8000e42 <__udivmoddi4+0x2a6>
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	1bdb      	subs	r3, r3, r7
 8000ce6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cea:	e7a5      	b.n	8000c38 <__udivmoddi4+0x9c>
 8000cec:	f1c1 0620 	rsb	r6, r1, #32
 8000cf0:	408b      	lsls	r3, r1
 8000cf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cf6:	431f      	orrs	r7, r3
 8000cf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000d00:	ea43 030c 	orr.w	r3, r3, ip
 8000d04:	40f4      	lsrs	r4, r6
 8000d06:	fa00 f801 	lsl.w	r8, r0, r1
 8000d0a:	0c38      	lsrs	r0, r7, #16
 8000d0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d10:	fbb4 fef0 	udiv	lr, r4, r0
 8000d14:	fa1f fc87 	uxth.w	ip, r7
 8000d18:	fb00 441e 	mls	r4, r0, lr, r4
 8000d1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d20:	fb0e f90c 	mul.w	r9, lr, ip
 8000d24:	45a1      	cmp	r9, r4
 8000d26:	fa02 f201 	lsl.w	r2, r2, r1
 8000d2a:	d90a      	bls.n	8000d42 <__udivmoddi4+0x1a6>
 8000d2c:	193c      	adds	r4, r7, r4
 8000d2e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d32:	f080 8084 	bcs.w	8000e3e <__udivmoddi4+0x2a2>
 8000d36:	45a1      	cmp	r9, r4
 8000d38:	f240 8081 	bls.w	8000e3e <__udivmoddi4+0x2a2>
 8000d3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d40:	443c      	add	r4, r7
 8000d42:	eba4 0409 	sub.w	r4, r4, r9
 8000d46:	fa1f f983 	uxth.w	r9, r3
 8000d4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	d907      	bls.n	8000d6e <__udivmoddi4+0x1d2>
 8000d5e:	193c      	adds	r4, r7, r4
 8000d60:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d64:	d267      	bcs.n	8000e36 <__udivmoddi4+0x29a>
 8000d66:	45a4      	cmp	ip, r4
 8000d68:	d965      	bls.n	8000e36 <__udivmoddi4+0x29a>
 8000d6a:	3b02      	subs	r3, #2
 8000d6c:	443c      	add	r4, r7
 8000d6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d72:	fba0 9302 	umull	r9, r3, r0, r2
 8000d76:	eba4 040c 	sub.w	r4, r4, ip
 8000d7a:	429c      	cmp	r4, r3
 8000d7c:	46ce      	mov	lr, r9
 8000d7e:	469c      	mov	ip, r3
 8000d80:	d351      	bcc.n	8000e26 <__udivmoddi4+0x28a>
 8000d82:	d04e      	beq.n	8000e22 <__udivmoddi4+0x286>
 8000d84:	b155      	cbz	r5, 8000d9c <__udivmoddi4+0x200>
 8000d86:	ebb8 030e 	subs.w	r3, r8, lr
 8000d8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d92:	40cb      	lsrs	r3, r1
 8000d94:	431e      	orrs	r6, r3
 8000d96:	40cc      	lsrs	r4, r1
 8000d98:	e9c5 6400 	strd	r6, r4, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	e750      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000da0:	f1c2 0320 	rsb	r3, r2, #32
 8000da4:	fa20 f103 	lsr.w	r1, r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	fa24 f303 	lsr.w	r3, r4, r3
 8000db0:	4094      	lsls	r4, r2
 8000db2:	430c      	orrs	r4, r1
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dbc:	fa1f f78c 	uxth.w	r7, ip
 8000dc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000dc8:	0c23      	lsrs	r3, r4, #16
 8000dca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dce:	fb00 f107 	mul.w	r1, r0, r7
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x24c>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dde:	d22c      	bcs.n	8000e3a <__udivmoddi4+0x29e>
 8000de0:	4299      	cmp	r1, r3
 8000de2:	d92a      	bls.n	8000e3a <__udivmoddi4+0x29e>
 8000de4:	3802      	subs	r0, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000df0:	fb08 3311 	mls	r3, r8, r1, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb01 f307 	mul.w	r3, r1, r7
 8000dfc:	42a3      	cmp	r3, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x276>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e08:	d213      	bcs.n	8000e32 <__udivmoddi4+0x296>
 8000e0a:	42a3      	cmp	r3, r4
 8000e0c:	d911      	bls.n	8000e32 <__udivmoddi4+0x296>
 8000e0e:	3902      	subs	r1, #2
 8000e10:	4464      	add	r4, ip
 8000e12:	1ae4      	subs	r4, r4, r3
 8000e14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e18:	e739      	b.n	8000c8e <__udivmoddi4+0xf2>
 8000e1a:	4604      	mov	r4, r0
 8000e1c:	e6f0      	b.n	8000c00 <__udivmoddi4+0x64>
 8000e1e:	4608      	mov	r0, r1
 8000e20:	e706      	b.n	8000c30 <__udivmoddi4+0x94>
 8000e22:	45c8      	cmp	r8, r9
 8000e24:	d2ae      	bcs.n	8000d84 <__udivmoddi4+0x1e8>
 8000e26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e2e:	3801      	subs	r0, #1
 8000e30:	e7a8      	b.n	8000d84 <__udivmoddi4+0x1e8>
 8000e32:	4631      	mov	r1, r6
 8000e34:	e7ed      	b.n	8000e12 <__udivmoddi4+0x276>
 8000e36:	4603      	mov	r3, r0
 8000e38:	e799      	b.n	8000d6e <__udivmoddi4+0x1d2>
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	e7d4      	b.n	8000de8 <__udivmoddi4+0x24c>
 8000e3e:	46d6      	mov	lr, sl
 8000e40:	e77f      	b.n	8000d42 <__udivmoddi4+0x1a6>
 8000e42:	4463      	add	r3, ip
 8000e44:	3802      	subs	r0, #2
 8000e46:	e74d      	b.n	8000ce4 <__udivmoddi4+0x148>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	4623      	mov	r3, r4
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	e70f      	b.n	8000c70 <__udivmoddi4+0xd4>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	e730      	b.n	8000cb8 <__udivmoddi4+0x11c>
 8000e56:	bf00      	nop

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <init_Product>:

char *Products_Names[NUMBER_OF_PRODUCTS] = {"Coca-Cola", "Pipi", "Hidra", "Cetina", "Cedevita", "Red Bull"};
float Products_Prices[NUMBER_OF_PRODUCTS] = {3, 2, 4, 1, 3, 5};

void init_Product(Product* pr, uint8_t id, char* product_name, uint8_t product_price, uint8_t product_quant)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	461a      	mov	r2, r3
 8000e68:	460b      	mov	r3, r1
 8000e6a:	72fb      	strb	r3, [r7, #11]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	72bb      	strb	r3, [r7, #10]
    pr->slot_ID = id;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	7afa      	ldrb	r2, [r7, #11]
 8000e74:	701a      	strb	r2, [r3, #0]
    strcpy(pr->name, product_name);
<<<<<<< HEAD
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f006 ff1a 	bl	8007cb6 <strcpy>
=======
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	3301      	adds	r3, #1
 800058e:	6879      	ldr	r1, [r7, #4]
 8000590:	4618      	mov	r0, r3
 8000592:	f003 ff16 	bl	80043c2 <strcpy>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    pr->price = product_price;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	7aba      	ldrb	r2, [r7, #10]
 8000e86:	72da      	strb	r2, [r3, #11]
    pr->quantity = product_quant;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	7e3a      	ldrb	r2, [r7, #24]
 8000e8c:	731a      	strb	r2, [r3, #12]
    pr->capacity = 100;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	2264      	movs	r2, #100	@ 0x64
 8000e92:	735a      	strb	r2, [r3, #13]
}
 8000e94:	bf00      	nop
 8000e96:	3710      	adds	r7, #16
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <init_Automat>:
    printf("Slot %d: %s %d$\n", pr.slot_ID, pr.name, pr.price);
    printf("Quantity: %d, %d%% left\n", pr.quantity, pr.capacity);
}

 void init_Automat(Automat* a)
{
 8000e9c:	b590      	push	{r4, r7, lr}
 8000e9e:	b087      	sub	sp, #28
 8000ea0:	af02      	add	r7, sp, #8
 8000ea2:	6078      	str	r0, [r7, #4]
    a->products_Number = NUMBER_OF_PRODUCTS;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2206      	movs	r2, #6
 8000ea8:	701a      	strb	r2, [r3, #0]

    for(int i = 0; i < a->products_Number; ++i)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	e020      	b.n	8000ef2 <init_Automat+0x56>
    {
        init_Product(&a->products[i], i, Products_Names[i], Products_Prices[i], START_QUANTITY);
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	1a9b      	subs	r3, r3, r2
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	1c58      	adds	r0, r3, #1
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	b2d9      	uxtb	r1, r3
 8000ec4:	4a24      	ldr	r2, [pc, #144]	@ (8000f58 <init_Automat+0xbc>)
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ecc:	4c23      	ldr	r4, [pc, #140]	@ (8000f5c <init_Automat+0xc0>)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4423      	add	r3, r4
 8000ed4:	edd3 7a00 	vldr	s15, [r3]
 8000ed8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000edc:	edc7 7a00 	vstr	s15, [r7]
 8000ee0:	783b      	ldrb	r3, [r7, #0]
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2404      	movs	r4, #4
 8000ee6:	9400      	str	r4, [sp, #0]
 8000ee8:	f7ff ffb8 	bl	8000e5c <init_Product>
    for(int i = 0; i < a->products_Number; ++i)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	3301      	adds	r3, #1
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4293      	cmp	r3, r2
 8000efc:	dbd8      	blt.n	8000eb0 <init_Automat+0x14>
    }

    a->door_opened = false;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2200      	movs	r2, #0
 8000f02:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    a->stand_by = false;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    a->turned_on = true;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2201      	movs	r2, #1
 8000f12:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
    a->selected_Product = 0;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    a->current_Profit = 0;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    a->temperature_offset_tolerance = TEMPERATURE_OFFSET_TOLERANCE;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2214      	movs	r2, #20
 8000f2a:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62

    update_Automat_Capacity(a);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f000 f8f8 	bl	8001124 <update_Automat_Capacity>
    update_Light_Intensity(a, DEFAULT_LIGHT_INTENSITY);
 8000f34:	2146      	movs	r1, #70	@ 0x46
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f000 fa57 	bl	80013ea <update_Light_Intensity>
    update_Wanted_Temperature(a, DEFAULT_WANTED_TEMPERATURE);
 8000f3c:	2114      	movs	r1, #20
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f000 fa32 	bl	80013a8 <update_Wanted_Temperature>
    update_Temperature_and_Humidity(a, 0, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2100      	movs	r1, #0
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f000 f9d8 	bl	80012fe <update_Temperature_and_Humidity>
}
 8000f4e:	bf00      	nop
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd90      	pop	{r4, r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	20000018 	.word	0x20000018

08000f60 <open_Door>:

bool open_Door(Automat* A)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
    if(!A->door_opened)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8000f6e:	f083 0301 	eor.w	r3, r3, #1
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d009      	beq.n	8000f8c <open_Door+0x2c>
    {
        A->door_opened = true;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
        A->stand_by = true;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return true;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e000      	b.n	8000f8e <open_Door+0x2e>
    }
    else
    {
    	return false;
 8000f8c:	2300      	movs	r3, #0
    }
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <close_Door>:

bool close_Door(Automat* A)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
    if(A->door_opened)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d009      	beq.n	8000fc0 <close_Door+0x26>
    {
        A->door_opened = false;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
        A->stand_by = false;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
        return true;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e000      	b.n	8000fc2 <close_Door+0x28>
    }
    else
    {
    	return false;
 8000fc0:	2300      	movs	r3, #0
    }
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr

08000fce <collect_Money>:

void collect_Money(Automat* A)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
    if(A->turned_on)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <collect_Money+0x1a>
    {
        A->current_Profit = 0;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    }
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <refill>:

void refill(Automat* A)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
    if(A->door_opened || !A->turned_on)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001002:	2b00      	cmp	r3, #0
 8001004:	d12b      	bne.n	800105e <refill+0x6a>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 800100c:	f083 0301 	eor.w	r3, r3, #1
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d123      	bne.n	800105e <refill+0x6a>
    {
    	return;
    }

    for(int i = 0; i < NUMBER_OF_PRODUCTS; i++)
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	e016      	b.n	800104a <refill+0x56>
    {
        A->products[i].quantity = START_QUANTITY;
 800101c:	6879      	ldr	r1, [r7, #4]
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	4613      	mov	r3, r2
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	1a9b      	subs	r3, r3, r2
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	440b      	add	r3, r1
 800102a:	330d      	adds	r3, #13
 800102c:	2204      	movs	r2, #4
 800102e:	701a      	strb	r2, [r3, #0]
        A->products[i].capacity = 100;
 8001030:	6879      	ldr	r1, [r7, #4]
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	4613      	mov	r3, r2
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	1a9b      	subs	r3, r3, r2
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	440b      	add	r3, r1
 800103e:	330e      	adds	r3, #14
 8001040:	2264      	movs	r2, #100	@ 0x64
 8001042:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < NUMBER_OF_PRODUCTS; i++)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3301      	adds	r3, #1
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2b05      	cmp	r3, #5
 800104e:	dde5      	ble.n	800101c <refill+0x28>
    }

    update_Automat_Capacity(A);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f000 f867 	bl	8001124 <update_Automat_Capacity>
    collect_Money(A);
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff ffb9 	bl	8000fce <collect_Money>
 800105c:	e000      	b.n	8001060 <refill+0x6c>
    	return;
 800105e:	bf00      	nop
}
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <change_Selection>:

void change_Selection(Automat* a, int8_t direction)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	70fb      	strb	r3, [r7, #3]
    if(!a->turned_on || a->stand_by)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 800107a:	f083 0301 	eor.w	r3, r3, #1
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d146      	bne.n	8001112 <change_Selection+0xaa>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800108a:	2b00      	cmp	r3, #0
 800108c:	d141      	bne.n	8001112 <change_Selection+0xaa>
    {
        return;
    }

    switch(direction)
 800108e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001096:	d002      	beq.n	800109e <change_Selection+0x36>
 8001098:	2b01      	cmp	r3, #1
 800109a:	d021      	beq.n	80010e0 <change_Selection+0x78>
 800109c:	e03a      	b.n	8001114 <change_Selection+0xac>
    {
        case -1:
        {
            a->selected_Product -= 1;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80010a4:	3b01      	subs	r3, #1
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
            a->selected_Product += (NUMBER_OF_PRODUCTS);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80010b4:	3306      	adds	r3, #6
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
            a->selected_Product %= (NUMBER_OF_PRODUCTS);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f893 205d 	ldrb.w	r2, [r3, #93]	@ 0x5d
 80010c4:	4b16      	ldr	r3, [pc, #88]	@ (8001120 <change_Selection+0xb8>)
 80010c6:	fba3 1302 	umull	r1, r3, r3, r2
 80010ca:	0899      	lsrs	r1, r3, #2
 80010cc:	460b      	mov	r3, r1
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	440b      	add	r3, r1
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
            break;
 80010de:	e019      	b.n	8001114 <change_Selection+0xac>
        }
        case 1:
        {
            a->selected_Product += 1;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80010e6:	3301      	adds	r3, #1
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
            a->selected_Product %= (NUMBER_OF_PRODUCTS);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f893 205d 	ldrb.w	r2, [r3, #93]	@ 0x5d
 80010f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <change_Selection+0xb8>)
 80010f8:	fba3 1302 	umull	r1, r3, r3, r2
 80010fc:	0899      	lsrs	r1, r3, #2
 80010fe:	460b      	mov	r3, r1
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	440b      	add	r3, r1
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	b2da      	uxtb	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
            break;
 8001110:	e000      	b.n	8001114 <change_Selection+0xac>
        return;
 8001112:	bf00      	nop
        }
    }
}
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	aaaaaaab 	.word	0xaaaaaaab

08001124 <update_Automat_Capacity>:

void update_Automat_Capacity(Automat* a)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
    if(!a->turned_on || a->stand_by)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 8001132:	f083 0301 	eor.w	r3, r3, #1
 8001136:	b2db      	uxtb	r3, r3
 8001138:	2b00      	cmp	r3, #0
 800113a:	d12b      	bne.n	8001194 <update_Automat_Capacity+0x70>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001142:	2b00      	cmp	r3, #0
 8001144:	d126      	bne.n	8001194 <update_Automat_Capacity+0x70>
    {
        return;
    }

    uint16_t products_Quantity = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	81fb      	strh	r3, [r7, #14]

    for(int i = 0; i < NUMBER_OF_PRODUCTS; ++i)
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	e00f      	b.n	8001170 <update_Automat_Capacity+0x4c>
    {
        products_Quantity += a->products[i].quantity;
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	4613      	mov	r3, r2
 8001156:	00db      	lsls	r3, r3, #3
 8001158:	1a9b      	subs	r3, r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	440b      	add	r3, r1
 800115e:	330d      	adds	r3, #13
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	89fb      	ldrh	r3, [r7, #14]
 8001166:	4413      	add	r3, r2
 8001168:	81fb      	strh	r3, [r7, #14]
    for(int i = 0; i < NUMBER_OF_PRODUCTS; ++i)
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	3301      	adds	r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	2b05      	cmp	r3, #5
 8001174:	ddec      	ble.n	8001150 <update_Automat_Capacity+0x2c>
    }

    a->capacity = (products_Quantity * 100) / (START_QUANTITY * NUMBER_OF_PRODUCTS);
 8001176:	89fb      	ldrh	r3, [r7, #14]
 8001178:	2264      	movs	r2, #100	@ 0x64
 800117a:	fb02 f303 	mul.w	r3, r2, r3
 800117e:	4a08      	ldr	r2, [pc, #32]	@ (80011a0 <update_Automat_Capacity+0x7c>)
 8001180:	fb82 1203 	smull	r1, r2, r2, r3
 8001184:	1092      	asrs	r2, r2, #2
 8001186:	17db      	asrs	r3, r3, #31
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	b2da      	uxtb	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
 8001192:	e000      	b.n	8001196 <update_Automat_Capacity+0x72>
        return;
 8001194:	bf00      	nop
}
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	2aaaaaab 	.word	0x2aaaaaab

080011a4 <update_Product_Capacity>:

void update_Product_Capacity(Product* p)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
    p->capacity = (p->quantity * 100) / START_QUANTITY;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	7b1b      	ldrb	r3, [r3, #12]
 80011b0:	461a      	mov	r2, r3
 80011b2:	0092      	lsls	r2, r2, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	461a      	mov	r2, r3
 80011b8:	0091      	lsls	r1, r2, #2
 80011ba:	461a      	mov	r2, r3
 80011bc:	460b      	mov	r3, r1
 80011be:	4413      	add	r3, r2
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	735a      	strb	r2, [r3, #13]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <buy_Product>:

bool buy_Product(Automat* a)
{
 80011d4:	b590      	push	{r4, r7, lr}
 80011d6:	b087      	sub	sp, #28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
    if(!a->turned_on || a->stand_by)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 80011e2:	f083 0301 	eor.w	r3, r3, #1
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d104      	bne.n	80011f6 <buy_Product+0x22>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <buy_Product+0x26>
    {
        return false;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e04f      	b.n	800129a <buy_Product+0xc6>
    }

    uint8_t slot_ID = a->selected_Product;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001200:	75fb      	strb	r3, [r7, #23]
    Product buying_Prod = a->products[slot_ID];
 8001202:	7dfa      	ldrb	r2, [r7, #23]
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	4613      	mov	r3, r2
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	1a9b      	subs	r3, r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	18ca      	adds	r2, r1, r3
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	1c54      	adds	r4, r2, #1
 8001216:	6820      	ldr	r0, [r4, #0]
 8001218:	6861      	ldr	r1, [r4, #4]
 800121a:	68a2      	ldr	r2, [r4, #8]
 800121c:	c307      	stmia	r3!, {r0, r1, r2}
 800121e:	89a2      	ldrh	r2, [r4, #12]
 8001220:	801a      	strh	r2, [r3, #0]

    if(buying_Prod.quantity > 0)
 8001222:	7d3b      	ldrb	r3, [r7, #20]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d037      	beq.n	8001298 <buy_Product+0xc4>
    {
        printf("Buying product: %s\n", buying_Prod.name);
<<<<<<< HEAD
 8001228:	f107 0308 	add.w	r3, r7, #8
 800122c:	3301      	adds	r3, #1
 800122e:	4619      	mov	r1, r3
 8001230:	481c      	ldr	r0, [pc, #112]	@ (80012a4 <buy_Product+0xd0>)
 8001232:	f006 fb5d 	bl	80078f0 <iprintf>
        printf("PLEASE WAIT...\n");
 8001236:	481c      	ldr	r0, [pc, #112]	@ (80012a8 <buy_Product+0xd4>)
 8001238:	f006 fbc2 	bl	80079c0 <puts>
=======
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	3301      	adds	r3, #1
 8000822:	4619      	mov	r1, r3
 8000824:	481e      	ldr	r0, [pc, #120]	@ (80008a0 <buy_Product+0xd4>)
 8000826:	f003 fc09 	bl	800403c <iprintf>
        printf("PLEASE WAIT...\n");
 800082a:	481e      	ldr	r0, [pc, #120]	@ (80008a4 <buy_Product+0xd8>)
 800082c:	f003 fc6e 	bl	800410c <puts>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
        a->products[slot_ID].quantity -= 1;
 800123c:	7dfa      	ldrb	r2, [r7, #23]
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	1a9b      	subs	r3, r3, r2
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	440b      	add	r3, r1
 800124a:	330d      	adds	r3, #13
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	7dfa      	ldrb	r2, [r7, #23]
 8001250:	3b01      	subs	r3, #1
 8001252:	b2d8      	uxtb	r0, r3
 8001254:	6879      	ldr	r1, [r7, #4]
 8001256:	4613      	mov	r3, r2
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	1a9b      	subs	r3, r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	440b      	add	r3, r1
 8001260:	330d      	adds	r3, #13
 8001262:	4602      	mov	r2, r0
 8001264:	701a      	strb	r2, [r3, #0]
        update_Product_Capacity(&a->products[slot_ID]);
 8001266:	7dfa      	ldrb	r2, [r7, #23]
 8001268:	4613      	mov	r3, r2
 800126a:	00db      	lsls	r3, r3, #3
 800126c:	1a9b      	subs	r3, r3, r2
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	4413      	add	r3, r2
 8001274:	3301      	adds	r3, #1
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff94 	bl	80011a4 <update_Product_Capacity>
        a->current_Profit += buying_Prod.price;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001282:	7cfa      	ldrb	r2, [r7, #19]
 8001284:	4413      	add	r3, r2
 8001286:	b29a      	uxth	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
        update_Automat_Capacity(a);
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ff48 	bl	8001124 <update_Automat_Capacity>
        return true;
 8001294:	2301      	movs	r3, #1
 8001296:	e000      	b.n	800129a <buy_Product+0xc6>
    }
    else
    {
<<<<<<< HEAD
    	return false;
 8001298:	2300      	movs	r3, #0
//        printf("PRODUCT OUT OF STOCK!\n");
//        printf("PLEASE TRY AGAIN!\n");
    }
}
 800129a:	4618      	mov	r0, r3
 800129c:	371c      	adds	r7, #28
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd90      	pop	{r4, r7, pc}
 80012a2:	bf00      	nop
 80012a4:	08008ac8 	.word	0x08008ac8
 80012a8:	08008adc 	.word	0x08008adc
=======
        printf("PRODUCT OUT OF STOCK!\n");
 800088a:	4807      	ldr	r0, [pc, #28]	@ (80008a8 <buy_Product+0xdc>)
 800088c:	f003 fc3e 	bl	800410c <puts>
        printf("PLEASE TRY AGAIN!\n");
 8000890:	4806      	ldr	r0, [pc, #24]	@ (80008ac <buy_Product+0xe0>)
 8000892:	f003 fc3b 	bl	800410c <puts>
 8000896:	e000      	b.n	800089a <buy_Product+0xce>
        return;
 8000898:	bf00      	nop
    }
}
 800089a:	371c      	adds	r7, #28
 800089c:	46bd      	mov	sp, r7
 800089e:	bd90      	pop	{r4, r7, pc}
 80008a0:	08004e5c 	.word	0x08004e5c
 80008a4:	08004e70 	.word	0x08004e70
 80008a8:	08004e80 	.word	0x08004e80
 80008ac:	08004e98 	.word	0x08004e98
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

080012ac <turn_Off>:

void turn_Off(Automat* a)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
    if(a->turned_on)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <turn_Off+0x1a>
    {
        a->turned_on = false;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2200      	movs	r2, #0
 80012c2:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
    }
}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <turn_On>:

void turn_On(Automat* a)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b083      	sub	sp, #12
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
    if(!a->turned_on)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 80012e0:	f083 0301 	eor.w	r3, r3, #1
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <turn_On+0x20>
    {
        a->turned_on = true;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2201      	movs	r2, #1
 80012ee:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
    }
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <update_Temperature_and_Humidity>:

void update_Temperature_and_Humidity(Automat *a, int8_t temperature, uint8_t humidity)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	460b      	mov	r3, r1
 8001308:	70fb      	strb	r3, [r7, #3]
 800130a:	4613      	mov	r3, r2
 800130c:	70bb      	strb	r3, [r7, #2]
    // citanje temperature i vlage sa senzora i spremanje u a->current_Temperature i a->current_Humidity

    if(!a->turned_on)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 8001314:	f083 0301 	eor.w	r3, r3, #1
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d13e      	bne.n	800139c <update_Temperature_and_Humidity+0x9e>
    {
        return;
    }

    a->current_Temperature = temperature;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	78fa      	ldrb	r2, [r7, #3]
 8001322:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    a->current_Humidity = humidity;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	78ba      	ldrb	r2, [r7, #2]
 800132a:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a

    if(a->wanted_Temperature > a->current_Temperature + a->temperature_offset_tolerance)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f993 305b 	ldrsb.w	r3, [r3, #91]	@ 0x5b
 8001334:	461a      	mov	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f993 3059 	ldrsb.w	r3, [r3, #89]	@ 0x59
 800133c:	4619      	mov	r1, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001344:	440b      	add	r3, r1
 8001346:	429a      	cmp	r2, r3
 8001348:	dd08      	ble.n	800135c <update_Temperature_and_Humidity+0x5e>
    {
        a->freezing = true;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2201      	movs	r2, #1
 800134e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
        a->overheating = false;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
 800135a:	e020      	b.n	800139e <update_Temperature_and_Humidity+0xa0>
    }
    else if(a->wanted_Temperature < a->current_Temperature - a->temperature_offset_tolerance)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f993 305b 	ldrsb.w	r3, [r3, #91]	@ 0x5b
 8001362:	461a      	mov	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f993 3059 	ldrsb.w	r3, [r3, #89]	@ 0x59
 800136a:	4619      	mov	r1, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001372:	1acb      	subs	r3, r1, r3
 8001374:	429a      	cmp	r2, r3
 8001376:	da08      	bge.n	800138a <update_Temperature_and_Humidity+0x8c>
    {
        a->overheating = true;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2201      	movs	r2, #1
 800137c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
        a->freezing = false;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 8001388:	e009      	b.n	800139e <update_Temperature_and_Humidity+0xa0>
    }
    else
    {
        a->overheating = false;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
        a->freezing = false;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
 800139a:	e000      	b.n	800139e <update_Temperature_and_Humidity+0xa0>
        return;
 800139c:	bf00      	nop
    }
}
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <update_Wanted_Temperature>:

void update_Wanted_Temperature(Automat* a, int8_t wanted_temp)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	460b      	mov	r3, r1
 80013b2:	70fb      	strb	r3, [r7, #3]
    if(!a->turned_on)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 80013ba:	f083 0301 	eor.w	r3, r3, #1
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d10e      	bne.n	80013e2 <update_Wanted_Temperature+0x3a>
    {
        return;
    }

    a->wanted_Temperature = wanted_temp;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	78fa      	ldrb	r2, [r7, #3]
 80013c8:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
    update_Temperature_and_Humidity(a, a->current_Temperature, a->current_Humidity);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f993 1059 	ldrsb.w	r1, [r3, #89]	@ 0x59
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 80013d8:	461a      	mov	r2, r3
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ff8f 	bl	80012fe <update_Temperature_and_Humidity>
 80013e0:	e000      	b.n	80013e4 <update_Wanted_Temperature+0x3c>
        return;
 80013e2:	bf00      	nop
}
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <update_Light_Intensity>:

void update_Light_Intensity(Automat* a, uint8_t value)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	460b      	mov	r3, r1
 80013f4:	70fb      	strb	r3, [r7, #3]
    if(!a->turned_on) //|| !a->door_opened
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 80013fc:	f083 0301 	eor.w	r3, r3, #1
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d104      	bne.n	8001410 <update_Light_Intensity+0x26>
    {
        return;
    }

    a->light_Intensity = value;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	78fa      	ldrb	r2, [r7, #3]
 800140a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800140e:	e000      	b.n	8001412 <update_Light_Intensity+0x28>
        return;
 8001410:	bf00      	nop
}
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <send_to_lcd>:
//	WHILE ((__HAL_TIM_GET_COUNTER(&HTIM2)) < TIME);
//}

// Send data/command to LCD
void send_to_lcd(char data, int rs)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	6039      	str	r1, [r7, #0]
 8001426:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	b2db      	uxtb	r3, r3
 800142c:	461a      	mov	r2, r3
 800142e:	2180      	movs	r1, #128	@ 0x80
 8001430:	4823      	ldr	r0, [pc, #140]	@ (80014c0 <send_to_lcd+0xa4>)
 8001432:	f002 ff3b 	bl	80042ac <HAL_GPIO_WritePin>

	// Write the data to the respective pin
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data >> 3) & 0x01));
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	08db      	lsrs	r3, r3, #3
 800143a:	b2db      	uxtb	r3, r3
 800143c:	f003 0301 	and.w	r3, r3, #1
 8001440:	b2db      	uxtb	r3, r3
 8001442:	461a      	mov	r2, r3
 8001444:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001448:	481d      	ldr	r0, [pc, #116]	@ (80014c0 <send_to_lcd+0xa4>)
 800144a:	f002 ff2f 	bl	80042ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data >> 2) & 0x01));
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	089b      	lsrs	r3, r3, #2
 8001452:	b2db      	uxtb	r3, r3
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	b2db      	uxtb	r3, r3
 800145a:	461a      	mov	r2, r3
 800145c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001460:	4817      	ldr	r0, [pc, #92]	@ (80014c0 <send_to_lcd+0xa4>)
 8001462:	f002 ff23 	bl	80042ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data >> 1) & 0x01));
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	085b      	lsrs	r3, r3, #1
 800146a:	b2db      	uxtb	r3, r3
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	b2db      	uxtb	r3, r3
 8001472:	461a      	mov	r2, r3
 8001474:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001478:	4811      	ldr	r0, [pc, #68]	@ (80014c0 <send_to_lcd+0xa4>)
 800147a:	f002 ff17 	bl	80042ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data >> 0) & 0x01));
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	b2db      	uxtb	r3, r3
 8001486:	461a      	mov	r2, r3
 8001488:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800148c:	480c      	ldr	r0, [pc, #48]	@ (80014c0 <send_to_lcd+0xa4>)
 800148e:	f002 ff0d 	bl	80042ac <HAL_GPIO_WritePin>

	// Toggle EN PIN to send the data
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8001492:	2201      	movs	r2, #1
 8001494:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001498:	4809      	ldr	r0, [pc, #36]	@ (80014c0 <send_to_lcd+0xa4>)
 800149a:	f002 ff07 	bl	80042ac <HAL_GPIO_WritePin>
	delay(100);
 800149e:	2064      	movs	r0, #100	@ 0x64
 80014a0:	f000 fc9e 	bl	8001de0 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80014aa:	4805      	ldr	r0, [pc, #20]	@ (80014c0 <send_to_lcd+0xa4>)
 80014ac:	f002 fefe 	bl	80042ac <HAL_GPIO_WritePin>
	delay(100);
 80014b0:	2064      	movs	r0, #100	@ 0x64
 80014b2:	f000 fc95 	bl	8001de0 <delay>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40021000 	.word	0x40021000

080014c4 <lcd_send_cmd>:

// Send command to LCD
void lcd_send_cmd(char cmd)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	// Send upper nibble first
	datatosend = ((cmd >> 4) & 0x0F);
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	091b      	lsrs	r3, r3, #4
 80014d2:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);  // RS must be 0 while sending command
 80014d4:	7bfb      	ldrb	r3, [r7, #15]
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff9f 	bl	800141c <send_to_lcd>

	// Send Lower Nibble
	datatosend = ((cmd) & 0x0F);
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	f003 030f 	and.w	r3, r3, #15
 80014e4:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	2100      	movs	r1, #0
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff ff96 	bl	800141c <send_to_lcd>
}
 80014f0:	bf00      	nop
 80014f2:	3710      	adds	r7, #16
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <lcd_send_data>:

// Send data to LCD
void lcd_send_data(char data)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	// Send higher nibble
	datatosend = ((data >> 4) & 0x0f);
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	091b      	lsrs	r3, r3, #4
 8001506:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8001508:	7bfb      	ldrb	r3, [r7, #15]
 800150a:	2101      	movs	r1, #1
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff85 	bl	800141c <send_to_lcd>

	// Send Lower nibble
	datatosend = ((data) & 0x0f);
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	f003 030f 	and.w	r3, r3, #15
 8001518:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	2101      	movs	r1, #1
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff ff7c 	bl	800141c <send_to_lcd>
}
 8001524:	bf00      	nop
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <lcd_clear>:

// Clear LCD display
void lcd_clear(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8001530:	2001      	movs	r0, #1
 8001532:	f7ff ffc7 	bl	80014c4 <lcd_send_cmd>
	HAL_Delay(2);
 8001536:	2002      	movs	r0, #2
 8001538:	f001 ff3c 	bl	80033b4 <HAL_Delay>
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}

08001540 <lcd_put_cur>:

// Set cursor position
void lcd_put_cur(int row, int col)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
	switch (row)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <lcd_put_cur+0x18>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d005      	beq.n	8001562 <lcd_put_cur+0x22>
 8001556:	e009      	b.n	800156c <lcd_put_cur+0x2c>
	{
	case 0:
		col |= 0x80;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800155e:	603b      	str	r3, [r7, #0]
		break;
 8001560:	e004      	b.n	800156c <lcd_put_cur+0x2c>
	case 1:
		col |= 0xC0;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001568:	603b      	str	r3, [r7, #0]
		break;
 800156a:	bf00      	nop
	}

	lcd_send_cmd(col);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ffa7 	bl	80014c4 <lcd_send_cmd>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <lcd_init>:

// Initialize the LCD
void lcd_init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
	// 4 bit initialization
	HAL_Delay(50);  // wait for >40ms
 8001584:	2032      	movs	r0, #50	@ 0x32
 8001586:	f001 ff15 	bl	80033b4 <HAL_Delay>
	lcd_send_cmd(0x02);
 800158a:	2002      	movs	r0, #2
 800158c:	f7ff ff9a 	bl	80014c4 <lcd_send_cmd>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8001590:	2201      	movs	r2, #1
 8001592:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001596:	481f      	ldr	r0, [pc, #124]	@ (8001614 <lcd_init+0x94>)
 8001598:	f002 fe88 	bl	80042ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 800159c:	2200      	movs	r2, #0
 800159e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015a2:	481c      	ldr	r0, [pc, #112]	@ (8001614 <lcd_init+0x94>)
 80015a4:	f002 fe82 	bl	80042ac <HAL_GPIO_WritePin>
	HAL_Delay(10);  // wait for >4.1ms
 80015a8:	200a      	movs	r0, #10
 80015aa:	f001 ff03 	bl	80033b4 <HAL_Delay>
	lcd_send_cmd(0x02);
 80015ae:	2002      	movs	r0, #2
 80015b0:	f7ff ff88 	bl	80014c4 <lcd_send_cmd>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 80015b4:	2201      	movs	r2, #1
 80015b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015ba:	4816      	ldr	r0, [pc, #88]	@ (8001614 <lcd_init+0x94>)
 80015bc:	f002 fe76 	bl	80042ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015c6:	4813      	ldr	r0, [pc, #76]	@ (8001614 <lcd_init+0x94>)
 80015c8:	f002 fe70 	bl	80042ac <HAL_GPIO_WritePin>
	HAL_Delay(10);  // wait for >100us
 80015cc:	200a      	movs	r0, #10
 80015ce:	f001 fef1 	bl	80033b4 <HAL_Delay>
	lcd_send_cmd(0x02);
 80015d2:	2002      	movs	r0, #2
 80015d4:	f7ff ff76 	bl	80014c4 <lcd_send_cmd>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 80015d8:	2201      	movs	r2, #1
 80015da:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015de:	480d      	ldr	r0, [pc, #52]	@ (8001614 <lcd_init+0x94>)
 80015e0:	f002 fe64 	bl	80042ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 80015e4:	2200      	movs	r2, #0
 80015e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80015ea:	480a      	ldr	r0, [pc, #40]	@ (8001614 <lcd_init+0x94>)
 80015ec:	f002 fe5e 	bl	80042ac <HAL_GPIO_WritePin>
	HAL_Delay(10);  // 4bit mode
 80015f0:	200a      	movs	r0, #10
 80015f2:	f001 fedf 	bl	80033b4 <HAL_Delay>

	// Display initialization
	lcd_send_cmd(0x28);
 80015f6:	2028      	movs	r0, #40	@ 0x28
 80015f8:	f7ff ff64 	bl	80014c4 <lcd_send_cmd>
	HAL_Delay(10);
 80015fc:	200a      	movs	r0, #10
 80015fe:	f001 fed9 	bl	80033b4 <HAL_Delay>
	lcd_send_cmd(0x0E);
 8001602:	200e      	movs	r0, #14
 8001604:	f7ff ff5e 	bl	80014c4 <lcd_send_cmd>
	HAL_Delay(10);
 8001608:	200a      	movs	r0, #10
 800160a:	f001 fed3 	bl	80033b4 <HAL_Delay>
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40021000 	.word	0x40021000

08001618 <lcd_send_string>:

// Send string to LCD
void lcd_send_string(char *str)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data(*str++);
 8001620:	e006      	b.n	8001630 <lcd_send_string+0x18>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	607a      	str	r2, [r7, #4]
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff ff64 	bl	80014f8 <lcd_send_data>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1f4      	bne.n	8001622 <lcd_send_string+0xa>
}
 8001638:	bf00      	nop
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <lcd_print_empty_slot>:

void lcd_print_empty_slot(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	lcd_clear();
 8001648:	f7ff ff70 	bl	800152c <lcd_clear>
	lcd_put_cur(0, 3);
 800164c:	2103      	movs	r1, #3
 800164e:	2000      	movs	r0, #0
 8001650:	f7ff ff76 	bl	8001540 <lcd_put_cur>
	lcd_send_string("EMPTY SLOT");
 8001654:	4807      	ldr	r0, [pc, #28]	@ (8001674 <lcd_print_empty_slot+0x30>)
 8001656:	f7ff ffdf 	bl	8001618 <lcd_send_string>
	lcd_put_cur(1, 3);
 800165a:	2103      	movs	r1, #3
 800165c:	2001      	movs	r0, #1
 800165e:	f7ff ff6f 	bl	8001540 <lcd_put_cur>
	lcd_send_string("TRY AGAIN!");
 8001662:	4805      	ldr	r0, [pc, #20]	@ (8001678 <lcd_print_empty_slot+0x34>)
 8001664:	f7ff ffd8 	bl	8001618 <lcd_send_string>
	HAL_Delay(1000);
 8001668:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800166c:	f001 fea2 	bl	80033b4 <HAL_Delay>
}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	08008c1c 	.word	0x08008c1c
 8001678:	08008c28 	.word	0x08008c28

0800167c <lcd_print_current_product>:

void lcd_print_current_product(Product product)
{
 800167c:	b590      	push	{r4, r7, lr}
 800167e:	b087      	sub	sp, #28
 8001680:	af02      	add	r7, sp, #8
 8001682:	463c      	mov	r4, r7
 8001684:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	sprintf(prvi_red, "%u %s %u$", product.slot_ID + 1, product.name, product.price);
 8001688:	783b      	ldrb	r3, [r7, #0]
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	7afb      	ldrb	r3, [r7, #11]
 800168e:	4619      	mov	r1, r3
 8001690:	463b      	mov	r3, r7
 8001692:	3301      	adds	r3, #1
 8001694:	9100      	str	r1, [sp, #0]
 8001696:	490f      	ldr	r1, [pc, #60]	@ (80016d4 <lcd_print_current_product+0x58>)
 8001698:	480f      	ldr	r0, [pc, #60]	@ (80016d8 <lcd_print_current_product+0x5c>)
 800169a:	f006 f999 	bl	80079d0 <siprintf>
	sprintf(drugi_red, "QUANTITY: %u#", product.quantity);
 800169e:	7b3b      	ldrb	r3, [r7, #12]
 80016a0:	461a      	mov	r2, r3
 80016a2:	490e      	ldr	r1, [pc, #56]	@ (80016dc <lcd_print_current_product+0x60>)
 80016a4:	480e      	ldr	r0, [pc, #56]	@ (80016e0 <lcd_print_current_product+0x64>)
 80016a6:	f006 f993 	bl	80079d0 <siprintf>
	lcd_clear();
 80016aa:	f7ff ff3f 	bl	800152c <lcd_clear>
	lcd_put_cur(0, 0);
 80016ae:	2100      	movs	r1, #0
 80016b0:	2000      	movs	r0, #0
 80016b2:	f7ff ff45 	bl	8001540 <lcd_put_cur>
	lcd_send_string(prvi_red);
 80016b6:	4808      	ldr	r0, [pc, #32]	@ (80016d8 <lcd_print_current_product+0x5c>)
 80016b8:	f7ff ffae 	bl	8001618 <lcd_send_string>
	lcd_put_cur(1, 0);
 80016bc:	2100      	movs	r1, #0
 80016be:	2001      	movs	r0, #1
 80016c0:	f7ff ff3e 	bl	8001540 <lcd_put_cur>
	lcd_send_string(drugi_red);
 80016c4:	4806      	ldr	r0, [pc, #24]	@ (80016e0 <lcd_print_current_product+0x64>)
 80016c6:	f7ff ffa7 	bl	8001618 <lcd_send_string>
}
 80016ca:	bf00      	nop
 80016cc:	3714      	adds	r7, #20
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd90      	pop	{r4, r7, pc}
 80016d2:	bf00      	nop
 80016d4:	08008c34 	.word	0x08008c34
 80016d8:	200000b8 	.word	0x200000b8
 80016dc:	08008c40 	.word	0x08008c40
 80016e0:	200000c8 	.word	0x200000c8

080016e4 <lcd_print_maintance>:

void lcd_print_maintance(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	lcd_clear();
 80016e8:	f7ff ff20 	bl	800152c <lcd_clear>
	lcd_put_cur(0, 2);
 80016ec:	2102      	movs	r1, #2
 80016ee:	2000      	movs	r0, #0
 80016f0:	f7ff ff26 	bl	8001540 <lcd_put_cur>
	lcd_send_string("MAINTENANCE");
 80016f4:	4805      	ldr	r0, [pc, #20]	@ (800170c <lcd_print_maintance+0x28>)
 80016f6:	f7ff ff8f 	bl	8001618 <lcd_send_string>
	lcd_put_cur(1, 7);
 80016fa:	2107      	movs	r1, #7
 80016fc:	2001      	movs	r0, #1
 80016fe:	f7ff ff1f 	bl	8001540 <lcd_put_cur>
	lcd_send_string("MODE");
 8001702:	4803      	ldr	r0, [pc, #12]	@ (8001710 <lcd_print_maintance+0x2c>)
 8001704:	f7ff ff88 	bl	8001618 <lcd_send_string>
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	08008c50 	.word	0x08008c50
 8001710:	08008c5c 	.word	0x08008c5c

08001714 <lcd_print_buying_product>:

void lcd_print_buying_product(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
	lcd_clear();
 8001718:	f7ff ff08 	bl	800152c <lcd_clear>
	lcd_put_cur(0, 0);
 800171c:	2100      	movs	r1, #0
 800171e:	2000      	movs	r0, #0
 8001720:	f7ff ff0e 	bl	8001540 <lcd_put_cur>
	lcd_send_string("Buying product...");
 8001724:	4807      	ldr	r0, [pc, #28]	@ (8001744 <lcd_print_buying_product+0x30>)
 8001726:	f7ff ff77 	bl	8001618 <lcd_send_string>
	lcd_put_cur(1, 0);
 800172a:	2100      	movs	r1, #0
 800172c:	2001      	movs	r0, #1
 800172e:	f7ff ff07 	bl	8001540 <lcd_put_cur>
	lcd_send_string("PLEASE WAIT...");
 8001732:	4805      	ldr	r0, [pc, #20]	@ (8001748 <lcd_print_buying_product+0x34>)
 8001734:	f7ff ff70 	bl	8001618 <lcd_send_string>
	HAL_Delay(2500);
 8001738:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 800173c:	f001 fe3a 	bl	80033b4 <HAL_Delay>
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	08008c64 	.word	0x08008c64
 8001748:	08008c78 	.word	0x08008c78

0800174c <init_PWM_LED_Controller_Channels>:
uint8_t ALL_LED_OFF_L_Reg = 0xFC;
uint8_t ALL_LED_OFF_H_Reg = 0xFD;


void init_PWM_LED_Controller_Channels(I2C_HandleTypeDef *hi2c)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af02      	add	r7, sp, #8
 8001752:	6078      	str	r0, [r7, #4]
	  HAL_Delay(100);
 8001754:	2064      	movs	r0, #100	@ 0x64
 8001756:	f001 fe2d 	bl	80033b4 <HAL_Delay>

	  enable_All_Outputs();
 800175a:	f000 f853 	bl	8001804 <enable_All_Outputs>

	  uint8_t message_Buffer[2];

	  message_Buffer[0] = 0x00; 				// MODE 1
 800175e:	2300      	movs	r3, #0
 8001760:	723b      	strb	r3, [r7, #8]
	  message_Buffer[1] = 0x01;
 8001762:	2301      	movs	r3, #1
 8001764:	727b      	strb	r3, [r7, #9]
	  HAL_I2C_Master_Transmit(hi2c, address_W, (uint8_t*) &message_Buffer, 2, 1000);
 8001766:	4b20      	ldr	r3, [pc, #128]	@ (80017e8 <init_PWM_LED_Controller_Channels+0x9c>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	4619      	mov	r1, r3
 800176c:	f107 0208 	add.w	r2, r7, #8
 8001770:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	2302      	movs	r3, #2
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f002 ff19 	bl	80045b0 <HAL_I2C_Master_Transmit>

	  message_Buffer[0] = 0x01;					// MODE 2
 800177e:	2301      	movs	r3, #1
 8001780:	723b      	strb	r3, [r7, #8]
	  message_Buffer[1] = 0x04;
 8001782:	2304      	movs	r3, #4
 8001784:	727b      	strb	r3, [r7, #9]
	  HAL_I2C_Master_Transmit(hi2c, address_W, (uint8_t*) &message_Buffer, 2, 1000);
 8001786:	4b18      	ldr	r3, [pc, #96]	@ (80017e8 <init_PWM_LED_Controller_Channels+0x9c>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	4619      	mov	r1, r3
 800178c:	f107 0208 	add.w	r2, r7, #8
 8001790:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2302      	movs	r3, #2
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f002 ff09 	bl	80045b0 <HAL_I2C_Master_Transmit>

	  HAL_Delay(100);
 800179e:	2064      	movs	r0, #100	@ 0x64
 80017a0:	f001 fe08 	bl	80033b4 <HAL_Delay>

	for(int i = 0; i < NUMBER_OF_PRODUCTS; ++i)
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	e016      	b.n	80017d8 <init_PWM_LED_Controller_Channels+0x8c>
	{
		set_Duty_Cycle(hi2c, 100, 2*i, 0);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	2300      	movs	r3, #0
 80017b4:	2164      	movs	r1, #100	@ 0x64
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f832 	bl	8001820 <set_Duty_Cycle>
		set_Duty_Cycle(hi2c, 0, 2*i + 1, 0);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	3301      	adds	r3, #1
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	2300      	movs	r3, #0
 80017ca:	2100      	movs	r1, #0
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 f827 	bl	8001820 <set_Duty_Cycle>
	for(int i = 0; i < NUMBER_OF_PRODUCTS; ++i)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	3301      	adds	r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2b05      	cmp	r3, #5
 80017dc:	dde5      	ble.n	80017aa <init_PWM_LED_Controller_Channels+0x5e>
	}
}
 80017de:	bf00      	nop
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000030 	.word	0x20000030

080017ec <disable_All_Outputs>:

void disable_All_Outputs()
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80017f0:	2201      	movs	r2, #1
 80017f2:	2180      	movs	r1, #128	@ 0x80
 80017f4:	4802      	ldr	r0, [pc, #8]	@ (8001800 <disable_All_Outputs+0x14>)
 80017f6:	f002 fd59 	bl	80042ac <HAL_GPIO_WritePin>
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40020400 	.word	0x40020400

08001804 <enable_All_Outputs>:

void enable_All_Outputs()
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001808:	2200      	movs	r2, #0
 800180a:	2180      	movs	r1, #128	@ 0x80
 800180c:	4802      	ldr	r0, [pc, #8]	@ (8001818 <enable_All_Outputs+0x14>)
 800180e:	f002 fd4d 	bl	80042ac <HAL_GPIO_WritePin>
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40020400 	.word	0x40020400
 800181c:	00000000 	.word	0x00000000

08001820 <set_Duty_Cycle>:
		HAL_I2C_Master_Transmit(hi2c, address_W, (uint8_t*) &message_Buffer, 2, 1000);
	}
}

void set_Duty_Cycle(I2C_HandleTypeDef *hi2c, uint8_t dutyCycle, uint8_t led, uint8_t delay)
{
 8001820:	b5b0      	push	{r4, r5, r7, lr}
 8001822:	b08c      	sub	sp, #48	@ 0x30
 8001824:	af02      	add	r7, sp, #8
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	4608      	mov	r0, r1
 800182a:	4611      	mov	r1, r2
 800182c:	461a      	mov	r2, r3
 800182e:	4603      	mov	r3, r0
 8001830:	70fb      	strb	r3, [r7, #3]
 8001832:	460b      	mov	r3, r1
 8001834:	70bb      	strb	r3, [r7, #2]
 8001836:	4613      	mov	r3, r2
 8001838:	707b      	strb	r3, [r7, #1]
	uint8_t led_ON_L_Reg = 0x06 + led * 4;
 800183a:	78bb      	ldrb	r3, [r7, #2]
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	b2db      	uxtb	r3, r3
 8001840:	3306      	adds	r3, #6
 8001842:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t led_ON_H_Reg = 0x07 + led * 4;
 8001846:	78bb      	ldrb	r3, [r7, #2]
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	b2db      	uxtb	r3, r3
 800184c:	3307      	adds	r3, #7
 800184e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

	uint8_t led_OFF_L_Reg = 0x08 + led * 4;
 8001852:	78bb      	ldrb	r3, [r7, #2]
 8001854:	3302      	adds	r3, #2
 8001856:	b2db      	uxtb	r3, r3
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	uint8_t led_OFF_H_Reg = 0x09 + led * 4;
 800185e:	78bb      	ldrb	r3, [r7, #2]
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	b2db      	uxtb	r3, r3
 8001864:	3309      	adds	r3, #9
 8001866:	f887 3020 	strb.w	r3, [r7, #32]

	uint16_t led_OFF_Value;
	uint8_t led_OFF_L_Value;
	uint8_t led_OFF_H_Value;

	if(delay + dutyCycle <= 100)
 800186a:	787a      	ldrb	r2, [r7, #1]
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	4413      	add	r3, r2
 8001870:	2b64      	cmp	r3, #100	@ 0x64
 8001872:	dc53      	bgt.n	800191c <set_Duty_Cycle+0xfc>
	{
		led_ON_Value = 4095 * (delay / 100.00);
 8001874:	787b      	ldrb	r3, [r7, #1]
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fe54 	bl	8000524 <__aeabi_i2d>
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	4b7b      	ldr	r3, [pc, #492]	@ (8001a70 <set_Duty_Cycle+0x250>)
 8001882:	f7fe ffe3 	bl	800084c <__aeabi_ddiv>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4610      	mov	r0, r2
 800188c:	4619      	mov	r1, r3
 800188e:	a376      	add	r3, pc, #472	@ (adr r3, 8001a68 <set_Duty_Cycle+0x248>)
 8001890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001894:	f7fe feb0 	bl	80005f8 <__aeabi_dmul>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4610      	mov	r0, r2
 800189e:	4619      	mov	r1, r3
 80018a0:	f7ff f944 	bl	8000b2c <__aeabi_d2uiz>
 80018a4:	4603      	mov	r3, r0
 80018a6:	83fb      	strh	r3, [r7, #30]

		led_ON_L_Value = led_ON_Value % 256;
 80018a8:	8bfb      	ldrh	r3, [r7, #30]
 80018aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		led_ON_H_Value = led_ON_Value >> 8;
 80018ae:	8bfb      	ldrh	r3, [r7, #30]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

		led_OFF_Value = ((uint16_t)(led_ON_Value + (dutyCycle / 100.00) * 4095)) % 4096;
 80018b8:	8bfb      	ldrh	r3, [r7, #30]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7fe fe32 	bl	8000524 <__aeabi_i2d>
 80018c0:	4604      	mov	r4, r0
 80018c2:	460d      	mov	r5, r1
 80018c4:	78fb      	ldrb	r3, [r7, #3]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fe2c 	bl	8000524 <__aeabi_i2d>
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	4b67      	ldr	r3, [pc, #412]	@ (8001a70 <set_Duty_Cycle+0x250>)
 80018d2:	f7fe ffbb 	bl	800084c <__aeabi_ddiv>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	4610      	mov	r0, r2
 80018dc:	4619      	mov	r1, r3
 80018de:	a362      	add	r3, pc, #392	@ (adr r3, 8001a68 <set_Duty_Cycle+0x248>)
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	f7fe fe88 	bl	80005f8 <__aeabi_dmul>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4620      	mov	r0, r4
 80018ee:	4629      	mov	r1, r5
 80018f0:	f7fe fccc 	bl	800028c <__adddf3>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	f7ff f916 	bl	8000b2c <__aeabi_d2uiz>
 8001900:	4603      	mov	r3, r0
 8001902:	b29b      	uxth	r3, r3
 8001904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001908:	83bb      	strh	r3, [r7, #28]

		led_OFF_L_Value = led_OFF_Value % 256;
 800190a:	8bbb      	ldrh	r3, [r7, #28]
 800190c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		led_OFF_H_Value = led_OFF_Value >> 8;
 8001910:	8bbb      	ldrh	r3, [r7, #28]
 8001912:	0a1b      	lsrs	r3, r3, #8
 8001914:	b29b      	uxth	r3, r3
 8001916:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800191a:	e056      	b.n	80019ca <set_Duty_Cycle+0x1aa>

	}
	else
	{
		led_ON_Value = 4095 * (delay / 100.00);
 800191c:	787b      	ldrb	r3, [r7, #1]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fe00 	bl	8000524 <__aeabi_i2d>
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	4b51      	ldr	r3, [pc, #324]	@ (8001a70 <set_Duty_Cycle+0x250>)
 800192a:	f7fe ff8f 	bl	800084c <__aeabi_ddiv>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4610      	mov	r0, r2
 8001934:	4619      	mov	r1, r3
 8001936:	a34c      	add	r3, pc, #304	@ (adr r3, 8001a68 <set_Duty_Cycle+0x248>)
 8001938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193c:	f7fe fe5c 	bl	80005f8 <__aeabi_dmul>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4610      	mov	r0, r2
 8001946:	4619      	mov	r1, r3
 8001948:	f7ff f8f0 	bl	8000b2c <__aeabi_d2uiz>
 800194c:	4603      	mov	r3, r0
 800194e:	83fb      	strh	r3, [r7, #30]

		led_ON_L_Value = led_ON_Value % 256;
 8001950:	8bfb      	ldrh	r3, [r7, #30]
 8001952:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		led_ON_H_Value = led_ON_Value >> 8;
 8001956:	8bfb      	ldrh	r3, [r7, #30]
 8001958:	0a1b      	lsrs	r3, r3, #8
 800195a:	b29b      	uxth	r3, r3
 800195c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

		led_OFF_Value = 4095 - ((((delay + dutyCycle) % 100) / 100.00) * 4095.00);
 8001960:	787a      	ldrb	r2, [r7, #1]
 8001962:	78fb      	ldrb	r3, [r7, #3]
 8001964:	4413      	add	r3, r2
 8001966:	4a43      	ldr	r2, [pc, #268]	@ (8001a74 <set_Duty_Cycle+0x254>)
 8001968:	fb82 1203 	smull	r1, r2, r2, r3
 800196c:	1151      	asrs	r1, r2, #5
 800196e:	17da      	asrs	r2, r3, #31
 8001970:	1a8a      	subs	r2, r1, r2
 8001972:	2164      	movs	r1, #100	@ 0x64
 8001974:	fb01 f202 	mul.w	r2, r1, r2
 8001978:	1a9a      	subs	r2, r3, r2
 800197a:	4610      	mov	r0, r2
 800197c:	f7fe fdd2 	bl	8000524 <__aeabi_i2d>
 8001980:	f04f 0200 	mov.w	r2, #0
 8001984:	4b3a      	ldr	r3, [pc, #232]	@ (8001a70 <set_Duty_Cycle+0x250>)
 8001986:	f7fe ff61 	bl	800084c <__aeabi_ddiv>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4610      	mov	r0, r2
 8001990:	4619      	mov	r1, r3
 8001992:	a335      	add	r3, pc, #212	@ (adr r3, 8001a68 <set_Duty_Cycle+0x248>)
 8001994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001998:	f7fe fe2e 	bl	80005f8 <__aeabi_dmul>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	a131      	add	r1, pc, #196	@ (adr r1, 8001a68 <set_Duty_Cycle+0x248>)
 80019a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019a6:	f7fe fc6f 	bl	8000288 <__aeabi_dsub>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	4610      	mov	r0, r2
 80019b0:	4619      	mov	r1, r3
 80019b2:	f7ff f8bb 	bl	8000b2c <__aeabi_d2uiz>
 80019b6:	4603      	mov	r3, r0
 80019b8:	83bb      	strh	r3, [r7, #28]

		led_OFF_L_Value = led_OFF_Value % 256;
 80019ba:	8bbb      	ldrh	r3, [r7, #28]
 80019bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		led_OFF_H_Value = led_OFF_Value >> 8;
 80019c0:	8bbb      	ldrh	r3, [r7, #28]
 80019c2:	0a1b      	lsrs	r3, r3, #8
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t message_Buffer_ON_H[2];

	uint8_t message_Buffer_OFF_L[2];
	uint8_t message_Buffer_OFF_H[2];

	message_Buffer_ON_L[1] = led_ON_L_Value;
 80019ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80019ce:	767b      	strb	r3, [r7, #25]
	message_Buffer_ON_L[0] = led_ON_L_Reg;
 80019d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80019d4:	763b      	strb	r3, [r7, #24]

	message_Buffer_ON_H[1] = led_ON_H_Value;
 80019d6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80019da:	757b      	strb	r3, [r7, #21]
	message_Buffer_ON_H[0] = led_ON_H_Reg;
 80019dc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80019e0:	753b      	strb	r3, [r7, #20]

	message_Buffer_OFF_L[1] = led_OFF_L_Value;
 80019e2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80019e6:	747b      	strb	r3, [r7, #17]
	message_Buffer_OFF_L[0] = led_OFF_L_Reg;
 80019e8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80019ec:	743b      	strb	r3, [r7, #16]

	message_Buffer_OFF_H[1] = led_OFF_H_Value;
 80019ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80019f2:	737b      	strb	r3, [r7, #13]
	message_Buffer_OFF_H[0] = led_OFF_H_Reg;
 80019f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019f8:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(hi2c, address_W, (uint8_t*) &message_Buffer_ON_L, 2, 1000);
 80019fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001a78 <set_Duty_Cycle+0x258>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	4619      	mov	r1, r3
 8001a00:	f107 0218 	add.w	r2, r7, #24
 8001a04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f002 fdcf 	bl	80045b0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(hi2c, address_W, (uint8_t*) &message_Buffer_ON_H, 2, 1000);
 8001a12:	4b19      	ldr	r3, [pc, #100]	@ (8001a78 <set_Duty_Cycle+0x258>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	4619      	mov	r1, r3
 8001a18:	f107 0214 	add.w	r2, r7, #20
 8001a1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	2302      	movs	r3, #2
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f002 fdc3 	bl	80045b0 <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Transmit(hi2c, address_W, (uint8_t*) &message_Buffer_OFF_L, 2, 1000);
 8001a2a:	4b13      	ldr	r3, [pc, #76]	@ (8001a78 <set_Duty_Cycle+0x258>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f107 0210 	add.w	r2, r7, #16
 8001a34:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f002 fdb7 	bl	80045b0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(hi2c, address_W, (uint8_t*) &message_Buffer_OFF_H, 2, 1000);
 8001a42:	4b0d      	ldr	r3, [pc, #52]	@ (8001a78 <set_Duty_Cycle+0x258>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	4619      	mov	r1, r3
 8001a48:	f107 020c 	add.w	r2, r7, #12
 8001a4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	2302      	movs	r3, #2
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f002 fdab 	bl	80045b0 <HAL_I2C_Master_Transmit>
}
 8001a5a:	bf00      	nop
 8001a5c:	3728      	adds	r7, #40	@ 0x28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bdb0      	pop	{r4, r5, r7, pc}
 8001a62:	bf00      	nop
 8001a64:	f3af 8000 	nop.w
 8001a68:	00000000 	.word	0x00000000
 8001a6c:	40affe00 	.word	0x40affe00
 8001a70:	40590000 	.word	0x40590000
 8001a74:	51eb851f 	.word	0x51eb851f
 8001a78:	20000030 	.word	0x20000030

08001a7c <start_AC>:

	disable_Sleep_Mode(hi2c);
}

void start_AC(I2C_HandleTypeDef *hi2c)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	set_Duty_Cycle(hi2c, 100, (2 * (NUMBER_OF_PRODUCTS)) + 1, 0);
 8001a84:	2300      	movs	r3, #0
 8001a86:	220d      	movs	r2, #13
 8001a88:	2164      	movs	r1, #100	@ 0x64
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff fec8 	bl	8001820 <set_Duty_Cycle>
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <stop_AC>:

void stop_AC(I2C_HandleTypeDef *hi2c)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	set_Duty_Cycle(hi2c, 0, (2 * (NUMBER_OF_PRODUCTS)) + 1, 0);
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	220d      	movs	r2, #13
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7ff feba 	bl	8001820 <set_Duty_Cycle>
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <serialize_Automat>:
extern int8_t received_data[2];
bool communication_established_flag_up = false;


void serialize_Automat(uint8_t* serialized_Automat, uint8_t data_Size)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	70fb      	strb	r3, [r7, #3]
	serialized_Automat[0] = My_Automat.products_Number;
 8001ac0:	4b85      	ldr	r3, [pc, #532]	@ (8001cd8 <serialize_Automat+0x224>)
 8001ac2:	781a      	ldrb	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	701a      	strb	r2, [r3, #0]

	for(int i = 0; i < My_Automat.products_Number; ++i)
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	e07e      	b.n	8001bcc <serialize_Automat+0x118>
	{
		uint8_t product_Size = sizeof(My_Automat.products[i]);
 8001ace:	230e      	movs	r3, #14
 8001ad0:	73fb      	strb	r3, [r7, #15]
		uint8_t product_offset =  1 + product_Size * i;
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	7bfa      	ldrb	r2, [r7, #15]
 8001ad8:	fb12 f303 	smulbb	r3, r2, r3
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	3301      	adds	r3, #1
 8001ae0:	73bb      	strb	r3, [r7, #14]
		serialized_Automat[product_offset] = My_Automat.products[i].slot_ID;
 8001ae2:	7bbb      	ldrb	r3, [r7, #14]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	18d1      	adds	r1, r2, r3
 8001ae8:	487b      	ldr	r0, [pc, #492]	@ (8001cd8 <serialize_Automat+0x224>)
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	4613      	mov	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	1a9b      	subs	r3, r3, r2
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4403      	add	r3, r0
 8001af6:	3301      	adds	r3, #1
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	700b      	strb	r3, [r1, #0]
		for(int j = 0; j < 10; j++)
 8001afc:	2300      	movs	r3, #0
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	e02e      	b.n	8001b60 <serialize_Automat+0xac>
		{
			if(j < strlen(My_Automat.products[i].name))
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	4613      	mov	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	1a9b      	subs	r3, r3, r2
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	4a72      	ldr	r2, [pc, #456]	@ (8001cd8 <serialize_Automat+0x224>)
 8001b0e:	4413      	add	r3, r2
 8001b10:	3302      	adds	r3, #2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fb5c 	bl	80001d0 <strlen>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d913      	bls.n	8001b48 <serialize_Automat+0x94>
				serialized_Automat[product_offset + 1 + j] = My_Automat.products[i].name[j];
 8001b20:	7bbb      	ldrb	r3, [r7, #14]
 8001b22:	1c5a      	adds	r2, r3, #1
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4413      	add	r3, r2
 8001b28:	461a      	mov	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	1899      	adds	r1, r3, r2
 8001b2e:	486a      	ldr	r0, [pc, #424]	@ (8001cd8 <serialize_Automat+0x224>)
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	4613      	mov	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	1a9b      	subs	r3, r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	18c2      	adds	r2, r0, r3
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	4413      	add	r3, r2
 8001b40:	3302      	adds	r3, #2
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	700b      	strb	r3, [r1, #0]
 8001b46:	e008      	b.n	8001b5a <serialize_Automat+0xa6>
			else
				serialized_Automat[product_offset + 1 + j] = '*';
 8001b48:	7bbb      	ldrb	r3, [r7, #14]
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4413      	add	r3, r2
 8001b50:	461a      	mov	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	222a      	movs	r2, #42	@ 0x2a
 8001b58:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 10; j++)
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	2b09      	cmp	r3, #9
 8001b64:	ddcd      	ble.n	8001b02 <serialize_Automat+0x4e>
		}
		serialized_Automat[product_offset + product_Size - 3] = My_Automat.products[i].price;
 8001b66:	7bba      	ldrb	r2, [r7, #14]
 8001b68:	7bfb      	ldrb	r3, [r7, #15]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3b03      	subs	r3, #3
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	18d1      	adds	r1, r2, r3
 8001b72:	4859      	ldr	r0, [pc, #356]	@ (8001cd8 <serialize_Automat+0x224>)
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	4613      	mov	r3, r2
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	1a9b      	subs	r3, r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4403      	add	r3, r0
 8001b80:	330c      	adds	r3, #12
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	700b      	strb	r3, [r1, #0]
		serialized_Automat[product_offset + product_Size - 2] = My_Automat.products[i].quantity;
 8001b86:	7bba      	ldrb	r2, [r7, #14]
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	3b02      	subs	r3, #2
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	18d1      	adds	r1, r2, r3
 8001b92:	4851      	ldr	r0, [pc, #324]	@ (8001cd8 <serialize_Automat+0x224>)
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	4613      	mov	r3, r2
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	1a9b      	subs	r3, r3, r2
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	4403      	add	r3, r0
 8001ba0:	330d      	adds	r3, #13
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	700b      	strb	r3, [r1, #0]
		serialized_Automat[product_offset + product_Size - 1] = My_Automat.products[i].capacity;
 8001ba6:	7bba      	ldrb	r2, [r7, #14]
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
 8001baa:	4413      	add	r3, r2
 8001bac:	3b01      	subs	r3, #1
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	18d1      	adds	r1, r2, r3
 8001bb2:	4849      	ldr	r0, [pc, #292]	@ (8001cd8 <serialize_Automat+0x224>)
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	1a9b      	subs	r3, r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4403      	add	r3, r0
 8001bc0:	330e      	adds	r3, #14
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	700b      	strb	r3, [r1, #0]
	for(int i = 0; i < My_Automat.products_Number; ++i)
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	4b42      	ldr	r3, [pc, #264]	@ (8001cd8 <serialize_Automat+0x224>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	f6ff af7a 	blt.w	8001ace <serialize_Automat+0x1a>
	}

	serialized_Automat[data_Size - 14] = My_Automat.capacity;
 8001bda:	78fb      	ldrb	r3, [r7, #3]
 8001bdc:	3b0e      	subs	r3, #14
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	4413      	add	r3, r2
 8001be2:	4a3d      	ldr	r2, [pc, #244]	@ (8001cd8 <serialize_Automat+0x224>)
 8001be4:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001be8:	701a      	strb	r2, [r3, #0]
	serialized_Automat[data_Size - 13] = My_Automat.door_opened;
 8001bea:	4b3b      	ldr	r3, [pc, #236]	@ (8001cd8 <serialize_Automat+0x224>)
 8001bec:	f893 1056 	ldrb.w	r1, [r3, #86]	@ 0x56
 8001bf0:	78fb      	ldrb	r3, [r7, #3]
 8001bf2:	3b0d      	subs	r3, #13
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	460a      	mov	r2, r1
 8001bfa:	701a      	strb	r2, [r3, #0]
	serialized_Automat[data_Size - 12] = My_Automat.turned_on;
 8001bfc:	4b36      	ldr	r3, [pc, #216]	@ (8001cd8 <serialize_Automat+0x224>)
 8001bfe:	f893 1057 	ldrb.w	r1, [r3, #87]	@ 0x57
 8001c02:	78fb      	ldrb	r3, [r7, #3]
 8001c04:	3b0c      	subs	r3, #12
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	460a      	mov	r2, r1
 8001c0c:	701a      	strb	r2, [r3, #0]
	serialized_Automat[data_Size - 11] = My_Automat.stand_by;
 8001c0e:	4b32      	ldr	r3, [pc, #200]	@ (8001cd8 <serialize_Automat+0x224>)
 8001c10:	f893 1058 	ldrb.w	r1, [r3, #88]	@ 0x58
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	3b0b      	subs	r3, #11
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	460a      	mov	r2, r1
 8001c1e:	701a      	strb	r2, [r3, #0]
	serialized_Automat[data_Size - 10] = My_Automat.current_Temperature;
 8001c20:	4b2d      	ldr	r3, [pc, #180]	@ (8001cd8 <serialize_Automat+0x224>)
 8001c22:	f993 1059 	ldrsb.w	r1, [r3, #89]	@ 0x59
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	3b0a      	subs	r3, #10
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	b2ca      	uxtb	r2, r1
 8001c30:	701a      	strb	r2, [r3, #0]
	serialized_Automat[data_Size - 9] = My_Automat.current_Humidity;
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	3b09      	subs	r3, #9
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	4413      	add	r3, r2
 8001c3a:	4a27      	ldr	r2, [pc, #156]	@ (8001cd8 <serialize_Automat+0x224>)
 8001c3c:	f892 205a 	ldrb.w	r2, [r2, #90]	@ 0x5a
 8001c40:	701a      	strb	r2, [r3, #0]
	serialized_Automat[data_Size - 8] = My_Automat.wanted_Temperature;
 8001c42:	4b25      	ldr	r3, [pc, #148]	@ (8001cd8 <serialize_Automat+0x224>)
 8001c44:	f993 105b 	ldrsb.w	r1, [r3, #91]	@ 0x5b
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	3b08      	subs	r3, #8
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	4413      	add	r3, r2
 8001c50:	b2ca      	uxtb	r2, r1
 8001c52:	701a      	strb	r2, [r3, #0]
	serialized_Automat[data_Size - 7] = My_Automat.light_Intensity;
 8001c54:	78fb      	ldrb	r3, [r7, #3]
 8001c56:	3b07      	subs	r3, #7
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	4a1e      	ldr	r2, [pc, #120]	@ (8001cd8 <serialize_Automat+0x224>)
 8001c5e:	f892 205c 	ldrb.w	r2, [r2, #92]	@ 0x5c
 8001c62:	701a      	strb	r2, [r3, #0]
	serialized_Automat[data_Size - 6] = My_Automat.selected_Product;
 8001c64:	78fb      	ldrb	r3, [r7, #3]
 8001c66:	3b06      	subs	r3, #6
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	4a1a      	ldr	r2, [pc, #104]	@ (8001cd8 <serialize_Automat+0x224>)
 8001c6e:	f892 205d 	ldrb.w	r2, [r2, #93]	@ 0x5d
 8001c72:	701a      	strb	r2, [r3, #0]
	serialized_Automat[data_Size - 5] = My_Automat.current_Profit % (2*2*2*2*2*2*2*2);
 8001c74:	4b18      	ldr	r3, [pc, #96]	@ (8001cd8 <serialize_Automat+0x224>)
 8001c76:	f8b3 105e 	ldrh.w	r1, [r3, #94]	@ 0x5e
 8001c7a:	78fb      	ldrb	r3, [r7, #3]
 8001c7c:	3b05      	subs	r3, #5
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	b2ca      	uxtb	r2, r1
 8001c84:	701a      	strb	r2, [r3, #0]
	serialized_Automat[data_Size - 4] = My_Automat.current_Profit >> 8;
 8001c86:	4b14      	ldr	r3, [pc, #80]	@ (8001cd8 <serialize_Automat+0x224>)
 8001c88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001c8c:	0a1b      	lsrs	r3, r3, #8
 8001c8e:	b299      	uxth	r1, r3
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	3b04      	subs	r3, #4
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	4413      	add	r3, r2
 8001c98:	b2ca      	uxtb	r2, r1
 8001c9a:	701a      	strb	r2, [r3, #0]
	serialized_Automat[data_Size - 3] = My_Automat.overheating;
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd8 <serialize_Automat+0x224>)
 8001c9e:	f893 1060 	ldrb.w	r1, [r3, #96]	@ 0x60
 8001ca2:	78fb      	ldrb	r3, [r7, #3]
 8001ca4:	3b03      	subs	r3, #3
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	460a      	mov	r2, r1
 8001cac:	701a      	strb	r2, [r3, #0]
	serialized_Automat[data_Size - 2] = My_Automat.freezing;
 8001cae:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd8 <serialize_Automat+0x224>)
 8001cb0:	f893 1061 	ldrb.w	r1, [r3, #97]	@ 0x61
 8001cb4:	78fb      	ldrb	r3, [r7, #3]
 8001cb6:	3b02      	subs	r3, #2
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	4413      	add	r3, r2
 8001cbc:	460a      	mov	r2, r1
 8001cbe:	701a      	strb	r2, [r3, #0]
	serialized_Automat[data_Size - 1] = My_Automat.temperature_offset_tolerance;
 8001cc0:	78fb      	ldrb	r3, [r7, #3]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	4a03      	ldr	r2, [pc, #12]	@ (8001cd8 <serialize_Automat+0x224>)
 8001cca:	f892 2062 	ldrb.w	r2, [r2, #98]	@ 0x62
 8001cce:	701a      	strb	r2, [r3, #0]
}
 8001cd0:	bf00      	nop
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	200000dc 	.word	0x200000dc

08001cdc <send_Serialized_Automat>:

void send_Serialized_Automat(uint8_t* serialized_Automat, uint8_t serialized_Automat_Size)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart3, (uint8_t*)serialized_Automat, serialized_Automat_Size, 10*serialized_Automat_Size);
 8001ce8:	78fb      	ldrb	r3, [r7, #3]
 8001cea:	b299      	uxth	r1, r3
 8001cec:	78fa      	ldrb	r2, [r7, #3]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	460a      	mov	r2, r1
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	4803      	ldr	r0, [pc, #12]	@ (8001d08 <send_Serialized_Automat+0x2c>)
 8001cfc:	f004 fd30 	bl	8006760 <HAL_UART_Transmit>
}
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	2000022c 	.word	0x2000022c

08001d0c <receive_Data>:

void receive_Data(int8_t* data_Buffer, uint8_t data_Size)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b09c      	sub	sp, #112	@ 0x70
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	70fb      	strb	r3, [r7, #3]
	if(data_Buffer[0] == 0)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f993 3000 	ldrsb.w	r3, [r3]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d103      	bne.n	8001d2a <receive_Data+0x1e>
	{
		power_flag_up = true;
 8001d22:	4b27      	ldr	r3, [pc, #156]	@ (8001dc0 <receive_Data+0xb4>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	701a      	strb	r2, [r3, #0]
 8001d28:	e007      	b.n	8001d3a <receive_Data+0x2e>
	}
	else if(data_Buffer[0] == 1)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f993 3000 	ldrsb.w	r3, [r3]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d102      	bne.n	8001d3a <receive_Data+0x2e>
	{
		door_flag_up = true;
 8001d34:	4b23      	ldr	r3, [pc, #140]	@ (8001dc4 <receive_Data+0xb8>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	701a      	strb	r2, [r3, #0]
	}

	if(!My_Automat.turned_on)
 8001d3a:	4b23      	ldr	r3, [pc, #140]	@ (8001dc8 <receive_Data+0xbc>)
 8001d3c:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 8001d40:	f083 0301 	eor.w	r3, r3, #1
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <receive_Data+0x46>
	{
		received_data_read_flag = true;
 8001d4a:	4b20      	ldr	r3, [pc, #128]	@ (8001dcc <receive_Data+0xc0>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	701a      	strb	r2, [r3, #0]
		return;
 8001d50:	e033      	b.n	8001dba <receive_Data+0xae>
	}

	if(data_Buffer[0] == 2)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f993 3000 	ldrsb.w	r3, [r3]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d103      	bne.n	8001d64 <receive_Data+0x58>
	{
		refilled_flag_up = true;
 8001d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd0 <receive_Data+0xc4>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
 8001d62:	e027      	b.n	8001db4 <receive_Data+0xa8>
	}
	else if(data_Buffer[0] == 3)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f993 3000 	ldrsb.w	r3, [r3]
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	d108      	bne.n	8001d80 <receive_Data+0x74>
	{
		ideal_temperature_flag_up = true;
 8001d6e:	4b19      	ldr	r3, [pc, #100]	@ (8001dd4 <receive_Data+0xc8>)
 8001d70:	2201      	movs	r2, #1
 8001d72:	701a      	strb	r2, [r3, #0]
		ideal_temperature = data_Buffer[1];
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8001d7a:	4b17      	ldr	r3, [pc, #92]	@ (8001dd8 <receive_Data+0xcc>)
 8001d7c:	701a      	strb	r2, [r3, #0]
 8001d7e:	e019      	b.n	8001db4 <receive_Data+0xa8>
	}
	else if(data_Buffer[0] == 4 && data_Buffer[1] == 4)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f993 3000 	ldrsb.w	r3, [r3]
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d114      	bne.n	8001db4 <receive_Data+0xa8>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d10e      	bne.n	8001db4 <receive_Data+0xa8>
	{
		communication_established_flag_up = true;
 8001d96:	4b11      	ldr	r3, [pc, #68]	@ (8001ddc <receive_Data+0xd0>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	701a      	strb	r2, [r3, #0]
        uint8_t serialized_Automat[99];
        serialize_Automat(serialized_Automat, sizeof(serialized_Automat));
 8001d9c:	f107 030c 	add.w	r3, r7, #12
 8001da0:	2163      	movs	r1, #99	@ 0x63
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fe86 	bl	8001ab4 <serialize_Automat>
        send_Serialized_Automat(serialized_Automat, sizeof(serialized_Automat));
 8001da8:	f107 030c 	add.w	r3, r7, #12
 8001dac:	2163      	movs	r1, #99	@ 0x63
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff ff94 	bl	8001cdc <send_Serialized_Automat>
	}
	received_data_read_flag = true;
 8001db4:	4b05      	ldr	r3, [pc, #20]	@ (8001dcc <receive_Data+0xc0>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	701a      	strb	r2, [r3, #0]
}
 8001dba:	3770      	adds	r7, #112	@ 0x70
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000274 	.word	0x20000274
 8001dc4:	20000275 	.word	0x20000275
 8001dc8:	200000dc 	.word	0x200000dc
 8001dcc:	20000279 	.word	0x20000279
 8001dd0:	20000276 	.word	0x20000276
 8001dd4:	20000277 	.word	0x20000277
 8001dd8:	20000278 	.word	0x20000278
 8001ddc:	200000d8 	.word	0x200000d8

08001de0 <delay>:
extern TIM_HandleTypeDef htim2;

uint8_t current_Temp;
uint8_t current_Hum;

void delay (uint16_t time){
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001dea:	4b09      	ldr	r3, [pc, #36]	@ (8001e10 <delay+0x30>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2200      	movs	r2, #0
 8001df0:	625a      	str	r2, [r3, #36]	@ 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim2)) < time);
 8001df2:	bf00      	nop
 8001df4:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <delay+0x30>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d3f9      	bcc.n	8001df4 <delay+0x14>
}
 8001e00:	bf00      	nop
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	200001e4 	.word	0x200001e4

08001e14 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e20:	f107 030c 	add.w	r3, r7, #12
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001e30:	887b      	ldrh	r3, [r7, #2]
 8001e32:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e34:	2301      	movs	r3, #1
 8001e36:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001e3c:	f107 030c 	add.w	r3, r7, #12
 8001e40:	4619      	mov	r1, r3
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f002 f87e 	bl	8003f44 <HAL_GPIO_Init>
}
 8001e48:	bf00      	nop
 8001e4a:	3720      	adds	r7, #32
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001e6c:	887b      	ldrh	r3, [r7, #2]
 8001e6e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e70:	2300      	movs	r3, #0
 8001e72:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e74:	2301      	movs	r3, #1
 8001e76:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001e78:	f107 030c 	add.w	r3, r7, #12
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f002 f860 	bl	8003f44 <HAL_GPIO_Init>
}
 8001e84:	bf00      	nop
 8001e86:	3720      	adds	r7, #32
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <DHT11_Start>:

#define DHT11_PORT GPIOD
#define DHT11_PIN GPIO_PIN_11

void DHT11_Start (void){
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 8001e90:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e94:	4812      	ldr	r0, [pc, #72]	@ (8001ee0 <DHT11_Start+0x54>)
 8001e96:	f7ff ffbd 	bl	8001e14 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ea0:	480f      	ldr	r0, [pc, #60]	@ (8001ee0 <DHT11_Start+0x54>)
 8001ea2:	f002 fa03 	bl	80042ac <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001ea6:	200a      	movs	r0, #10
 8001ea8:	f001 fa84 	bl	80033b4 <HAL_Delay>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8001eac:	2200      	movs	r2, #0
 8001eae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001eb2:	480b      	ldr	r0, [pc, #44]	@ (8001ee0 <DHT11_Start+0x54>)
 8001eb4:	f002 f9fa 	bl	80042ac <HAL_GPIO_WritePin>
	HAL_Delay(18) ;  // wait for 18ms
 8001eb8:	2012      	movs	r0, #18
 8001eba:	f001 fa7b 	bl	80033b4 <HAL_Delay>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ec4:	4806      	ldr	r0, [pc, #24]	@ (8001ee0 <DHT11_Start+0x54>)
 8001ec6:	f002 f9f1 	bl	80042ac <HAL_GPIO_WritePin>
	delay (20);   // wait for 20us
 8001eca:	2014      	movs	r0, #20
 8001ecc:	f7ff ff88 	bl	8001de0 <delay>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 8001ed0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ed4:	4802      	ldr	r0, [pc, #8]	@ (8001ee0 <DHT11_Start+0x54>)
 8001ed6:	f7ff ffbb 	bl	8001e50 <Set_Pin_Input>
}
 8001eda:	bf00      	nop
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40020c00 	.word	0x40020c00

08001ee4 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void){
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	71fb      	strb	r3, [r7, #7]
	delay (40); // 40
 8001eee:	2028      	movs	r0, #40	@ 0x28
 8001ef0:	f7ff ff76 	bl	8001de0 <delay>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))){
 8001ef4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ef8:	4811      	ldr	r0, [pc, #68]	@ (8001f40 <DHT11_Check_Response+0x5c>)
 8001efa:	f002 f9bf 	bl	800427c <HAL_GPIO_ReadPin>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d10f      	bne.n	8001f24 <DHT11_Check_Response+0x40>
		delay (80); // 80
 8001f04:	2050      	movs	r0, #80	@ 0x50
 8001f06:	f7ff ff6b 	bl	8001de0 <delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001f0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f0e:	480c      	ldr	r0, [pc, #48]	@ (8001f40 <DHT11_Check_Response+0x5c>)
 8001f10:	f002 f9b4 	bl	800427c <HAL_GPIO_ReadPin>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <DHT11_Check_Response+0x3c>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	71fb      	strb	r3, [r7, #7]
 8001f1e:	e001      	b.n	8001f24 <DHT11_Check_Response+0x40>
		else Response = -1; // 255
 8001f20:	23ff      	movs	r3, #255	@ 0xff
 8001f22:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 8001f24:	bf00      	nop
 8001f26:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f2a:	4805      	ldr	r0, [pc, #20]	@ (8001f40 <DHT11_Check_Response+0x5c>)
 8001f2c:	f002 f9a6 	bl	800427c <HAL_GPIO_ReadPin>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f7      	bne.n	8001f26 <DHT11_Check_Response+0x42>
	return Response;
 8001f36:	79fb      	ldrb	r3, [r7, #7]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40020c00 	.word	0x40020c00

08001f44 <DHT11_Read>:

uint8_t DHT11_Read (void){
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
	uint8_t i,j;
	i=0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	71fb      	strb	r3, [r7, #7]
	for (j=0;j<8;j++){
 8001f4e:	2300      	movs	r3, #0
 8001f50:	71bb      	strb	r3, [r7, #6]
 8001f52:	e03a      	b.n	8001fca <DHT11_Read+0x86>
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8001f54:	bf00      	nop
 8001f56:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f5a:	4820      	ldr	r0, [pc, #128]	@ (8001fdc <DHT11_Read+0x98>)
 8001f5c:	f002 f98e 	bl	800427c <HAL_GPIO_ReadPin>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f7      	beq.n	8001f56 <DHT11_Read+0x12>
		delay (40);   // wait for 40 us
 8001f66:	2028      	movs	r0, #40	@ 0x28
 8001f68:	f7ff ff3a 	bl	8001de0 <delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))){   // if the pin is low
 8001f6c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001f70:	481a      	ldr	r0, [pc, #104]	@ (8001fdc <DHT11_Read+0x98>)
 8001f72:	f002 f983 	bl	800427c <HAL_GPIO_ReadPin>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10e      	bne.n	8001f9a <DHT11_Read+0x56>
			i&= ~(1<<(7-j));   // write 0
 8001f7c:	79bb      	ldrb	r3, [r7, #6]
 8001f7e:	f1c3 0307 	rsb	r3, r3, #7
 8001f82:	2201      	movs	r2, #1
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	b25b      	sxtb	r3, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	b25a      	sxtb	r2, r3
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	4013      	ands	r3, r2
 8001f94:	b25b      	sxtb	r3, r3
 8001f96:	71fb      	strb	r3, [r7, #7]
 8001f98:	e00b      	b.n	8001fb2 <DHT11_Read+0x6e>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001f9a:	79bb      	ldrb	r3, [r7, #6]
 8001f9c:	f1c3 0307 	rsb	r3, r3, #7
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	b25a      	sxtb	r2, r3
 8001fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	b25b      	sxtb	r3, r3
 8001fb0:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 8001fb2:	bf00      	nop
 8001fb4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001fb8:	4808      	ldr	r0, [pc, #32]	@ (8001fdc <DHT11_Read+0x98>)
 8001fba:	f002 f95f 	bl	800427c <HAL_GPIO_ReadPin>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1f7      	bne.n	8001fb4 <DHT11_Read+0x70>
	for (j=0;j<8;j++){
 8001fc4:	79bb      	ldrb	r3, [r7, #6]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	71bb      	strb	r3, [r7, #6]
 8001fca:	79bb      	ldrb	r3, [r7, #6]
 8001fcc:	2b07      	cmp	r3, #7
 8001fce:	d9c1      	bls.n	8001f54 <DHT11_Read+0x10>
	}
	return i;
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40020c00 	.word	0x40020c00

08001fe0 <read_Temperature_and_Humidity>:

void read_Temperature_and_Humidity(){
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
	DHT11_Start();
 8001fe6:	f7ff ff51 	bl	8001e8c <DHT11_Start>
	uint8_t Presence = DHT11_Check_Response();
 8001fea:	f7ff ff7b 	bl	8001ee4 <DHT11_Check_Response>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Rh_byte1, Rh_byte2, Temp_byte1, Temp_byte2, SUM;
	Rh_byte1 = DHT11_Read();
 8001ff2:	f7ff ffa7 	bl	8001f44 <DHT11_Read>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	71bb      	strb	r3, [r7, #6]
	Rh_byte2 = DHT11_Read();
 8001ffa:	f7ff ffa3 	bl	8001f44 <DHT11_Read>
 8001ffe:	4603      	mov	r3, r0
 8002000:	717b      	strb	r3, [r7, #5]
	Temp_byte1 = DHT11_Read();
 8002002:	f7ff ff9f 	bl	8001f44 <DHT11_Read>
 8002006:	4603      	mov	r3, r0
 8002008:	713b      	strb	r3, [r7, #4]
	Temp_byte2 = DHT11_Read();
 800200a:	f7ff ff9b 	bl	8001f44 <DHT11_Read>
 800200e:	4603      	mov	r3, r0
 8002010:	70fb      	strb	r3, [r7, #3]
	SUM = DHT11_Read();
 8002012:	f7ff ff97 	bl	8001f44 <DHT11_Read>
 8002016:	4603      	mov	r3, r0
 8002018:	70bb      	strb	r3, [r7, #2]

	current_Temp = Temp_byte1;
 800201a:	4a05      	ldr	r2, [pc, #20]	@ (8002030 <read_Temperature_and_Humidity+0x50>)
 800201c:	793b      	ldrb	r3, [r7, #4]
 800201e:	7013      	strb	r3, [r2, #0]
	current_Hum = Rh_byte1;
 8002020:	4a04      	ldr	r2, [pc, #16]	@ (8002034 <read_Temperature_and_Humidity+0x54>)
 8002022:	79bb      	ldrb	r3, [r7, #6]
 8002024:	7013      	strb	r3, [r2, #0]
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	200000d9 	.word	0x200000d9
 8002034:	200000da 	.word	0x200000da

08002038 <automat_Capacity_Lights_Control_Start>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void automat_Capacity_Lights_Control_Start()
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
	if(My_Automat.capacity >= 65)
 800203c:	4b26      	ldr	r3, [pc, #152]	@ (80020d8 <automat_Capacity_Lights_Control_Start+0xa0>)
 800203e:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002042:	2b40      	cmp	r3, #64	@ 0x40
 8002044:	d912      	bls.n	800206c <automat_Capacity_Lights_Control_Start+0x34>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8002046:	2201      	movs	r2, #1
 8002048:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800204c:	4823      	ldr	r0, [pc, #140]	@ (80020dc <automat_Capacity_Lights_Control_Start+0xa4>)
 800204e:	f002 f92d 	bl	80042ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8002052:	2200      	movs	r2, #0
 8002054:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002058:	4820      	ldr	r0, [pc, #128]	@ (80020dc <automat_Capacity_Lights_Control_Start+0xa4>)
 800205a:	f002 f927 	bl	80042ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 800205e:	2200      	movs	r2, #0
 8002060:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002064:	481d      	ldr	r0, [pc, #116]	@ (80020dc <automat_Capacity_Lights_Control_Start+0xa4>)
 8002066:	f002 f921 	bl	80042ac <HAL_GPIO_WritePin>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
	}
}
 800206a:	e033      	b.n	80020d4 <automat_Capacity_Lights_Control_Start+0x9c>
	else if(My_Automat.capacity < 65 && My_Automat.capacity >0)
 800206c:	4b1a      	ldr	r3, [pc, #104]	@ (80020d8 <automat_Capacity_Lights_Control_Start+0xa0>)
 800206e:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002072:	2b40      	cmp	r3, #64	@ 0x40
 8002074:	d817      	bhi.n	80020a6 <automat_Capacity_Lights_Control_Start+0x6e>
 8002076:	4b18      	ldr	r3, [pc, #96]	@ (80020d8 <automat_Capacity_Lights_Control_Start+0xa0>)
 8002078:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800207c:	2b00      	cmp	r3, #0
 800207e:	d012      	beq.n	80020a6 <automat_Capacity_Lights_Control_Start+0x6e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8002080:	2200      	movs	r2, #0
 8002082:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002086:	4815      	ldr	r0, [pc, #84]	@ (80020dc <automat_Capacity_Lights_Control_Start+0xa4>)
 8002088:	f002 f910 	bl	80042ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800208c:	2201      	movs	r2, #1
 800208e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002092:	4812      	ldr	r0, [pc, #72]	@ (80020dc <automat_Capacity_Lights_Control_Start+0xa4>)
 8002094:	f002 f90a 	bl	80042ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8002098:	2200      	movs	r2, #0
 800209a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800209e:	480f      	ldr	r0, [pc, #60]	@ (80020dc <automat_Capacity_Lights_Control_Start+0xa4>)
 80020a0:	f002 f904 	bl	80042ac <HAL_GPIO_WritePin>
}
 80020a4:	e016      	b.n	80020d4 <automat_Capacity_Lights_Control_Start+0x9c>
	else if(My_Automat.capacity == 0)
 80020a6:	4b0c      	ldr	r3, [pc, #48]	@ (80020d8 <automat_Capacity_Lights_Control_Start+0xa0>)
 80020a8:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d111      	bne.n	80020d4 <automat_Capacity_Lights_Control_Start+0x9c>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80020b0:	2200      	movs	r2, #0
 80020b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020b6:	4809      	ldr	r0, [pc, #36]	@ (80020dc <automat_Capacity_Lights_Control_Start+0xa4>)
 80020b8:	f002 f8f8 	bl	80042ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80020bc:	2200      	movs	r2, #0
 80020be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020c2:	4806      	ldr	r0, [pc, #24]	@ (80020dc <automat_Capacity_Lights_Control_Start+0xa4>)
 80020c4:	f002 f8f2 	bl	80042ac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80020c8:	2201      	movs	r2, #1
 80020ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80020ce:	4803      	ldr	r0, [pc, #12]	@ (80020dc <automat_Capacity_Lights_Control_Start+0xa4>)
 80020d0:	f002 f8ec 	bl	80042ac <HAL_GPIO_WritePin>
}
 80020d4:	bf00      	nop
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	200000dc 	.word	0x200000dc
 80020dc:	40020c00 	.word	0x40020c00

080020e0 <automat_Capacity_Lights_Control_Stop>:

void automat_Capacity_Lights_Control_Stop()
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80020e4:	2200      	movs	r2, #0
 80020e6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80020ea:	4808      	ldr	r0, [pc, #32]	@ (800210c <automat_Capacity_Lights_Control_Stop+0x2c>)
 80020ec:	f002 f8de 	bl	80042ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 80020f0:	2200      	movs	r2, #0
 80020f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020f6:	4805      	ldr	r0, [pc, #20]	@ (800210c <automat_Capacity_Lights_Control_Stop+0x2c>)
 80020f8:	f002 f8d8 	bl	80042ac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80020fc:	2200      	movs	r2, #0
 80020fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002102:	4802      	ldr	r0, [pc, #8]	@ (800210c <automat_Capacity_Lights_Control_Stop+0x2c>)
 8002104:	f002 f8d2 	bl	80042ac <HAL_GPIO_WritePin>
}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40020c00 	.word	0x40020c00

08002110 <start_ADC>:

void start_ADC()
{
 8002110:	b5b0      	push	{r4, r5, r7, lr}
 8002112:	b09a      	sub	sp, #104	@ 0x68
 8002114:	af00      	add	r7, sp, #0

	uint16_t adcValue;
	volatile HAL_StatusTypeDef adcPoolResult;

	while(My_Automat.door_opened)
 8002116:	e04f      	b.n	80021b8 <start_ADC+0xa8>
	{
	    if(received_data_read_flag)
 8002118:	4b2d      	ldr	r3, [pc, #180]	@ (80021d0 <start_ADC+0xc0>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d004      	beq.n	800212a <start_ADC+0x1a>
	    {
	    	process_Transmited_Data();
 8002120:	f000 f89a 	bl	8002258 <process_Transmited_Data>
	    	received_data_read_flag = false;
 8002124:	4b2a      	ldr	r3, [pc, #168]	@ (80021d0 <start_ADC+0xc0>)
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]
	    }

	    uint8_t serialized_Automat[99];
	    serialize_Automat(serialized_Automat, sizeof(serialized_Automat));
 800212a:	463b      	mov	r3, r7
 800212c:	2163      	movs	r1, #99	@ 0x63
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff fcc0 	bl	8001ab4 <serialize_Automat>
	    send_Serialized_Automat(serialized_Automat, sizeof(serialized_Automat));
 8002134:	463b      	mov	r3, r7
 8002136:	2163      	movs	r1, #99	@ 0x63
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fdcf 	bl	8001cdc <send_Serialized_Automat>

		HAL_ADC_Start(&hadc1);
 800213e:	4825      	ldr	r0, [pc, #148]	@ (80021d4 <start_ADC+0xc4>)
 8002140:	f001 f9a0 	bl	8003484 <HAL_ADC_Start>

		adcPoolResult = HAL_ADC_PollForConversion(&hadc1,10);
 8002144:	210a      	movs	r1, #10
 8002146:	4823      	ldr	r0, [pc, #140]	@ (80021d4 <start_ADC+0xc4>)
 8002148:	f001 faa1 	bl	800368e <HAL_ADC_PollForConversion>
 800214c:	4603      	mov	r3, r0
 800214e:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
		if(adcPoolResult == HAL_OK)
 8002152:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d12d      	bne.n	80021b8 <start_ADC+0xa8>
		{
			adcValue = HAL_ADC_GetValue(&hadc1);
 800215c:	481d      	ldr	r0, [pc, #116]	@ (80021d4 <start_ADC+0xc4>)
 800215e:	f001 fb21 	bl	80037a4 <HAL_ADC_GetValue>
 8002162:	4603      	mov	r3, r0
 8002164:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
			update_Light_Intensity(&My_Automat, (adcValue * 100.00) / TIM2->ARR);
 8002168:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800216c:	4618      	mov	r0, r3
 800216e:	f7fe f9d9 	bl	8000524 <__aeabi_i2d>
 8002172:	f04f 0200 	mov.w	r2, #0
 8002176:	4b18      	ldr	r3, [pc, #96]	@ (80021d8 <start_ADC+0xc8>)
 8002178:	f7fe fa3e 	bl	80005f8 <__aeabi_dmul>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4614      	mov	r4, r2
 8002182:	461d      	mov	r5, r3
 8002184:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe f9ba 	bl	8000504 <__aeabi_ui2d>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4620      	mov	r0, r4
 8002196:	4629      	mov	r1, r5
 8002198:	f7fe fb58 	bl	800084c <__aeabi_ddiv>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4610      	mov	r0, r2
 80021a2:	4619      	mov	r1, r3
 80021a4:	f7fe fcc2 	bl	8000b2c <__aeabi_d2uiz>
 80021a8:	4603      	mov	r3, r0
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	4619      	mov	r1, r3
 80021ae:	480b      	ldr	r0, [pc, #44]	@ (80021dc <start_ADC+0xcc>)
 80021b0:	f7ff f91b 	bl	80013ea <update_Light_Intensity>
			turn_On_Automat_Light();
 80021b4:	f000 f824 	bl	8002200 <turn_On_Automat_Light>
	while(My_Automat.door_opened)
 80021b8:	4b08      	ldr	r3, [pc, #32]	@ (80021dc <start_ADC+0xcc>)
 80021ba:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1aa      	bne.n	8002118 <start_ADC+0x8>
		else
		{
			continue;
		}
	}
	HAL_ADC_Stop(&hadc1);
 80021c2:	4804      	ldr	r0, [pc, #16]	@ (80021d4 <start_ADC+0xc4>)
 80021c4:	f001 fa30 	bl	8003628 <HAL_ADC_Stop>
}
 80021c8:	bf00      	nop
 80021ca:	3768      	adds	r7, #104	@ 0x68
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bdb0      	pop	{r4, r5, r7, pc}
 80021d0:	20000279 	.word	0x20000279
 80021d4:	20000148 	.word	0x20000148
 80021d8:	40590000 	.word	0x40590000
 80021dc:	200000dc 	.word	0x200000dc

080021e0 <turn_Off_Automat_Light>:

void turn_Off_Automat_Light()
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
	update_Light_Intensity(&My_Automat, 0);
 80021e4:	2100      	movs	r1, #0
 80021e6:	4804      	ldr	r0, [pc, #16]	@ (80021f8 <turn_Off_Automat_Light+0x18>)
 80021e8:	f7ff f8ff 	bl	80013ea <update_Light_Intensity>
	TIM2->CCR2 = 0;
 80021ec:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80021f0:	2200      	movs	r2, #0
 80021f2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	200000dc 	.word	0x200000dc
 80021fc:	00000000 	.word	0x00000000

08002200 <turn_On_Automat_Light>:

void turn_On_Automat_Light()
{
 8002200:	b598      	push	{r3, r4, r7, lr}
 8002202:	af00      	add	r7, sp, #0
	TIM2->CCR2 = (My_Automat.light_Intensity / 100.00) * 4095;
 8002204:	4b12      	ldr	r3, [pc, #72]	@ (8002250 <turn_On_Automat_Light+0x50>)
 8002206:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800220a:	4618      	mov	r0, r3
 800220c:	f7fe f98a 	bl	8000524 <__aeabi_i2d>
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	4b0f      	ldr	r3, [pc, #60]	@ (8002254 <turn_On_Automat_Light+0x54>)
 8002216:	f7fe fb19 	bl	800084c <__aeabi_ddiv>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	4610      	mov	r0, r2
 8002220:	4619      	mov	r1, r3
 8002222:	a309      	add	r3, pc, #36	@ (adr r3, 8002248 <turn_On_Automat_Light+0x48>)
 8002224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002228:	f7fe f9e6 	bl	80005f8 <__aeabi_dmul>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 8002234:	4610      	mov	r0, r2
 8002236:	4619      	mov	r1, r3
 8002238:	f7fe fc78 	bl	8000b2c <__aeabi_d2uiz>
 800223c:	4603      	mov	r3, r0
 800223e:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 8002240:	bf00      	nop
 8002242:	bd98      	pop	{r3, r4, r7, pc}
 8002244:	f3af 8000 	nop.w
 8002248:	00000000 	.word	0x00000000
 800224c:	40affe00 	.word	0x40affe00
 8002250:	200000dc 	.word	0x200000dc
 8002254:	40590000 	.word	0x40590000

08002258 <process_Transmited_Data>:

void process_Transmited_Data()
{
 8002258:	b590      	push	{r4, r7, lr}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
	if(door_flag_up)
 800225e:	4b78      	ldr	r3, [pc, #480]	@ (8002440 <process_Transmited_Data+0x1e8>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d053      	beq.n	800230e <process_Transmited_Data+0xb6>
	{
		if(My_Automat.door_opened)
 8002266:	4b77      	ldr	r3, [pc, #476]	@ (8002444 <process_Transmited_Data+0x1ec>)
 8002268:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800226c:	2b00      	cmp	r3, #0
 800226e:	d031      	beq.n	80022d4 <process_Transmited_Data+0x7c>
		{
			if(close_Door(&My_Automat))
 8002270:	4874      	ldr	r0, [pc, #464]	@ (8002444 <process_Transmited_Data+0x1ec>)
 8002272:	f7fe fe92 	bl	8000f9a <close_Door>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d048      	beq.n	800230e <process_Transmited_Data+0xb6>
			{
				if(My_Automat.turned_on)
 800227c:	4b71      	ldr	r3, [pc, #452]	@ (8002444 <process_Transmited_Data+0x1ec>)
 800227e:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 8002282:	2b00      	cmp	r3, #0
 8002284:	d01c      	beq.n	80022c0 <process_Transmited_Data+0x68>
				{
					lcd_print_current_product(My_Automat.products[My_Automat.selected_Product]);
 8002286:	4b6f      	ldr	r3, [pc, #444]	@ (8002444 <process_Transmited_Data+0x1ec>)
 8002288:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800228c:	4619      	mov	r1, r3
 800228e:	4a6d      	ldr	r2, [pc, #436]	@ (8002444 <process_Transmited_Data+0x1ec>)
 8002290:	460b      	mov	r3, r1
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	1a5b      	subs	r3, r3, r1
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	4413      	add	r3, r2
 800229a:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800229e:	4610      	mov	r0, r2
 80022a0:	f8d3 2005 	ldr.w	r2, [r3, #5]
 80022a4:	4611      	mov	r1, r2
 80022a6:	f8d3 2009 	ldr.w	r2, [r3, #9]
 80022aa:	4614      	mov	r4, r2
 80022ac:	7b5a      	ldrb	r2, [r3, #13]
 80022ae:	7b9b      	ldrb	r3, [r3, #14]
 80022b0:	021b      	lsls	r3, r3, #8
 80022b2:	431a      	orrs	r2, r3
 80022b4:	2300      	movs	r3, #0
 80022b6:	f362 030f 	bfi	r3, r2, #0, #16
 80022ba:	4622      	mov	r2, r4
 80022bc:	f7ff f9de 	bl	800167c <lcd_print_current_product>
				}
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 80022c0:	2200      	movs	r2, #0
 80022c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022c6:	4860      	ldr	r0, [pc, #384]	@ (8002448 <process_Transmited_Data+0x1f0>)
 80022c8:	f001 fff0 	bl	80042ac <HAL_GPIO_WritePin>
				door_flag_up = false;
 80022cc:	4b5c      	ldr	r3, [pc, #368]	@ (8002440 <process_Transmited_Data+0x1e8>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]
 80022d2:	e01c      	b.n	800230e <process_Transmited_Data+0xb6>
			}
		}
		else
		{
			if(open_Door(&My_Automat))
 80022d4:	485b      	ldr	r0, [pc, #364]	@ (8002444 <process_Transmited_Data+0x1ec>)
 80022d6:	f7fe fe43 	bl	8000f60 <open_Door>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d016      	beq.n	800230e <process_Transmited_Data+0xb6>
			{
				if(My_Automat.turned_on)
 80022e0:	4b58      	ldr	r3, [pc, #352]	@ (8002444 <process_Transmited_Data+0x1ec>)
 80022e2:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d007      	beq.n	80022fa <process_Transmited_Data+0xa2>
				{
					lcd_print_maintance();
 80022ea:	f7ff f9fb 	bl	80016e4 <lcd_print_maintance>
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80022ee:	2201      	movs	r2, #1
 80022f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022f4:	4854      	ldr	r0, [pc, #336]	@ (8002448 <process_Transmited_Data+0x1f0>)
 80022f6:	f001 ffd9 	bl	80042ac <HAL_GPIO_WritePin>
				}
				door_flag_up = false;
 80022fa:	4b51      	ldr	r3, [pc, #324]	@ (8002440 <process_Transmited_Data+0x1e8>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]

				if(My_Automat.turned_on)
 8002300:	4b50      	ldr	r3, [pc, #320]	@ (8002444 <process_Transmited_Data+0x1ec>)
 8002302:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <process_Transmited_Data+0xb6>
				{
					start_ADC();
 800230a:	f7ff ff01 	bl	8002110 <start_ADC>
				}
			}
		}
	}
	if(power_flag_up)
 800230e:	4b4f      	ldr	r3, [pc, #316]	@ (800244c <process_Transmited_Data+0x1f4>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d03d      	beq.n	8002392 <process_Transmited_Data+0x13a>
	{
		if(My_Automat.turned_on)
 8002316:	4b4b      	ldr	r3, [pc, #300]	@ (8002444 <process_Transmited_Data+0x1ec>)
 8002318:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00b      	beq.n	8002338 <process_Transmited_Data+0xe0>
		{
			turn_Off(&My_Automat);
 8002320:	4848      	ldr	r0, [pc, #288]	@ (8002444 <process_Transmited_Data+0x1ec>)
 8002322:	f7fe ffc3 	bl	80012ac <turn_Off>
			lcd_clear();
 8002326:	f7ff f901 	bl	800152c <lcd_clear>
			automat_Capacity_Lights_Control_Stop();
 800232a:	f7ff fed9 	bl	80020e0 <automat_Capacity_Lights_Control_Stop>
			turn_Off_Automat_Light();
 800232e:	f7ff ff57 	bl	80021e0 <turn_Off_Automat_Light>
			disable_All_Outputs();
 8002332:	f7ff fa5b 	bl	80017ec <disable_All_Outputs>
 8002336:	e029      	b.n	800238c <process_Transmited_Data+0x134>
		}
		else
		{
			turn_On(&My_Automat);
 8002338:	4842      	ldr	r0, [pc, #264]	@ (8002444 <process_Transmited_Data+0x1ec>)
 800233a:	f7fe ffca 	bl	80012d2 <turn_On>
			automat_Capacity_Lights_Control_Start();
 800233e:	f7ff fe7b 	bl	8002038 <automat_Capacity_Lights_Control_Start>
			lcd_print_current_product(My_Automat.products[My_Automat.selected_Product]);
 8002342:	4b40      	ldr	r3, [pc, #256]	@ (8002444 <process_Transmited_Data+0x1ec>)
 8002344:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002348:	4619      	mov	r1, r3
 800234a:	4a3e      	ldr	r2, [pc, #248]	@ (8002444 <process_Transmited_Data+0x1ec>)
 800234c:	460b      	mov	r3, r1
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	1a5b      	subs	r3, r3, r1
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	4413      	add	r3, r2
 8002356:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800235a:	4610      	mov	r0, r2
 800235c:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8002360:	4611      	mov	r1, r2
 8002362:	f8d3 2009 	ldr.w	r2, [r3, #9]
 8002366:	4614      	mov	r4, r2
 8002368:	7b5a      	ldrb	r2, [r3, #13]
 800236a:	7b9b      	ldrb	r3, [r3, #14]
 800236c:	021b      	lsls	r3, r3, #8
 800236e:	431a      	orrs	r2, r3
 8002370:	2300      	movs	r3, #0
 8002372:	f362 030f 	bfi	r3, r2, #0, #16
 8002376:	4622      	mov	r2, r4
 8002378:	f7ff f980 	bl	800167c <lcd_print_current_product>
			My_Automat.light_Intensity = DEFAULT_LIGHT_INTENSITY;
 800237c:	4b31      	ldr	r3, [pc, #196]	@ (8002444 <process_Transmited_Data+0x1ec>)
 800237e:	2246      	movs	r2, #70	@ 0x46
 8002380:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
			turn_On_Automat_Light();
 8002384:	f7ff ff3c 	bl	8002200 <turn_On_Automat_Light>
			enable_All_Outputs();
 8002388:	f7ff fa3c 	bl	8001804 <enable_All_Outputs>
		}
		power_flag_up = false;
 800238c:	4b2f      	ldr	r3, [pc, #188]	@ (800244c <process_Transmited_Data+0x1f4>)
 800238e:	2200      	movs	r2, #0
 8002390:	701a      	strb	r2, [r3, #0]
	}
	if(refilled_flag_up)
 8002392:	4b2f      	ldr	r3, [pc, #188]	@ (8002450 <process_Transmited_Data+0x1f8>)
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d03f      	beq.n	800241a <process_Transmited_Data+0x1c2>
	{
		refill(&My_Automat);
 800239a:	482a      	ldr	r0, [pc, #168]	@ (8002444 <process_Transmited_Data+0x1ec>)
 800239c:	f7fe fe2a 	bl	8000ff4 <refill>
		refilled_flag_up = false;
 80023a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002450 <process_Transmited_Data+0x1f8>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]
		lcd_print_current_product(My_Automat.products[My_Automat.selected_Product]);
 80023a6:	4b27      	ldr	r3, [pc, #156]	@ (8002444 <process_Transmited_Data+0x1ec>)
 80023a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80023ac:	4619      	mov	r1, r3
 80023ae:	4a25      	ldr	r2, [pc, #148]	@ (8002444 <process_Transmited_Data+0x1ec>)
 80023b0:	460b      	mov	r3, r1
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	1a5b      	subs	r3, r3, r1
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	4413      	add	r3, r2
 80023ba:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80023be:	4610      	mov	r0, r2
 80023c0:	f8d3 2005 	ldr.w	r2, [r3, #5]
 80023c4:	4611      	mov	r1, r2
 80023c6:	f8d3 2009 	ldr.w	r2, [r3, #9]
 80023ca:	4614      	mov	r4, r2
 80023cc:	7b5a      	ldrb	r2, [r3, #13]
 80023ce:	7b9b      	ldrb	r3, [r3, #14]
 80023d0:	021b      	lsls	r3, r3, #8
 80023d2:	431a      	orrs	r2, r3
 80023d4:	2300      	movs	r3, #0
 80023d6:	f362 030f 	bfi	r3, r2, #0, #16
 80023da:	4622      	mov	r2, r4
 80023dc:	f7ff f94e 	bl	800167c <lcd_print_current_product>
		for(int i = 0; i < NUMBER_OF_PRODUCTS; ++i)
 80023e0:	2300      	movs	r3, #0
 80023e2:	607b      	str	r3, [r7, #4]
 80023e4:	e016      	b.n	8002414 <process_Transmited_Data+0x1bc>
		{
			set_Duty_Cycle(&hi2c1, 100, 2 * i, 0);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	2300      	movs	r3, #0
 80023f0:	2164      	movs	r1, #100	@ 0x64
 80023f2:	4818      	ldr	r0, [pc, #96]	@ (8002454 <process_Transmited_Data+0x1fc>)
 80023f4:	f7ff fa14 	bl	8001820 <set_Duty_Cycle>
			set_Duty_Cycle(&hi2c1, 0, 2 * i + 1, 0);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	3301      	adds	r3, #1
 8002402:	b2da      	uxtb	r2, r3
 8002404:	2300      	movs	r3, #0
 8002406:	2100      	movs	r1, #0
 8002408:	4812      	ldr	r0, [pc, #72]	@ (8002454 <process_Transmited_Data+0x1fc>)
 800240a:	f7ff fa09 	bl	8001820 <set_Duty_Cycle>
		for(int i = 0; i < NUMBER_OF_PRODUCTS; ++i)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	3301      	adds	r3, #1
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b05      	cmp	r3, #5
 8002418:	dde5      	ble.n	80023e6 <process_Transmited_Data+0x18e>
		}
	}
	if(ideal_temperature_flag_up)
 800241a:	4b0f      	ldr	r3, [pc, #60]	@ (8002458 <process_Transmited_Data+0x200>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d009      	beq.n	8002436 <process_Transmited_Data+0x1de>
	{
		update_Wanted_Temperature(&My_Automat, ideal_temperature);
 8002422:	4b0e      	ldr	r3, [pc, #56]	@ (800245c <process_Transmited_Data+0x204>)
 8002424:	f993 3000 	ldrsb.w	r3, [r3]
 8002428:	4619      	mov	r1, r3
 800242a:	4806      	ldr	r0, [pc, #24]	@ (8002444 <process_Transmited_Data+0x1ec>)
 800242c:	f7fe ffbc 	bl	80013a8 <update_Wanted_Temperature>
		ideal_temperature_flag_up = false;
 8002430:	4b09      	ldr	r3, [pc, #36]	@ (8002458 <process_Transmited_Data+0x200>)
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]
	}
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	bd90      	pop	{r4, r7, pc}
 800243e:	bf00      	nop
 8002440:	20000275 	.word	0x20000275
 8002444:	200000dc 	.word	0x200000dc
 8002448:	40020c00 	.word	0x40020c00
 800244c:	20000274 	.word	0x20000274
 8002450:	20000276 	.word	0x20000276
 8002454:	20000190 	.word	0x20000190
 8002458:	20000277 	.word	0x20000277
 800245c:	20000278 	.word	0x20000278

08002460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002460:	b5b0      	push	{r4, r5, r7, lr}
 8002462:	b09a      	sub	sp, #104	@ 0x68
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8002466:	f000 ff33 	bl	80032d0 <HAL_Init>
=======
 800099e:	f000 fcd1 	bl	8001344 <HAL_Init>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 800246a:	f000 f9b9 	bl	80027e0 <SystemClock_Config>
=======
 80009a2:	f000 f96d 	bl	8000c80 <SystemClock_Config>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 800246e:	f000 fb39 	bl	8002ae4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002472:	f000 fb0d 	bl	8002a90 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8002476:	f000 fa8f 	bl	8002998 <MX_TIM2_Init>
  MX_ADC1_Init();
 800247a:	f000 fa0d 	bl	8002898 <MX_ADC1_Init>
  MX_I2C1_Init();
 800247e:	f000 fa5d 	bl	800293c <MX_I2C1_Init>
=======
 80009a6:	f000 fa43 	bl	8000e30 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80009aa:	f000 fa17 	bl	8000ddc <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80009ae:	f000 f9c3 	bl	8000d38 <MX_TIM2_Init>

>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
<<<<<<< HEAD
=======
	HAL_TIM_Base_Start(&htim2);
 80009b2:	48b0      	ldr	r0, [pc, #704]	@ (8000c74 <main+0x2dc>)
 80009b4:	f001 fd4e 	bl	8002454 <HAL_TIM_Base_Start>
	int uart_buf_len;
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

	HAL_TIM_Base_Start(&htim2);
 8002482:	48c9      	ldr	r0, [pc, #804]	@ (80027a8 <main+0x348>)
 8002484:	f003 f886 	bl	8005594 <HAL_TIM_Base_Start>

    init_Automat(&My_Automat);
<<<<<<< HEAD
 8002488:	48c8      	ldr	r0, [pc, #800]	@ (80027ac <main+0x34c>)
 800248a:	f7fe fd07 	bl	8000e9c <init_Automat>

    init_PWM_LED_Controller_Channels(&hi2c1);
 800248e:	48c8      	ldr	r0, [pc, #800]	@ (80027b0 <main+0x350>)
 8002490:	f7ff f95c 	bl	800174c <init_PWM_LED_Controller_Channels>

    HAL_UART_Receive_IT(&huart3, received_data, 2);
 8002494:	2202      	movs	r2, #2
 8002496:	49c7      	ldr	r1, [pc, #796]	@ (80027b4 <main+0x354>)
 8002498:	48c7      	ldr	r0, [pc, #796]	@ (80027b8 <main+0x358>)
 800249a:	f004 f9ec 	bl	8006876 <HAL_UART_Receive_IT>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800249e:	2104      	movs	r1, #4
 80024a0:	48c1      	ldr	r0, [pc, #772]	@ (80027a8 <main+0x348>)
 80024a2:	f003 f939 	bl	8005718 <HAL_TIM_PWM_Start>

    lcd_init();
 80024a6:	f7ff f86b 	bl	8001580 <lcd_init>
    lcd_clear();
 80024aa:	f7ff f83f 	bl	800152c <lcd_clear>
    lcd_print_current_product(My_Automat.products[My_Automat.selected_Product]);
 80024ae:	4bbf      	ldr	r3, [pc, #764]	@ (80027ac <main+0x34c>)
 80024b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80024b4:	4619      	mov	r1, r3
 80024b6:	4abd      	ldr	r2, [pc, #756]	@ (80027ac <main+0x34c>)
 80024b8:	460b      	mov	r3, r1
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	1a5b      	subs	r3, r3, r1
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	4413      	add	r3, r2
 80024c2:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80024c6:	4610      	mov	r0, r2
 80024c8:	f8d3 2005 	ldr.w	r2, [r3, #5]
 80024cc:	4611      	mov	r1, r2
 80024ce:	f8d3 2009 	ldr.w	r2, [r3, #9]
 80024d2:	4614      	mov	r4, r2
 80024d4:	7b5a      	ldrb	r2, [r3, #13]
 80024d6:	7b9b      	ldrb	r3, [r3, #14]
 80024d8:	021b      	lsls	r3, r3, #8
 80024da:	431a      	orrs	r2, r3
 80024dc:	2300      	movs	r3, #0
 80024de:	f362 030f 	bfi	r3, r2, #0, #16
 80024e2:	4622      	mov	r2, r4
 80024e4:	f7ff f8ca 	bl	800167c <lcd_print_current_product>
    automat_Capacity_Lights_Control_Start();
 80024e8:	f7ff fda6 	bl	8002038 <automat_Capacity_Lights_Control_Start>
    turn_On_Automat_Light();
 80024ec:	f7ff fe88 	bl	8002200 <turn_On_Automat_Light>

	while (1)
	{
        if(received_data_read_flag)
 80024f0:	4bb2      	ldr	r3, [pc, #712]	@ (80027bc <main+0x35c>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d004      	beq.n	8002502 <main+0xa2>
        {
        	process_Transmited_Data();
 80024f8:	f7ff feae 	bl	8002258 <process_Transmited_Data>
        	received_data_read_flag = false;
 80024fc:	4baf      	ldr	r3, [pc, #700]	@ (80027bc <main+0x35c>)
 80024fe:	2200      	movs	r2, #0
 8002500:	701a      	strb	r2, [r3, #0]
        }

        if(left_button_flag_up)
 8002502:	4baf      	ldr	r3, [pc, #700]	@ (80027c0 <main+0x360>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d025      	beq.n	8002556 <main+0xf6>
        {
        	change_Selection(&My_Automat, -1);
 800250a:	f04f 31ff 	mov.w	r1, #4294967295
 800250e:	48a7      	ldr	r0, [pc, #668]	@ (80027ac <main+0x34c>)
 8002510:	f7fe fdaa 	bl	8001068 <change_Selection>
            lcd_print_current_product(My_Automat.products[My_Automat.selected_Product]);
 8002514:	4ba5      	ldr	r3, [pc, #660]	@ (80027ac <main+0x34c>)
 8002516:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800251a:	4619      	mov	r1, r3
 800251c:	4aa3      	ldr	r2, [pc, #652]	@ (80027ac <main+0x34c>)
 800251e:	460b      	mov	r3, r1
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	1a5b      	subs	r3, r3, r1
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	4413      	add	r3, r2
 8002528:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800252c:	4610      	mov	r0, r2
 800252e:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8002532:	4611      	mov	r1, r2
 8002534:	f8d3 2009 	ldr.w	r2, [r3, #9]
 8002538:	4614      	mov	r4, r2
 800253a:	7b5a      	ldrb	r2, [r3, #13]
 800253c:	7b9b      	ldrb	r3, [r3, #14]
 800253e:	021b      	lsls	r3, r3, #8
 8002540:	431a      	orrs	r2, r3
 8002542:	2300      	movs	r3, #0
 8002544:	f362 030f 	bfi	r3, r2, #0, #16
 8002548:	4622      	mov	r2, r4
 800254a:	f7ff f897 	bl	800167c <lcd_print_current_product>
        	left_button_flag_up = false;
 800254e:	4b9c      	ldr	r3, [pc, #624]	@ (80027c0 <main+0x360>)
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]
 8002554:	e0af      	b.n	80026b6 <main+0x256>
        }
        else if(right_button_flag_up)
 8002556:	4b9b      	ldr	r3, [pc, #620]	@ (80027c4 <main+0x364>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d024      	beq.n	80025a8 <main+0x148>
        {
        	change_Selection(&My_Automat, 1);
 800255e:	2101      	movs	r1, #1
 8002560:	4892      	ldr	r0, [pc, #584]	@ (80027ac <main+0x34c>)
 8002562:	f7fe fd81 	bl	8001068 <change_Selection>
            lcd_print_current_product(My_Automat.products[My_Automat.selected_Product]);
 8002566:	4b91      	ldr	r3, [pc, #580]	@ (80027ac <main+0x34c>)
 8002568:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800256c:	4619      	mov	r1, r3
 800256e:	4a8f      	ldr	r2, [pc, #572]	@ (80027ac <main+0x34c>)
 8002570:	460b      	mov	r3, r1
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	1a5b      	subs	r3, r3, r1
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	4413      	add	r3, r2
 800257a:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800257e:	4610      	mov	r0, r2
 8002580:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8002584:	4611      	mov	r1, r2
 8002586:	f8d3 2009 	ldr.w	r2, [r3, #9]
 800258a:	4614      	mov	r4, r2
 800258c:	7b5a      	ldrb	r2, [r3, #13]
 800258e:	7b9b      	ldrb	r3, [r3, #14]
 8002590:	021b      	lsls	r3, r3, #8
 8002592:	431a      	orrs	r2, r3
 8002594:	2300      	movs	r3, #0
 8002596:	f362 030f 	bfi	r3, r2, #0, #16
 800259a:	4622      	mov	r2, r4
 800259c:	f7ff f86e 	bl	800167c <lcd_print_current_product>
        	right_button_flag_up = false;
 80025a0:	4b88      	ldr	r3, [pc, #544]	@ (80027c4 <main+0x364>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
 80025a6:	e086      	b.n	80026b6 <main+0x256>
        }
        else if(middle_button_flag_up)
 80025a8:	4b87      	ldr	r3, [pc, #540]	@ (80027c8 <main+0x368>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 8082 	beq.w	80026b6 <main+0x256>
        {
        	 if(buy_Product(&My_Automat) == true)
 80025b2:	487e      	ldr	r0, [pc, #504]	@ (80027ac <main+0x34c>)
 80025b4:	f7fe fe0e 	bl	80011d4 <buy_Product>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d050      	beq.n	8002660 <main+0x200>
        	 {
            	 lcd_print_buying_product();
 80025be:	f7ff f8a9 	bl	8001714 <lcd_print_buying_product>
            	 lcd_print_current_product(My_Automat.products[My_Automat.selected_Product]);
 80025c2:	4b7a      	ldr	r3, [pc, #488]	@ (80027ac <main+0x34c>)
 80025c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80025c8:	4619      	mov	r1, r3
 80025ca:	4a78      	ldr	r2, [pc, #480]	@ (80027ac <main+0x34c>)
 80025cc:	460b      	mov	r3, r1
 80025ce:	00db      	lsls	r3, r3, #3
 80025d0:	1a5b      	subs	r3, r3, r1
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	4413      	add	r3, r2
 80025d6:	f8d3 2001 	ldr.w	r2, [r3, #1]
 80025da:	4610      	mov	r0, r2
 80025dc:	f8d3 2005 	ldr.w	r2, [r3, #5]
 80025e0:	4611      	mov	r1, r2
 80025e2:	f8d3 2009 	ldr.w	r2, [r3, #9]
 80025e6:	4614      	mov	r4, r2
 80025e8:	7b5a      	ldrb	r2, [r3, #13]
 80025ea:	7b9b      	ldrb	r3, [r3, #14]
 80025ec:	021b      	lsls	r3, r3, #8
 80025ee:	431a      	orrs	r2, r3
 80025f0:	2300      	movs	r3, #0
 80025f2:	f362 030f 	bfi	r3, r2, #0, #16
 80025f6:	4622      	mov	r2, r4
 80025f8:	f7ff f840 	bl	800167c <lcd_print_current_product>
            	 automat_Capacity_Lights_Control_Start();
 80025fc:	f7ff fd1c 	bl	8002038 <automat_Capacity_Lights_Control_Start>

            	 if(My_Automat.products[My_Automat.selected_Product].capacity >= 0)
            	 {
            		 set_Duty_Cycle(&hi2c1, My_Automat.products[My_Automat.selected_Product].capacity, 2 * My_Automat.selected_Product , 0);
 8002600:	4b6a      	ldr	r3, [pc, #424]	@ (80027ac <main+0x34c>)
 8002602:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002606:	4619      	mov	r1, r3
 8002608:	4a68      	ldr	r2, [pc, #416]	@ (80027ac <main+0x34c>)
 800260a:	460b      	mov	r3, r1
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	1a5b      	subs	r3, r3, r1
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4413      	add	r3, r2
 8002614:	330e      	adds	r3, #14
 8002616:	7819      	ldrb	r1, [r3, #0]
 8002618:	4b64      	ldr	r3, [pc, #400]	@ (80027ac <main+0x34c>)
 800261a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	b2da      	uxtb	r2, r3
 8002622:	2300      	movs	r3, #0
 8002624:	4862      	ldr	r0, [pc, #392]	@ (80027b0 <main+0x350>)
 8002626:	f7ff f8fb 	bl	8001820 <set_Duty_Cycle>
            	 }

            	 if(My_Automat.products[My_Automat.selected_Product].capacity == 0)
 800262a:	4b60      	ldr	r3, [pc, #384]	@ (80027ac <main+0x34c>)
 800262c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002630:	4619      	mov	r1, r3
 8002632:	4a5e      	ldr	r2, [pc, #376]	@ (80027ac <main+0x34c>)
 8002634:	460b      	mov	r3, r1
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	1a5b      	subs	r3, r3, r1
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4413      	add	r3, r2
 800263e:	330e      	adds	r3, #14
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d134      	bne.n	80026b0 <main+0x250>
            	 {
            		 set_Duty_Cycle(&hi2c1, 100, 2 * My_Automat.selected_Product + 1 , 0);
 8002646:	4b59      	ldr	r3, [pc, #356]	@ (80027ac <main+0x34c>)
 8002648:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	b2db      	uxtb	r3, r3
 8002650:	3301      	adds	r3, #1
 8002652:	b2da      	uxtb	r2, r3
 8002654:	2300      	movs	r3, #0
 8002656:	2164      	movs	r1, #100	@ 0x64
 8002658:	4855      	ldr	r0, [pc, #340]	@ (80027b0 <main+0x350>)
 800265a:	f7ff f8e1 	bl	8001820 <set_Duty_Cycle>
 800265e:	e027      	b.n	80026b0 <main+0x250>
            	 }
        	 }
        	 else
        	 {
        		 if(My_Automat.turned_on)
 8002660:	4b52      	ldr	r3, [pc, #328]	@ (80027ac <main+0x34c>)
 8002662:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 8002666:	2b00      	cmp	r3, #0
 8002668:	d022      	beq.n	80026b0 <main+0x250>
        		 {
            		 lcd_print_empty_slot();
 800266a:	f7fe ffeb 	bl	8001644 <lcd_print_empty_slot>
            		 HAL_Delay(2500);
 800266e:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8002672:	f000 fe9f 	bl	80033b4 <HAL_Delay>
            		 lcd_print_current_product(My_Automat.products[My_Automat.selected_Product]);
 8002676:	4b4d      	ldr	r3, [pc, #308]	@ (80027ac <main+0x34c>)
 8002678:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800267c:	4619      	mov	r1, r3
 800267e:	4a4b      	ldr	r2, [pc, #300]	@ (80027ac <main+0x34c>)
 8002680:	460b      	mov	r3, r1
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	1a5b      	subs	r3, r3, r1
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4413      	add	r3, r2
 800268a:	f8d3 2001 	ldr.w	r2, [r3, #1]
 800268e:	4610      	mov	r0, r2
 8002690:	f8d3 2005 	ldr.w	r2, [r3, #5]
 8002694:	4611      	mov	r1, r2
 8002696:	f8d3 2009 	ldr.w	r2, [r3, #9]
 800269a:	4614      	mov	r4, r2
 800269c:	7b5a      	ldrb	r2, [r3, #13]
 800269e:	7b9b      	ldrb	r3, [r3, #14]
 80026a0:	021b      	lsls	r3, r3, #8
 80026a2:	431a      	orrs	r2, r3
 80026a4:	2300      	movs	r3, #0
 80026a6:	f362 030f 	bfi	r3, r2, #0, #16
 80026aa:	4622      	mov	r2, r4
 80026ac:	f7fe ffe6 	bl	800167c <lcd_print_current_product>
        		 }
        	 }
        	 middle_button_flag_up = false;
 80026b0:	4b45      	ldr	r3, [pc, #276]	@ (80027c8 <main+0x368>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	701a      	strb	r2, [r3, #0]
        }

        if(communication_established_flag_up)
 80026b6:	4b45      	ldr	r3, [pc, #276]	@ (80027cc <main+0x36c>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f43f af18 	beq.w	80024f0 <main+0x90>
        {
        	HAL_Delay(100);
 80026c0:	2064      	movs	r0, #100	@ 0x64
 80026c2:	f000 fe77 	bl	80033b4 <HAL_Delay>

        	++counter;
 80026c6:	4b42      	ldr	r3, [pc, #264]	@ (80027d0 <main+0x370>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	3301      	adds	r3, #1
 80026cc:	4a40      	ldr	r2, [pc, #256]	@ (80027d0 <main+0x370>)
 80026ce:	6013      	str	r3, [r2, #0]
        	if(counter % 15 == 0)
 80026d0:	4b3f      	ldr	r3, [pc, #252]	@ (80027d0 <main+0x370>)
 80026d2:	6819      	ldr	r1, [r3, #0]
 80026d4:	4b3f      	ldr	r3, [pc, #252]	@ (80027d4 <main+0x374>)
 80026d6:	fba3 2301 	umull	r2, r3, r3, r1
 80026da:	08da      	lsrs	r2, r3, #3
 80026dc:	4613      	mov	r3, r2
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	1aca      	subs	r2, r1, r3
 80026e4:	2a00      	cmp	r2, #0
 80026e6:	d149      	bne.n	800277c <main+0x31c>
    		{
        		read_Temperature_and_Humidity();
 80026e8:	f7ff fc7a 	bl	8001fe0 <read_Temperature_and_Humidity>
        		update_Temperature_and_Humidity(&My_Automat, current_Temp, current_Hum);
 80026ec:	4b3a      	ldr	r3, [pc, #232]	@ (80027d8 <main+0x378>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	b25b      	sxtb	r3, r3
 80026f2:	4a3a      	ldr	r2, [pc, #232]	@ (80027dc <main+0x37c>)
 80026f4:	7812      	ldrb	r2, [r2, #0]
 80026f6:	4619      	mov	r1, r3
 80026f8:	482c      	ldr	r0, [pc, #176]	@ (80027ac <main+0x34c>)
 80026fa:	f7fe fe00 	bl	80012fe <update_Temperature_and_Humidity>
        		if(My_Automat.current_Temperature > 1.1 * My_Automat.wanted_Temperature || My_Automat.current_Temperature < 0.9 * My_Automat.wanted_Temperature)
 80026fe:	4b2b      	ldr	r3, [pc, #172]	@ (80027ac <main+0x34c>)
 8002700:	f993 3059 	ldrsb.w	r3, [r3, #89]	@ 0x59
 8002704:	4618      	mov	r0, r3
 8002706:	f7fd ff0d 	bl	8000524 <__aeabi_i2d>
 800270a:	4604      	mov	r4, r0
 800270c:	460d      	mov	r5, r1
 800270e:	4b27      	ldr	r3, [pc, #156]	@ (80027ac <main+0x34c>)
 8002710:	f993 305b 	ldrsb.w	r3, [r3, #91]	@ 0x5b
 8002714:	4618      	mov	r0, r3
 8002716:	f7fd ff05 	bl	8000524 <__aeabi_i2d>
 800271a:	a31f      	add	r3, pc, #124	@ (adr r3, 8002798 <main+0x338>)
 800271c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002720:	f7fd ff6a 	bl	80005f8 <__aeabi_dmul>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4620      	mov	r0, r4
 800272a:	4629      	mov	r1, r5
 800272c:	f7fe f9f4 	bl	8000b18 <__aeabi_dcmpgt>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d11b      	bne.n	800276e <main+0x30e>
 8002736:	4b1d      	ldr	r3, [pc, #116]	@ (80027ac <main+0x34c>)
 8002738:	f993 3059 	ldrsb.w	r3, [r3, #89]	@ 0x59
 800273c:	4618      	mov	r0, r3
 800273e:	f7fd fef1 	bl	8000524 <__aeabi_i2d>
 8002742:	4604      	mov	r4, r0
 8002744:	460d      	mov	r5, r1
 8002746:	4b19      	ldr	r3, [pc, #100]	@ (80027ac <main+0x34c>)
 8002748:	f993 305b 	ldrsb.w	r3, [r3, #91]	@ 0x5b
 800274c:	4618      	mov	r0, r3
 800274e:	f7fd fee9 	bl	8000524 <__aeabi_i2d>
 8002752:	a313      	add	r3, pc, #76	@ (adr r3, 80027a0 <main+0x340>)
 8002754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002758:	f7fd ff4e 	bl	80005f8 <__aeabi_dmul>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	4620      	mov	r0, r4
 8002762:	4629      	mov	r1, r5
 8002764:	f7fe f9ba 	bl	8000adc <__aeabi_dcmplt>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <main+0x316>
        		{
        			start_AC(&hi2c1);
 800276e:	4810      	ldr	r0, [pc, #64]	@ (80027b0 <main+0x350>)
 8002770:	f7ff f984 	bl	8001a7c <start_AC>
 8002774:	e002      	b.n	800277c <main+0x31c>
        		}
        		else
        		{
        			stop_AC(&hi2c1);
 8002776:	480e      	ldr	r0, [pc, #56]	@ (80027b0 <main+0x350>)
 8002778:	f7ff f98e 	bl	8001a98 <stop_AC>
        		}
    		}

            uint8_t serialized_Automat[99];
            serialize_Automat(serialized_Automat, sizeof(serialized_Automat));
 800277c:	1d3b      	adds	r3, r7, #4
 800277e:	2163      	movs	r1, #99	@ 0x63
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff f997 	bl	8001ab4 <serialize_Automat>
            send_Serialized_Automat(serialized_Automat, sizeof(serialized_Automat));
 8002786:	1d3b      	adds	r3, r7, #4
 8002788:	2163      	movs	r1, #99	@ 0x63
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff faa6 	bl	8001cdc <send_Serialized_Automat>
        if(received_data_read_flag)
 8002790:	e6ae      	b.n	80024f0 <main+0x90>
 8002792:	bf00      	nop
 8002794:	f3af 8000 	nop.w
 8002798:	9999999a 	.word	0x9999999a
 800279c:	3ff19999 	.word	0x3ff19999
 80027a0:	cccccccd 	.word	0xcccccccd
 80027a4:	3feccccc 	.word	0x3feccccc
 80027a8:	200001e4 	.word	0x200001e4
 80027ac:	200000dc 	.word	0x200000dc
 80027b0:	20000190 	.word	0x20000190
 80027b4:	20000144 	.word	0x20000144
 80027b8:	2000022c 	.word	0x2000022c
 80027bc:	20000279 	.word	0x20000279
 80027c0:	2000027a 	.word	0x2000027a
 80027c4:	2000027b 	.word	0x2000027b
 80027c8:	2000027c 	.word	0x2000027c
 80027cc:	200000d8 	.word	0x200000d8
 80027d0:	20000140 	.word	0x20000140
 80027d4:	88888889 	.word	0x88888889
 80027d8:	200000d9 	.word	0x200000d9
 80027dc:	200000da 	.word	0x200000da

080027e0 <SystemClock_Config>:
=======
 80009b8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff fdf7 	bl	80005b0 <init_Automat>
    HAL_UART_Receive_IT(&huart3, received_data, 2);
 80009c2:	2202      	movs	r2, #2
 80009c4:	49ac      	ldr	r1, [pc, #688]	@ (8000c78 <main+0x2e0>)
 80009c6:	48ad      	ldr	r0, [pc, #692]	@ (8000c7c <main+0x2e4>)
 80009c8:	f002 fafb 	bl	8002fc2 <HAL_UART_Receive_IT>

	while (1)
	{
		//DHT11_SendToPython();
	    for(int i = 0; i <= 5; i++)
 80009cc:	2300      	movs	r3, #0
 80009ce:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80009d2:	e149      	b.n	8000c68 <main+0x2d0>
	    {
	    	HAL_Delay(2000);
 80009d4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009d8:	f000 fd26 	bl	8001428 <HAL_Delay>
	        buy_Product(&My_Automat);
 80009dc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff fef3 	bl	80007cc <buy_Product>
	        change_Selection(&My_Automat, -1);
 80009e6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80009ea:	f04f 31ff 	mov.w	r1, #4294967295
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fe3e 	bl	8000670 <change_Selection>

	        uint8_t serialized_Automat[99];
	        serialized_Automat[0] = My_Automat.products_Number;
 80009f4:	f897 2068 	ldrb.w	r2, [r7, #104]	@ 0x68
 80009f8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80009fc:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000a00:	701a      	strb	r2, [r3, #0]

	        for(int i = 0; i < 6; ++i)
 8000a02:	2300      	movs	r3, #0
 8000a04:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8000a08:	e0a2      	b.n	8000b50 <main+0x1b8>
	    	{
	            uint8_t product_offset =  1 + 14 * i;
 8000a0a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	461a      	mov	r2, r3
 8000a12:	00d2      	lsls	r2, r2, #3
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
	        	serialized_Automat[product_offset] = My_Automat.products[i].slot_ID;
 8000a20:	f897 1153 	ldrb.w	r1, [r7, #339]	@ 0x153
 8000a24:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8000a28:	4613      	mov	r3, r2
 8000a2a:	00db      	lsls	r3, r3, #3
 8000a2c:	1a9b      	subs	r3, r3, r2
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8000a34:	443b      	add	r3, r7
 8000a36:	3bf7      	subs	r3, #247	@ 0xf7
 8000a38:	781a      	ldrb	r2, [r3, #0]
 8000a3a:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000a3e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000a42:	545a      	strb	r2, [r3, r1]
	        	for(int j = 0; j < 10; j++)
 8000a44:	2300      	movs	r3, #0
 8000a46:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8000a4a:	e03c      	b.n	8000ac6 <main+0x12e>
	        	{
	        		if(j < strlen(My_Automat.products[i].name))
 8000a4c:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8000a50:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8000a54:	4613      	mov	r3, r2
 8000a56:	00db      	lsls	r3, r3, #3
 8000a58:	1a9b      	subs	r3, r3, r2
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	440b      	add	r3, r1
 8000a5e:	3302      	adds	r3, #2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fbb5 	bl	80001d0 <strlen>
 8000a66:	4602      	mov	r2, r0
 8000a68:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d919      	bls.n	8000aa4 <main+0x10c>
	        			serialized_Automat[product_offset + 1 + j] = My_Automat.products[i].name[j];
 8000a70:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8000a74:	1c5a      	adds	r2, r3, #1
 8000a76:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000a7a:	18d1      	adds	r1, r2, r3
 8000a7c:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8000a80:	4613      	mov	r3, r2
 8000a82:	00db      	lsls	r3, r3, #3
 8000a84:	1a9b      	subs	r3, r3, r2
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8000a8c:	19da      	adds	r2, r3, r7
 8000a8e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000a92:	4413      	add	r3, r2
 8000a94:	3bf6      	subs	r3, #246	@ 0xf6
 8000a96:	781a      	ldrb	r2, [r3, #0]
 8000a98:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000a9c:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000aa0:	545a      	strb	r2, [r3, r1]
 8000aa2:	e00b      	b.n	8000abc <main+0x124>
	        		else
	        			serialized_Automat[product_offset + 1 + j] = '*';
 8000aa4:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8000aa8:	1c5a      	adds	r2, r3, #1
 8000aaa:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000aae:	4413      	add	r3, r2
 8000ab0:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8000ab4:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8000ab8:	212a      	movs	r1, #42	@ 0x2a
 8000aba:	54d1      	strb	r1, [r2, r3]
	        	for(int j = 0; j < 10; j++)
 8000abc:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8000ac6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000aca:	2b09      	cmp	r3, #9
 8000acc:	ddbe      	ble.n	8000a4c <main+0xb4>
	        	}
	        	serialized_Automat[product_offset + 11] = My_Automat.products[i].price;
 8000ace:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8000ad2:	f103 010b 	add.w	r1, r3, #11
 8000ad6:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8000ada:	4613      	mov	r3, r2
 8000adc:	00db      	lsls	r3, r3, #3
 8000ade:	1a9b      	subs	r3, r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8000ae6:	443b      	add	r3, r7
 8000ae8:	3bec      	subs	r3, #236	@ 0xec
 8000aea:	781a      	ldrb	r2, [r3, #0]
 8000aec:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000af0:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000af4:	545a      	strb	r2, [r3, r1]
	        	serialized_Automat[product_offset + 12] = My_Automat.products[i].quantity;
 8000af6:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8000afa:	f103 010c 	add.w	r1, r3, #12
 8000afe:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8000b02:	4613      	mov	r3, r2
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	1a9b      	subs	r3, r3, r2
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8000b0e:	443b      	add	r3, r7
 8000b10:	3beb      	subs	r3, #235	@ 0xeb
 8000b12:	781a      	ldrb	r2, [r3, #0]
 8000b14:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000b18:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000b1c:	545a      	strb	r2, [r3, r1]
	        	serialized_Automat[product_offset + 13] = My_Automat.products[i].capacity;
 8000b1e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8000b22:	f103 010d 	add.w	r1, r3, #13
 8000b26:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	00db      	lsls	r3, r3, #3
 8000b2e:	1a9b      	subs	r3, r3, r2
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8000b36:	443b      	add	r3, r7
 8000b38:	3bea      	subs	r3, #234	@ 0xea
 8000b3a:	781a      	ldrb	r2, [r3, #0]
 8000b3c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000b40:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000b44:	545a      	strb	r2, [r3, r1]
	        for(int i = 0; i < 6; ++i)
 8000b46:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8000b50:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8000b54:	2b05      	cmp	r3, #5
 8000b56:	f77f af58 	ble.w	8000a0a <main+0x72>
	    	}

	        serialized_Automat[85] = My_Automat.capacity;
 8000b5a:	f897 20bd 	ldrb.w	r2, [r7, #189]	@ 0xbd
 8000b5e:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000b62:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000b66:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
	        serialized_Automat[86] = My_Automat.door_opened;
 8000b6a:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8000b6e:	461a      	mov	r2, r3
 8000b70:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000b74:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000b78:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
	        serialized_Automat[87] = My_Automat.turned_on;
 8000b7c:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8000b80:	461a      	mov	r2, r3
 8000b82:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000b86:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000b8a:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
	        serialized_Automat[88] = My_Automat.stand_by;
 8000b8e:	f897 30c0 	ldrb.w	r3, [r7, #192]	@ 0xc0
 8000b92:	461a      	mov	r2, r3
 8000b94:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000b98:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000b9c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	        serialized_Automat[89] = My_Automat.current_Temperature;
 8000ba0:	f997 30c1 	ldrsb.w	r3, [r7, #193]	@ 0xc1
 8000ba4:	b2da      	uxtb	r2, r3
 8000ba6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000baa:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000bae:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
	        serialized_Automat[90] = My_Automat.current_Humidity;
 8000bb2:	f897 20c2 	ldrb.w	r2, [r7, #194]	@ 0xc2
 8000bb6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000bba:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000bbe:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
	        serialized_Automat[91] = My_Automat.wanted_Temperature;
 8000bc2:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000bcc:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000bd0:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
	        serialized_Automat[92] = My_Automat.light_Intensity;
 8000bd4:	f897 20c4 	ldrb.w	r2, [r7, #196]	@ 0xc4
 8000bd8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000bdc:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000be0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
	        serialized_Automat[93] = My_Automat.selected_Product;
 8000be4:	f897 20c5 	ldrb.w	r2, [r7, #197]	@ 0xc5
 8000be8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000bec:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000bf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
	        serialized_Automat[95] = My_Automat.current_Profit >> 8;
 8000bf4:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	@ 0xc6
 8000bf8:	0a1b      	lsrs	r3, r3, #8
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000c02:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000c06:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
	        serialized_Automat[94] = My_Automat.current_Profit % (2*2*2*2*2*2*2*2);
 8000c0a:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	@ 0xc6
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000c14:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000c18:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
	        serialized_Automat[96] = My_Automat.overheating;
 8000c1c:	f897 30c8 	ldrb.w	r3, [r7, #200]	@ 0xc8
 8000c20:	461a      	mov	r2, r3
 8000c22:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000c26:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000c2a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
	        serialized_Automat[97] = My_Automat.freezing;
 8000c2e:	f897 30c9 	ldrb.w	r3, [r7, #201]	@ 0xc9
 8000c32:	461a      	mov	r2, r3
 8000c34:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000c38:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000c3c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
	        serialized_Automat[98] = My_Automat.temperature_offset_tolerance;
 8000c40:	f897 20ca 	ldrb.w	r2, [r7, #202]	@ 0xca
 8000c44:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8000c48:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8000c4c:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62

			HAL_UART_Transmit(&huart3, (uint8_t*)serialized_Automat, 99, 1000);
 8000c50:	1d39      	adds	r1, r7, #4
 8000c52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c56:	2263      	movs	r2, #99	@ 0x63
 8000c58:	4808      	ldr	r0, [pc, #32]	@ (8000c7c <main+0x2e4>)
 8000c5a:	f002 f927 	bl	8002eac <HAL_UART_Transmit>
	    for(int i = 0; i <= 5; i++)
 8000c5e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000c62:	3301      	adds	r3, #1
 8000c64:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8000c68:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000c6c:	2b05      	cmp	r3, #5
 8000c6e:	f77f aeb1 	ble.w	80009d4 <main+0x3c>
 8000c72:	e6ab      	b.n	80009cc <main+0x34>
 8000c74:	200000b4 	.word	0x200000b4
 8000c78:	200001a8 	.word	0x200001a8
 8000c7c:	200000fc 	.word	0x200000fc

08000c80 <SystemClock_Config>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b094      	sub	sp, #80	@ 0x50
 80027e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80027e6:	f107 0320 	add.w	r3, r7, #32
 80027ea:	2230      	movs	r2, #48	@ 0x30
 80027ec:	2100      	movs	r1, #0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f005 f9e6 	bl	8007bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027f4:	f107 030c 	add.w	r3, r7, #12
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	605a      	str	r2, [r3, #4]
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	60da      	str	r2, [r3, #12]
 8002802:	611a      	str	r2, [r3, #16]
=======
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b094      	sub	sp, #80	@ 0x50
 8000c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c86:	f107 0320 	add.w	r3, r7, #32
 8000c8a:	2230      	movs	r2, #48	@ 0x30
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f003 fb1c 	bl	80042cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c94:	f107 030c 	add.w	r3, r7, #12
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 8002804:	2300      	movs	r3, #0
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	4b21      	ldr	r3, [pc, #132]	@ (8002890 <SystemClock_Config+0xb0>)
 800280a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280c:	4a20      	ldr	r2, [pc, #128]	@ (8002890 <SystemClock_Config+0xb0>)
 800280e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002812:	6413      	str	r3, [r2, #64]	@ 0x40
 8002814:	4b1e      	ldr	r3, [pc, #120]	@ (8002890 <SystemClock_Config+0xb0>)
 8002816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002818:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002820:	2300      	movs	r3, #0
 8002822:	607b      	str	r3, [r7, #4]
 8002824:	4b1b      	ldr	r3, [pc, #108]	@ (8002894 <SystemClock_Config+0xb4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a1a      	ldr	r2, [pc, #104]	@ (8002894 <SystemClock_Config+0xb4>)
 800282a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b18      	ldr	r3, [pc, #96]	@ (8002894 <SystemClock_Config+0xb4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002838:	607b      	str	r3, [r7, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
=======
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	4b21      	ldr	r3, [pc, #132]	@ (8000d30 <SystemClock_Config+0xb0>)
 8000caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cac:	4a20      	ldr	r2, [pc, #128]	@ (8000d30 <SystemClock_Config+0xb0>)
 8000cae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d30 <SystemClock_Config+0xb0>)
 8000cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <SystemClock_Config+0xb4>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a1a      	ldr	r2, [pc, #104]	@ (8000d34 <SystemClock_Config+0xb4>)
 8000cca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cce:	6013      	str	r3, [r2, #0]
 8000cd0:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <SystemClock_Config+0xb4>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cd8:	607b      	str	r3, [r7, #4]
 8000cda:	687b      	ldr	r3, [r7, #4]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
<<<<<<< HEAD
 800283c:	2301      	movs	r3, #1
 800283e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002840:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002844:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002846:	2300      	movs	r3, #0
 8002848:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800284a:	f107 0320 	add.w	r3, r7, #32
 800284e:	4618      	mov	r0, r3
 8002850:	f002 fa08 	bl	8004c64 <HAL_RCC_OscConfig>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800285a:	f000 fa37 	bl	8002ccc <Error_Handler>
=======
 8000cdc:	2301      	movs	r3, #1
 8000cde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ce0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cea:	f107 0320 	add.w	r3, r7, #32
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 ff18 	bl	8001b24 <HAL_RCC_OscConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000cfa:	f000 f933 	bl	8000f64 <Error_Handler>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 800285e:	230f      	movs	r3, #15
 8002860:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002862:	2301      	movs	r3, #1
 8002864:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800286a:	2300      	movs	r3, #0
 800286c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002872:	f107 030c 	add.w	r3, r7, #12
 8002876:	2100      	movs	r1, #0
 8002878:	4618      	mov	r0, r3
 800287a:	f002 fc6b 	bl	8005154 <HAL_RCC_ClockConfig>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002884:	f000 fa22 	bl	8002ccc <Error_Handler>
  }
}
 8002888:	bf00      	nop
 800288a:	3750      	adds	r7, #80	@ 0x50
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40023800 	.word	0x40023800
 8002894:	40007000 	.word	0x40007000

08002898 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800289e:	463b      	mov	r3, r7
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80028aa:	4b21      	ldr	r3, [pc, #132]	@ (8002930 <MX_ADC1_Init+0x98>)
 80028ac:	4a21      	ldr	r2, [pc, #132]	@ (8002934 <MX_ADC1_Init+0x9c>)
 80028ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80028b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002930 <MX_ADC1_Init+0x98>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80028b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002930 <MX_ADC1_Init+0x98>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80028bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002930 <MX_ADC1_Init+0x98>)
 80028be:	2200      	movs	r2, #0
 80028c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80028c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002930 <MX_ADC1_Init+0x98>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80028c8:	4b19      	ldr	r3, [pc, #100]	@ (8002930 <MX_ADC1_Init+0x98>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80028d0:	4b17      	ldr	r3, [pc, #92]	@ (8002930 <MX_ADC1_Init+0x98>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80028d6:	4b16      	ldr	r3, [pc, #88]	@ (8002930 <MX_ADC1_Init+0x98>)
 80028d8:	4a17      	ldr	r2, [pc, #92]	@ (8002938 <MX_ADC1_Init+0xa0>)
 80028da:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80028dc:	4b14      	ldr	r3, [pc, #80]	@ (8002930 <MX_ADC1_Init+0x98>)
 80028de:	2200      	movs	r2, #0
 80028e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80028e2:	4b13      	ldr	r3, [pc, #76]	@ (8002930 <MX_ADC1_Init+0x98>)
 80028e4:	2201      	movs	r2, #1
 80028e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80028e8:	4b11      	ldr	r3, [pc, #68]	@ (8002930 <MX_ADC1_Init+0x98>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002930 <MX_ADC1_Init+0x98>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80028f6:	480e      	ldr	r0, [pc, #56]	@ (8002930 <MX_ADC1_Init+0x98>)
 80028f8:	f000 fd80 	bl	80033fc <HAL_ADC_Init>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002902:	f000 f9e3 	bl	8002ccc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002906:	2303      	movs	r3, #3
 8002908:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800290a:	2301      	movs	r3, #1
 800290c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800290e:	2307      	movs	r3, #7
 8002910:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002912:	463b      	mov	r3, r7
 8002914:	4619      	mov	r1, r3
 8002916:	4806      	ldr	r0, [pc, #24]	@ (8002930 <MX_ADC1_Init+0x98>)
 8002918:	f000 ff52 	bl	80037c0 <HAL_ADC_ConfigChannel>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002922:	f000 f9d3 	bl	8002ccc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002926:	bf00      	nop
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	20000148 	.word	0x20000148
 8002934:	40012000 	.word	0x40012000
 8002938:	0f000001 	.word	0x0f000001

0800293c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002940:	4b13      	ldr	r3, [pc, #76]	@ (8002990 <MX_I2C1_Init+0x54>)
 8002942:	4a14      	ldr	r2, [pc, #80]	@ (8002994 <MX_I2C1_Init+0x58>)
 8002944:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 50000;
 8002946:	4b12      	ldr	r3, [pc, #72]	@ (8002990 <MX_I2C1_Init+0x54>)
 8002948:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800294c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800294e:	4b10      	ldr	r3, [pc, #64]	@ (8002990 <MX_I2C1_Init+0x54>)
 8002950:	2200      	movs	r2, #0
 8002952:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002954:	4b0e      	ldr	r3, [pc, #56]	@ (8002990 <MX_I2C1_Init+0x54>)
 8002956:	2200      	movs	r2, #0
 8002958:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800295a:	4b0d      	ldr	r3, [pc, #52]	@ (8002990 <MX_I2C1_Init+0x54>)
 800295c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002960:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002962:	4b0b      	ldr	r3, [pc, #44]	@ (8002990 <MX_I2C1_Init+0x54>)
 8002964:	2200      	movs	r2, #0
 8002966:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002968:	4b09      	ldr	r3, [pc, #36]	@ (8002990 <MX_I2C1_Init+0x54>)
 800296a:	2200      	movs	r2, #0
 800296c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800296e:	4b08      	ldr	r3, [pc, #32]	@ (8002990 <MX_I2C1_Init+0x54>)
 8002970:	2200      	movs	r2, #0
 8002972:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002974:	4b06      	ldr	r3, [pc, #24]	@ (8002990 <MX_I2C1_Init+0x54>)
 8002976:	2200      	movs	r2, #0
 8002978:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800297a:	4805      	ldr	r0, [pc, #20]	@ (8002990 <MX_I2C1_Init+0x54>)
 800297c:	f001 fcd4 	bl	8004328 <HAL_I2C_Init>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8002986:	f000 f9a1 	bl	8002ccc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000190 	.word	0x20000190
 8002994:	40005400 	.word	0x40005400

08002998 <MX_TIM2_Init>:
=======
 8000cfe:	230f      	movs	r3, #15
 8000d00:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000d02:	2301      	movs	r3, #1
 8000d04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d12:	f107 030c 	add.w	r3, r7, #12
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f001 f97b 	bl	8002014 <HAL_RCC_ClockConfig>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000d24:	f000 f91e 	bl	8000f64 <Error_Handler>
  }
}
 8000d28:	bf00      	nop
 8000d2a:	3750      	adds	r7, #80	@ 0x50
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40007000 	.word	0x40007000

08000d38 <MX_TIM2_Init>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
<<<<<<< HEAD
 8002998:	b580      	push	{r7, lr}
 800299a:	b08e      	sub	sp, #56	@ 0x38
 800299c:	af00      	add	r7, sp, #0
=======
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 800299e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80029a8:	f107 0320 	add.w	r3, r7, #32
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029b6:	1d3b      	adds	r3, r7, #4
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
 80029bc:	605a      	str	r2, [r3, #4]
 80029be:	609a      	str	r2, [r3, #8]
 80029c0:	60da      	str	r2, [r3, #12]
 80029c2:	611a      	str	r2, [r3, #16]
 80029c4:	615a      	str	r2, [r3, #20]
 80029c6:	619a      	str	r2, [r3, #24]
=======
 8000d3e:	f107 0310 	add.w	r3, r7, #16
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d48:	463b      	mov	r3, r7
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]
 8000d52:	60da      	str	r2, [r3, #12]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
<<<<<<< HEAD
 80029c8:	4b30      	ldr	r3, [pc, #192]	@ (8002a8c <MX_TIM2_Init+0xf4>)
 80029ca:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80029ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 80029d0:	4b2e      	ldr	r3, [pc, #184]	@ (8002a8c <MX_TIM2_Init+0xf4>)
 80029d2:	2207      	movs	r2, #7
 80029d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029d6:	4b2d      	ldr	r3, [pc, #180]	@ (8002a8c <MX_TIM2_Init+0xf4>)
 80029d8:	2200      	movs	r2, #0
 80029da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4095;
 80029dc:	4b2b      	ldr	r3, [pc, #172]	@ (8002a8c <MX_TIM2_Init+0xf4>)
 80029de:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80029e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029e4:	4b29      	ldr	r3, [pc, #164]	@ (8002a8c <MX_TIM2_Init+0xf4>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029ea:	4b28      	ldr	r3, [pc, #160]	@ (8002a8c <MX_TIM2_Init+0xf4>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80029f0:	4826      	ldr	r0, [pc, #152]	@ (8002a8c <MX_TIM2_Init+0xf4>)
 80029f2:	f002 ff59 	bl	80058a8 <HAL_TIM_IC_Init>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80029fc:	f000 f966 	bl	8002ccc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a00:	4822      	ldr	r0, [pc, #136]	@ (8002a8c <MX_TIM2_Init+0xf4>)
 8002a02:	f002 fe2f 	bl	8005664 <HAL_TIM_PWM_Init>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002a0c:	f000 f95e 	bl	8002ccc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a10:	2300      	movs	r3, #0
 8002a12:	633b      	str	r3, [r7, #48]	@ 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a14:	2300      	movs	r3, #0
 8002a16:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a18:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	481b      	ldr	r0, [pc, #108]	@ (8002a8c <MX_TIM2_Init+0xf4>)
 8002a20:	f003 fdbe 	bl	80065a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002a2a:	f000 f94f 	bl	8002ccc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002a32:	2301      	movs	r3, #1
 8002a34:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002a36:	2300      	movs	r3, #0
 8002a38:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigIC.ICFilter = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002a3e:	f107 0320 	add.w	r3, r7, #32
 8002a42:	2200      	movs	r2, #0
 8002a44:	4619      	mov	r1, r3
 8002a46:	4811      	ldr	r0, [pc, #68]	@ (8002a8c <MX_TIM2_Init+0xf4>)
 8002a48:	f003 f86d 	bl	8005b26 <HAL_TIM_IC_ConfigChannel>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 8002a52:	f000 f93b 	bl	8002ccc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a56:	2360      	movs	r3, #96	@ 0x60
 8002a58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a66:	1d3b      	adds	r3, r7, #4
 8002a68:	2204      	movs	r2, #4
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4807      	ldr	r0, [pc, #28]	@ (8002a8c <MX_TIM2_Init+0xf4>)
 8002a6e:	f003 f8f7 	bl	8005c60 <HAL_TIM_PWM_ConfigChannel>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8002a78:	f000 f928 	bl	8002ccc <Error_Handler>
=======
 8000d54:	4b20      	ldr	r3, [pc, #128]	@ (8000dd8 <MX_TIM2_Init+0xa0>)
 8000d56:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd8 <MX_TIM2_Init+0xa0>)
 8000d5e:	2207      	movs	r2, #7
 8000d60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d62:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd8 <MX_TIM2_Init+0xa0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000d68:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd8 <MX_TIM2_Init+0xa0>)
 8000d6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d70:	4b19      	ldr	r3, [pc, #100]	@ (8000dd8 <MX_TIM2_Init+0xa0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d76:	4b18      	ldr	r3, [pc, #96]	@ (8000dd8 <MX_TIM2_Init+0xa0>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000d7c:	4816      	ldr	r0, [pc, #88]	@ (8000dd8 <MX_TIM2_Init+0xa0>)
 8000d7e:	f001 fbd1 	bl	8002524 <HAL_TIM_IC_Init>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d88:	f000 f8ec 	bl	8000f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d94:	f107 0310 	add.w	r3, r7, #16
 8000d98:	4619      	mov	r1, r3
 8000d9a:	480f      	ldr	r0, [pc, #60]	@ (8000dd8 <MX_TIM2_Init+0xa0>)
 8000d9c:	f001 ffa6 	bl	8002cec <HAL_TIMEx_MasterConfigSynchronization>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000da6:	f000 f8dd 	bl	8000f64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000daa:	2300      	movs	r3, #0
 8000dac:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000dae:	2301      	movs	r3, #1
 8000db0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000dba:	463b      	mov	r3, r7
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4805      	ldr	r0, [pc, #20]	@ (8000dd8 <MX_TIM2_Init+0xa0>)
 8000dc2:	f001 fcee 	bl	80027a2 <HAL_TIM_IC_ConfigChannel>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000dcc:	f000 f8ca 	bl	8000f64 <Error_Handler>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002a7c:	4803      	ldr	r0, [pc, #12]	@ (8002a8c <MX_TIM2_Init+0xf4>)
 8002a7e:	f000 fa2d 	bl	8002edc <HAL_TIM_MspPostInit>

}
<<<<<<< HEAD
 8002a82:	bf00      	nop
 8002a84:	3738      	adds	r7, #56	@ 0x38
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	200001e4 	.word	0x200001e4

08002a90 <MX_USART3_UART_Init>:
=======
 8000dd0:	bf00      	nop
 8000dd2:	3718      	adds	r7, #24
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	200000b4 	.word	0x200000b4

08000ddc <MX_USART3_UART_Init>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
<<<<<<< HEAD
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
=======
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
<<<<<<< HEAD
 8002a94:	4b11      	ldr	r3, [pc, #68]	@ (8002adc <MX_USART3_UART_Init+0x4c>)
 8002a96:	4a12      	ldr	r2, [pc, #72]	@ (8002ae0 <MX_USART3_UART_Init+0x50>)
 8002a98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002a9a:	4b10      	ldr	r3, [pc, #64]	@ (8002adc <MX_USART3_UART_Init+0x4c>)
 8002a9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002aa0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8002adc <MX_USART3_UART_Init+0x4c>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8002adc <MX_USART3_UART_Init+0x4c>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002aae:	4b0b      	ldr	r3, [pc, #44]	@ (8002adc <MX_USART3_UART_Init+0x4c>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ab4:	4b09      	ldr	r3, [pc, #36]	@ (8002adc <MX_USART3_UART_Init+0x4c>)
 8002ab6:	220c      	movs	r2, #12
 8002ab8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aba:	4b08      	ldr	r3, [pc, #32]	@ (8002adc <MX_USART3_UART_Init+0x4c>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ac0:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <MX_USART3_UART_Init+0x4c>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ac6:	4805      	ldr	r0, [pc, #20]	@ (8002adc <MX_USART3_UART_Init+0x4c>)
 8002ac8:	f003 fdfa 	bl	80066c0 <HAL_UART_Init>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002ad2:	f000 f8fb 	bl	8002ccc <Error_Handler>
=======
 8000de0:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <MX_USART3_UART_Init+0x4c>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	@ (8000e2c <MX_USART3_UART_Init+0x50>)
 8000de4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000de6:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <MX_USART3_UART_Init+0x4c>)
 8000de8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dee:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <MX_USART3_UART_Init+0x4c>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000df4:	4b0c      	ldr	r3, [pc, #48]	@ (8000e28 <MX_USART3_UART_Init+0x4c>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <MX_USART3_UART_Init+0x4c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e00:	4b09      	ldr	r3, [pc, #36]	@ (8000e28 <MX_USART3_UART_Init+0x4c>)
 8000e02:	220c      	movs	r2, #12
 8000e04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e06:	4b08      	ldr	r3, [pc, #32]	@ (8000e28 <MX_USART3_UART_Init+0x4c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e0c:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <MX_USART3_UART_Init+0x4c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e12:	4805      	ldr	r0, [pc, #20]	@ (8000e28 <MX_USART3_UART_Init+0x4c>)
 8000e14:	f001 fffa 	bl	8002e0c <HAL_UART_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e1e:	f000 f8a1 	bl	8000f64 <Error_Handler>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
<<<<<<< HEAD
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	2000022c 	.word	0x2000022c
 8002ae0:	40004800 	.word	0x40004800

08002ae4 <MX_GPIO_Init>:
=======
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200000fc 	.word	0x200000fc
 8000e2c:	40004800 	.word	0x40004800

08000e30 <MX_GPIO_Init>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08c      	sub	sp, #48	@ 0x30
 8002ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aea:	f107 031c 	add.w	r3, r7, #28
 8002aee:	2200      	movs	r2, #0
 8002af0:	601a      	str	r2, [r3, #0]
 8002af2:	605a      	str	r2, [r3, #4]
 8002af4:	609a      	str	r2, [r3, #8]
 8002af6:	60da      	str	r2, [r3, #12]
 8002af8:	611a      	str	r2, [r3, #16]
=======
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	f107 030c 	add.w	r3, r7, #12
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
<<<<<<< HEAD
 8002afa:	2300      	movs	r3, #0
 8002afc:	61bb      	str	r3, [r7, #24]
 8002afe:	4b5f      	ldr	r3, [pc, #380]	@ (8002c7c <MX_GPIO_Init+0x198>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	4a5e      	ldr	r2, [pc, #376]	@ (8002c7c <MX_GPIO_Init+0x198>)
 8002b04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b0a:	4b5c      	ldr	r3, [pc, #368]	@ (8002c7c <MX_GPIO_Init+0x198>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b12:	61bb      	str	r3, [r7, #24]
 8002b14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
 8002b1a:	4b58      	ldr	r3, [pc, #352]	@ (8002c7c <MX_GPIO_Init+0x198>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1e:	4a57      	ldr	r2, [pc, #348]	@ (8002c7c <MX_GPIO_Init+0x198>)
 8002b20:	f043 0301 	orr.w	r3, r3, #1
 8002b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b26:	4b55      	ldr	r3, [pc, #340]	@ (8002c7c <MX_GPIO_Init+0x198>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	4b51      	ldr	r3, [pc, #324]	@ (8002c7c <MX_GPIO_Init+0x198>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3a:	4a50      	ldr	r2, [pc, #320]	@ (8002c7c <MX_GPIO_Init+0x198>)
 8002b3c:	f043 0310 	orr.w	r3, r3, #16
 8002b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b42:	4b4e      	ldr	r3, [pc, #312]	@ (8002c7c <MX_GPIO_Init+0x198>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b46:	f003 0310 	and.w	r3, r3, #16
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	4b4a      	ldr	r3, [pc, #296]	@ (8002c7c <MX_GPIO_Init+0x198>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b56:	4a49      	ldr	r2, [pc, #292]	@ (8002c7c <MX_GPIO_Init+0x198>)
 8002b58:	f043 0308 	orr.w	r3, r3, #8
 8002b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b5e:	4b47      	ldr	r3, [pc, #284]	@ (8002c7c <MX_GPIO_Init+0x198>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	4b43      	ldr	r3, [pc, #268]	@ (8002c7c <MX_GPIO_Init+0x198>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b72:	4a42      	ldr	r2, [pc, #264]	@ (8002c7c <MX_GPIO_Init+0x198>)
 8002b74:	f043 0304 	orr.w	r3, r3, #4
 8002b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b7a:	4b40      	ldr	r3, [pc, #256]	@ (8002c7c <MX_GPIO_Init+0x198>)
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	60bb      	str	r3, [r7, #8]
 8002b84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	607b      	str	r3, [r7, #4]
 8002b8a:	4b3c      	ldr	r3, [pc, #240]	@ (8002c7c <MX_GPIO_Init+0x198>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	4a3b      	ldr	r2, [pc, #236]	@ (8002c7c <MX_GPIO_Init+0x198>)
 8002b90:	f043 0302 	orr.w	r3, r3, #2
 8002b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b96:	4b39      	ldr	r3, [pc, #228]	@ (8002c7c <MX_GPIO_Init+0x198>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	607b      	str	r3, [r7, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RS_Pin|LCD_RW_Pin|LCD_ENA_Pin|LCD_DB4_Pin
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f64f 4180 	movw	r1, #64640	@ 0xfc80
 8002ba8:	4835      	ldr	r0, [pc, #212]	@ (8002c80 <MX_GPIO_Init+0x19c>)
 8002baa:	f001 fb7f 	bl	80042ac <HAL_GPIO_WritePin>
                          |LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f44f 4178 	mov.w	r1, #63488	@ 0xf800
 8002bb4:	4833      	ldr	r0, [pc, #204]	@ (8002c84 <MX_GPIO_Init+0x1a0>)
 8002bb6:	f001 fb79 	bl	80042ac <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2180      	movs	r1, #128	@ 0x80
 8002bbe:	4832      	ldr	r0, [pc, #200]	@ (8002c88 <MX_GPIO_Init+0x1a4>)
 8002bc0:	f001 fb74 	bl	80042ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RS_Pin LCD_RW_Pin LCD_ENA_Pin LCD_DB4_Pin
                           LCD_DB5_Pin LCD_DB6_Pin LCD_DB7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RW_Pin|LCD_ENA_Pin|LCD_DB4_Pin
 8002bc4:	f64f 4380 	movw	r3, #64640	@ 0xfc80
 8002bc8:	61fb      	str	r3, [r7, #28]
                          |LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bd6:	f107 031c 	add.w	r3, r7, #28
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4828      	ldr	r0, [pc, #160]	@ (8002c80 <MX_GPIO_Init+0x19c>)
 8002bde:	f001 f9b1 	bl	8003f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD14
                           PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8002be2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002be6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002be8:	2301      	movs	r3, #1
 8002bea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bec:	2300      	movs	r3, #0
 8002bee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bf4:	f107 031c 	add.w	r3, r7, #28
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4822      	ldr	r0, [pc, #136]	@ (8002c84 <MX_GPIO_Init+0x1a0>)
 8002bfc:	f001 f9a2 	bl	8003f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC9 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002c00:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002c06:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c10:	f107 031c 	add.w	r3, r7, #28
 8002c14:	4619      	mov	r1, r3
 8002c16:	481d      	ldr	r0, [pc, #116]	@ (8002c8c <MX_GPIO_Init+0x1a8>)
 8002c18:	f001 f994 	bl	8003f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002c1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002c22:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002c26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2c:	f107 031c 	add.w	r3, r7, #28
 8002c30:	4619      	mov	r1, r3
 8002c32:	4817      	ldr	r0, [pc, #92]	@ (8002c90 <MX_GPIO_Init+0x1ac>)
 8002c34:	f001 f986 	bl	8003f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002c38:	2380      	movs	r3, #128	@ 0x80
 8002c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c44:	2300      	movs	r3, #0
 8002c46:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c48:	f107 031c 	add.w	r3, r7, #28
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	480e      	ldr	r0, [pc, #56]	@ (8002c88 <MX_GPIO_Init+0x1a4>)
 8002c50:	f001 f978 	bl	8003f44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002c54:	2200      	movs	r2, #0
 8002c56:	2100      	movs	r1, #0
 8002c58:	2017      	movs	r0, #23
 8002c5a:	f001 f8aa 	bl	8003db2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002c5e:	2017      	movs	r0, #23
 8002c60:	f001 f8c3 	bl	8003dea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002c64:	2200      	movs	r2, #0
 8002c66:	2100      	movs	r1, #0
 8002c68:	2028      	movs	r0, #40	@ 0x28
 8002c6a:	f001 f8a2 	bl	8003db2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002c6e:	2028      	movs	r0, #40	@ 0x28
 8002c70:	f001 f8bb 	bl	8003dea <HAL_NVIC_EnableIRQ>
=======
 8000e46:	2300      	movs	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	4b20      	ldr	r3, [pc, #128]	@ (8000ecc <MX_GPIO_Init+0x9c>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	4a1f      	ldr	r2, [pc, #124]	@ (8000ecc <MX_GPIO_Init+0x9c>)
 8000e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e56:	4b1d      	ldr	r3, [pc, #116]	@ (8000ecc <MX_GPIO_Init+0x9c>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	4b19      	ldr	r3, [pc, #100]	@ (8000ecc <MX_GPIO_Init+0x9c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	4a18      	ldr	r2, [pc, #96]	@ (8000ecc <MX_GPIO_Init+0x9c>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e72:	4b16      	ldr	r3, [pc, #88]	@ (8000ecc <MX_GPIO_Init+0x9c>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	603b      	str	r3, [r7, #0]
 8000e82:	4b12      	ldr	r3, [pc, #72]	@ (8000ecc <MX_GPIO_Init+0x9c>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e86:	4a11      	ldr	r2, [pc, #68]	@ (8000ecc <MX_GPIO_Init+0x9c>)
 8000e88:	f043 0308 	orr.w	r3, r3, #8
 8000e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ecc <MX_GPIO_Init+0x9c>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f44f 4168 	mov.w	r1, #59392	@ 0xe800
 8000ea0:	480b      	ldr	r0, [pc, #44]	@ (8000ed0 <MX_GPIO_Init+0xa0>)
 8000ea2:	f000 fe25 	bl	8001af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD11 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000ea6:	f44f 4368 	mov.w	r3, #59392	@ 0xe800
 8000eaa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eac:	2301      	movs	r3, #1
 8000eae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4804      	ldr	r0, [pc, #16]	@ (8000ed0 <MX_GPIO_Init+0xa0>)
 8000ec0:	f000 fc7a 	bl	80017b8 <HAL_GPIO_Init>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
<<<<<<< HEAD
 8002c74:	bf00      	nop
 8002c76:	3730      	adds	r7, #48	@ 0x30
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40020c00 	.word	0x40020c00
 8002c88:	40020400 	.word	0x40020400
 8002c8c:	40020800 	.word	0x40020800
 8002c90:	40020000 	.word	0x40020000

08002c94 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a07      	ldr	r2, [pc, #28]	@ (8002cc0 <HAL_UART_RxCpltCallback+0x2c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d108      	bne.n	8002cb8 <HAL_UART_RxCpltCallback+0x24>
    {
    	receive_Data(received_data, sizeof(received_data));
 8002ca6:	2102      	movs	r1, #2
 8002ca8:	4806      	ldr	r0, [pc, #24]	@ (8002cc4 <HAL_UART_RxCpltCallback+0x30>)
 8002caa:	f7ff f82f 	bl	8001d0c <receive_Data>

        // Prepare to receive the next two bytes
        HAL_UART_Receive_IT(&huart3, received_data, 2);
 8002cae:	2202      	movs	r2, #2
 8002cb0:	4904      	ldr	r1, [pc, #16]	@ (8002cc4 <HAL_UART_RxCpltCallback+0x30>)
 8002cb2:	4805      	ldr	r0, [pc, #20]	@ (8002cc8 <HAL_UART_RxCpltCallback+0x34>)
 8002cb4:	f003 fddf 	bl	8006876 <HAL_UART_Receive_IT>
    }
}
 8002cb8:	bf00      	nop
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40004800 	.word	0x40004800
 8002cc4:	20000144 	.word	0x20000144
 8002cc8:	2000022c 	.word	0x2000022c

08002ccc <Error_Handler>:
=======
 8000ec4:	bf00      	nop
 8000ec6:	3720      	adds	r7, #32
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020c00 	.word	0x40020c00

08000ed4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f50 <HAL_UART_RxCpltCallback+0x7c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d12f      	bne.n	8000f46 <HAL_UART_RxCpltCallback+0x72>
    {
        int wanted_temperature = (int)received_data[0];
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f54 <HAL_UART_RxCpltCallback+0x80>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	60fb      	str	r3, [r7, #12]
        int power_switch_state = (int)received_data[1];
 8000eec:	4b19      	ldr	r3, [pc, #100]	@ (8000f54 <HAL_UART_RxCpltCallback+0x80>)
 8000eee:	785b      	ldrb	r3, [r3, #1]
 8000ef0:	60bb      	str	r3, [r7, #8]

        My_Automat.wanted_Temperature = wanted_temperature;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	b25a      	sxtb	r2, r3
 8000ef6:	4b18      	ldr	r3, [pc, #96]	@ (8000f58 <HAL_UART_RxCpltCallback+0x84>)
 8000ef8:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
        //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
        if ( wanted_temperature > 20)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2b14      	cmp	r3, #20
 8000f00:	dd06      	ble.n	8000f10 <HAL_UART_RxCpltCallback+0x3c>
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); // Turn on LED
 8000f02:	2201      	movs	r2, #1
 8000f04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f08:	4814      	ldr	r0, [pc, #80]	@ (8000f5c <HAL_UART_RxCpltCallback+0x88>)
 8000f0a:	f000 fdf1 	bl	8001af0 <HAL_GPIO_WritePin>
 8000f0e:	e005      	b.n	8000f1c <HAL_UART_RxCpltCallback+0x48>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET); // Turn off LED
 8000f10:	2200      	movs	r2, #0
 8000f12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f16:	4811      	ldr	r0, [pc, #68]	@ (8000f5c <HAL_UART_RxCpltCallback+0x88>)
 8000f18:	f000 fdea 	bl	8001af0 <HAL_GPIO_WritePin>
                }
        if (power_switch_state == 1)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d106      	bne.n	8000f30 <HAL_UART_RxCpltCallback+0x5c>
        {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET); // Turn on LED
 8000f22:	2201      	movs	r2, #1
 8000f24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f28:	480c      	ldr	r0, [pc, #48]	@ (8000f5c <HAL_UART_RxCpltCallback+0x88>)
 8000f2a:	f000 fde1 	bl	8001af0 <HAL_GPIO_WritePin>
 8000f2e:	e005      	b.n	8000f3c <HAL_UART_RxCpltCallback+0x68>
        }
        else
        {
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET); // Turn off LED
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f36:	4809      	ldr	r0, [pc, #36]	@ (8000f5c <HAL_UART_RxCpltCallback+0x88>)
 8000f38:	f000 fdda 	bl	8001af0 <HAL_GPIO_WritePin>
        }

        // Prepare to receive the next two bytes
        HAL_UART_Receive_IT(&huart3, received_data, 2);
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	4905      	ldr	r1, [pc, #20]	@ (8000f54 <HAL_UART_RxCpltCallback+0x80>)
 8000f40:	4807      	ldr	r0, [pc, #28]	@ (8000f60 <HAL_UART_RxCpltCallback+0x8c>)
 8000f42:	f002 f83e 	bl	8002fc2 <HAL_UART_Receive_IT>
    }
}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40004800 	.word	0x40004800
 8000f54:	200001a8 	.word	0x200001a8
 8000f58:	20000144 	.word	0x20000144
 8000f5c:	40020c00 	.word	0x40020c00
 8000f60:	200000fc 	.word	0x200000fc

08000f64 <Error_Handler>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
=======
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8002cd0:	b672      	cpsid	i
}
 8002cd2:	bf00      	nop
=======
 8000f68:	b672      	cpsid	i
}
 8000f6a:	bf00      	nop
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
<<<<<<< HEAD
 8002cd4:	bf00      	nop
 8002cd6:	e7fd      	b.n	8002cd4 <Error_Handler+0x8>

08002cd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
=======
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <Error_Handler+0x8>

08000f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
=======
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8002cde:	2300      	movs	r3, #0
 8002ce0:	607b      	str	r3, [r7, #4]
 8002ce2:	4b10      	ldr	r3, [pc, #64]	@ (8002d24 <HAL_MspInit+0x4c>)
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce6:	4a0f      	ldr	r2, [pc, #60]	@ (8002d24 <HAL_MspInit+0x4c>)
 8002ce8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cec:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cee:	4b0d      	ldr	r3, [pc, #52]	@ (8002d24 <HAL_MspInit+0x4c>)
 8002cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cf6:	607b      	str	r3, [r7, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	603b      	str	r3, [r7, #0]
 8002cfe:	4b09      	ldr	r3, [pc, #36]	@ (8002d24 <HAL_MspInit+0x4c>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d02:	4a08      	ldr	r2, [pc, #32]	@ (8002d24 <HAL_MspInit+0x4c>)
 8002d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d0a:	4b06      	ldr	r3, [pc, #24]	@ (8002d24 <HAL_MspInit+0x4c>)
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d12:	603b      	str	r3, [r7, #0]
 8002d14:	683b      	ldr	r3, [r7, #0]
=======
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <HAL_MspInit+0x4c>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000fbc <HAL_MspInit+0x4c>)
 8000f80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f86:	4b0d      	ldr	r3, [pc, #52]	@ (8000fbc <HAL_MspInit+0x4c>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	603b      	str	r3, [r7, #0]
 8000f96:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <HAL_MspInit+0x4c>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9a:	4a08      	ldr	r2, [pc, #32]	@ (8000fbc <HAL_MspInit+0x4c>)
 8000f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fa2:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <HAL_MspInit+0x4c>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	683b      	ldr	r3, [r7, #0]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8002d16:	bf00      	nop
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800

08002d28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08a      	sub	sp, #40	@ 0x28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d30:	f107 0314 	add.w	r3, r7, #20
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	605a      	str	r2, [r3, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
 8002d3c:	60da      	str	r2, [r3, #12]
 8002d3e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a17      	ldr	r2, [pc, #92]	@ (8002da4 <HAL_ADC_MspInit+0x7c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d127      	bne.n	8002d9a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	4b16      	ldr	r3, [pc, #88]	@ (8002da8 <HAL_ADC_MspInit+0x80>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d52:	4a15      	ldr	r2, [pc, #84]	@ (8002da8 <HAL_ADC_MspInit+0x80>)
 8002d54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d58:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d5a:	4b13      	ldr	r3, [pc, #76]	@ (8002da8 <HAL_ADC_MspInit+0x80>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d62:	613b      	str	r3, [r7, #16]
 8002d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002da8 <HAL_ADC_MspInit+0x80>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6e:	4a0e      	ldr	r2, [pc, #56]	@ (8002da8 <HAL_ADC_MspInit+0x80>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d76:	4b0c      	ldr	r3, [pc, #48]	@ (8002da8 <HAL_ADC_MspInit+0x80>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d82:	2308      	movs	r3, #8
 8002d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d86:	2303      	movs	r3, #3
 8002d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d8e:	f107 0314 	add.w	r3, r7, #20
 8002d92:	4619      	mov	r1, r3
 8002d94:	4805      	ldr	r0, [pc, #20]	@ (8002dac <HAL_ADC_MspInit+0x84>)
 8002d96:	f001 f8d5 	bl	8003f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d9a:	bf00      	nop
 8002d9c:	3728      	adds	r7, #40	@ 0x28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40012000 	.word	0x40012000
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40020000 	.word	0x40020000

08002db0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08a      	sub	sp, #40	@ 0x28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db8:	f107 0314 	add.w	r3, r7, #20
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a19      	ldr	r2, [pc, #100]	@ (8002e34 <HAL_I2C_MspInit+0x84>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d12c      	bne.n	8002e2c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	4b18      	ldr	r3, [pc, #96]	@ (8002e38 <HAL_I2C_MspInit+0x88>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dda:	4a17      	ldr	r2, [pc, #92]	@ (8002e38 <HAL_I2C_MspInit+0x88>)
 8002ddc:	f043 0302 	orr.w	r3, r3, #2
 8002de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002de2:	4b15      	ldr	r3, [pc, #84]	@ (8002e38 <HAL_I2C_MspInit+0x88>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	613b      	str	r3, [r7, #16]
 8002dec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8002dee:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002df2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002df4:	2312      	movs	r3, #18
 8002df6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e00:	2304      	movs	r3, #4
 8002e02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e04:	f107 0314 	add.w	r3, r7, #20
 8002e08:	4619      	mov	r1, r3
 8002e0a:	480c      	ldr	r0, [pc, #48]	@ (8002e3c <HAL_I2C_MspInit+0x8c>)
 8002e0c:	f001 f89a 	bl	8003f44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e10:	2300      	movs	r3, #0
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	4b08      	ldr	r3, [pc, #32]	@ (8002e38 <HAL_I2C_MspInit+0x88>)
 8002e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e18:	4a07      	ldr	r2, [pc, #28]	@ (8002e38 <HAL_I2C_MspInit+0x88>)
 8002e1a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002e1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e20:	4b05      	ldr	r3, [pc, #20]	@ (8002e38 <HAL_I2C_MspInit+0x88>)
 8002e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e2c:	bf00      	nop
 8002e2e:	3728      	adds	r7, #40	@ 0x28
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40005400 	.word	0x40005400
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40020400 	.word	0x40020400

08002e40 <HAL_TIM_IC_MspInit>:
=======
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800

08000fc0 <HAL_TIM_IC_MspInit>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
<<<<<<< HEAD
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08a      	sub	sp, #40	@ 0x28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e48:	f107 0314 	add.w	r3, r7, #20
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	605a      	str	r2, [r3, #4]
 8002e52:	609a      	str	r2, [r3, #8]
 8002e54:	60da      	str	r2, [r3, #12]
 8002e56:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e60:	d133      	bne.n	8002eca <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	613b      	str	r3, [r7, #16]
 8002e66:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed4 <HAL_TIM_IC_MspInit+0x94>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6a:	4a1a      	ldr	r2, [pc, #104]	@ (8002ed4 <HAL_TIM_IC_MspInit+0x94>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e72:	4b18      	ldr	r3, [pc, #96]	@ (8002ed4 <HAL_TIM_IC_MspInit+0x94>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	613b      	str	r3, [r7, #16]
 8002e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
 8002e82:	4b14      	ldr	r3, [pc, #80]	@ (8002ed4 <HAL_TIM_IC_MspInit+0x94>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e86:	4a13      	ldr	r2, [pc, #76]	@ (8002ed4 <HAL_TIM_IC_MspInit+0x94>)
 8002e88:	f043 0301 	orr.w	r3, r3, #1
 8002e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e8e:	4b11      	ldr	r3, [pc, #68]	@ (8002ed4 <HAL_TIM_IC_MspInit+0x94>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eae:	f107 0314 	add.w	r3, r7, #20
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	4808      	ldr	r0, [pc, #32]	@ (8002ed8 <HAL_TIM_IC_MspInit+0x98>)
 8002eb6:	f001 f845 	bl	8003f44 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	201c      	movs	r0, #28
 8002ec0:	f000 ff77 	bl	8003db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ec4:	201c      	movs	r0, #28
 8002ec6:	f000 ff90 	bl	8003dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002eca:	bf00      	nop
 8002ecc:	3728      	adds	r7, #40	@ 0x28
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	40020000 	.word	0x40020000

08002edc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b088      	sub	sp, #32
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee4:	f107 030c 	add.w	r3, r7, #12
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	605a      	str	r2, [r3, #4]
 8002eee:	609a      	str	r2, [r3, #8]
 8002ef0:	60da      	str	r2, [r3, #12]
 8002ef2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002efc:	d11d      	bne.n	8002f3a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	4b10      	ldr	r3, [pc, #64]	@ (8002f44 <HAL_TIM_MspPostInit+0x68>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f06:	4a0f      	ldr	r2, [pc, #60]	@ (8002f44 <HAL_TIM_MspPostInit+0x68>)
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f44 <HAL_TIM_MspPostInit+0x68>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	60bb      	str	r3, [r7, #8]
 8002f18:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1e:	2302      	movs	r3, #2
 8002f20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f26:	2300      	movs	r3, #0
 8002f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f2e:	f107 030c 	add.w	r3, r7, #12
 8002f32:	4619      	mov	r1, r3
 8002f34:	4804      	ldr	r0, [pc, #16]	@ (8002f48 <HAL_TIM_MspPostInit+0x6c>)
 8002f36:	f001 f805 	bl	8003f44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002f3a:	bf00      	nop
 8002f3c:	3720      	adds	r7, #32
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40020000 	.word	0x40020000

08002f4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08a      	sub	sp, #40	@ 0x28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f54:	f107 0314 	add.w	r3, r7, #20
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	605a      	str	r2, [r3, #4]
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	60da      	str	r2, [r3, #12]
 8002f62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a1d      	ldr	r2, [pc, #116]	@ (8002fe0 <HAL_UART_MspInit+0x94>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d134      	bne.n	8002fd8 <HAL_UART_MspInit+0x8c>
=======
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	@ 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fe0:	d133      	bne.n	800104a <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
 8000fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8001054 <HAL_TIM_IC_MspInit+0x94>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fea:	4a1a      	ldr	r2, [pc, #104]	@ (8001054 <HAL_TIM_IC_MspInit+0x94>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff2:	4b18      	ldr	r3, [pc, #96]	@ (8001054 <HAL_TIM_IC_MspInit+0x94>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	613b      	str	r3, [r7, #16]
 8000ffc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <HAL_TIM_IC_MspInit+0x94>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a13      	ldr	r2, [pc, #76]	@ (8001054 <HAL_TIM_IC_MspInit+0x94>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <HAL_TIM_IC_MspInit+0x94>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800101a:	2301      	movs	r3, #1
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800102a:	2301      	movs	r3, #1
 800102c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	4808      	ldr	r0, [pc, #32]	@ (8001058 <HAL_TIM_IC_MspInit+0x98>)
 8001036:	f000 fbbf 	bl	80017b8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	201c      	movs	r0, #28
 8001040:	f000 faf1 	bl	8001626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001044:	201c      	movs	r0, #28
 8001046:	f000 fb0a 	bl	800165e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800104a:	bf00      	nop
 800104c:	3728      	adds	r7, #40	@ 0x28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800
 8001058:	40020000 	.word	0x40020000

0800105c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	@ 0x28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a1d      	ldr	r2, [pc, #116]	@ (80010f0 <HAL_UART_MspInit+0x94>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d134      	bne.n	80010e8 <HAL_UART_MspInit+0x8c>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
<<<<<<< HEAD
 8002f6e:	2300      	movs	r3, #0
 8002f70:	613b      	str	r3, [r7, #16]
 8002f72:	4b1c      	ldr	r3, [pc, #112]	@ (8002fe4 <HAL_UART_MspInit+0x98>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f76:	4a1b      	ldr	r2, [pc, #108]	@ (8002fe4 <HAL_UART_MspInit+0x98>)
 8002f78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f7e:	4b19      	ldr	r3, [pc, #100]	@ (8002fe4 <HAL_UART_MspInit+0x98>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f86:	613b      	str	r3, [r7, #16]
 8002f88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	4b15      	ldr	r3, [pc, #84]	@ (8002fe4 <HAL_UART_MspInit+0x98>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f92:	4a14      	ldr	r2, [pc, #80]	@ (8002fe4 <HAL_UART_MspInit+0x98>)
 8002f94:	f043 0308 	orr.w	r3, r3, #8
 8002f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f9a:	4b12      	ldr	r3, [pc, #72]	@ (8002fe4 <HAL_UART_MspInit+0x98>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
=======
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	4b1c      	ldr	r3, [pc, #112]	@ (80010f4 <HAL_UART_MspInit+0x98>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001086:	4a1b      	ldr	r2, [pc, #108]	@ (80010f4 <HAL_UART_MspInit+0x98>)
 8001088:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800108c:	6413      	str	r3, [r2, #64]	@ 0x40
 800108e:	4b19      	ldr	r3, [pc, #100]	@ (80010f4 <HAL_UART_MspInit+0x98>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001092:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <HAL_UART_MspInit+0x98>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	4a14      	ldr	r2, [pc, #80]	@ (80010f4 <HAL_UART_MspInit+0x98>)
 80010a4:	f043 0308 	orr.w	r3, r3, #8
 80010a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010aa:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <HAL_UART_MspInit+0x98>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	f003 0308 	and.w	r3, r3, #8
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
<<<<<<< HEAD
 8002fa6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fac:	2302      	movs	r3, #2
 8002fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fb8:	2307      	movs	r3, #7
 8002fba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fbc:	f107 0314 	add.w	r3, r7, #20
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4809      	ldr	r0, [pc, #36]	@ (8002fe8 <HAL_UART_MspInit+0x9c>)
 8002fc4:	f000 ffbe 	bl	8003f44 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2100      	movs	r1, #0
 8002fcc:	2027      	movs	r0, #39	@ 0x27
 8002fce:	f000 fef0 	bl	8003db2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002fd2:	2027      	movs	r0, #39	@ 0x27
 8002fd4:	f000 ff09 	bl	8003dea <HAL_NVIC_EnableIRQ>
=======
 80010b6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010c8:	2307      	movs	r3, #7
 80010ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4619      	mov	r1, r3
 80010d2:	4809      	ldr	r0, [pc, #36]	@ (80010f8 <HAL_UART_MspInit+0x9c>)
 80010d4:	f000 fb70 	bl	80017b8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	2100      	movs	r1, #0
 80010dc:	2027      	movs	r0, #39	@ 0x27
 80010de:	f000 faa2 	bl	8001626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80010e2:	2027      	movs	r0, #39	@ 0x27
 80010e4:	f000 fabb 	bl	800165e <HAL_NVIC_EnableIRQ>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
<<<<<<< HEAD
 8002fd8:	bf00      	nop
 8002fda:	3728      	adds	r7, #40	@ 0x28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	40004800 	.word	0x40004800
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	40020c00 	.word	0x40020c00

08002fec <NMI_Handler>:
=======
 80010e8:	bf00      	nop
 80010ea:	3728      	adds	r7, #40	@ 0x28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40004800 	.word	0x40004800
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40020c00 	.word	0x40020c00

080010fc <NMI_Handler>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
=======
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
<<<<<<< HEAD
 8002ff0:	bf00      	nop
 8002ff2:	e7fd      	b.n	8002ff0 <NMI_Handler+0x4>

08002ff4 <HardFault_Handler>:
=======
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <NMI_Handler+0x4>

08001104 <HardFault_Handler>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
=======
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8002ff8:	bf00      	nop
 8002ffa:	e7fd      	b.n	8002ff8 <HardFault_Handler+0x4>

08002ffc <MemManage_Handler>:
=======
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <HardFault_Handler+0x4>

0800110c <MemManage_Handler>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
=======
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8003000:	bf00      	nop
 8003002:	e7fd      	b.n	8003000 <MemManage_Handler+0x4>

08003004 <BusFault_Handler>:
=======
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <MemManage_Handler+0x4>

08001114 <BusFault_Handler>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
=======
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8003008:	bf00      	nop
 800300a:	e7fd      	b.n	8003008 <BusFault_Handler+0x4>

0800300c <UsageFault_Handler>:
=======
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <BusFault_Handler+0x4>

0800111c <UsageFault_Handler>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
=======
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8003010:	bf00      	nop
 8003012:	e7fd      	b.n	8003010 <UsageFault_Handler+0x4>

08003014 <SVC_Handler>:
=======
 8001120:	bf00      	nop
 8001122:	e7fd      	b.n	8001120 <UsageFault_Handler+0x4>

08001124 <SVC_Handler>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
=======
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 8003018:	bf00      	nop
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <DebugMon_Handler>:
=======
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <DebugMon_Handler>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8003022:	b480      	push	{r7}
 8003024:	af00      	add	r7, sp, #0
=======
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8003026:	bf00      	nop
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <PendSV_Handler>:
=======
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <PendSV_Handler>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
=======
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 8003034:	bf00      	nop
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <SysTick_Handler>:
=======
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <SysTick_Handler>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 800303e:	b580      	push	{r7, lr}
 8003040:	af00      	add	r7, sp, #0
=======
 800114e:	b580      	push	{r7, lr}
 8001150:	af00      	add	r7, sp, #0
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 8003042:	f000 f997 	bl	8003374 <HAL_IncTick>
=======
 8001152:	f000 f949 	bl	80013e8 <HAL_IncTick>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

	GPIO_PinState  Button_LT;
	Button_LT = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9);
 8003052:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003056:	4809      	ldr	r0, [pc, #36]	@ (800307c <EXTI9_5_IRQHandler+0x30>)
 8003058:	f001 f910 	bl	800427c <HAL_GPIO_ReadPin>
 800305c:	4603      	mov	r3, r0
 800305e:	71fb      	strb	r3, [r7, #7]

	if(Button_LT != GPIO_PIN_SET)
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d002      	beq.n	800306c <EXTI9_5_IRQHandler+0x20>
	{
		left_button_flag_up = true;
 8003066:	4b06      	ldr	r3, [pc, #24]	@ (8003080 <EXTI9_5_IRQHandler+0x34>)
 8003068:	2201      	movs	r2, #1
 800306a:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800306c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003070:	f001 f936 	bl	80042e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003074:	bf00      	nop
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40020800 	.word	0x40020800
 8003080:	2000027a 	.word	0x2000027a

08003084 <TIM2_IRQHandler>:
=======
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <TIM2_IRQHandler>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
<<<<<<< HEAD
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
=======
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
<<<<<<< HEAD
 8003088:	4802      	ldr	r0, [pc, #8]	@ (8003094 <TIM2_IRQHandler+0x10>)
 800308a:	f002 fc5c 	bl	8005946 <HAL_TIM_IRQHandler>
=======
 8001160:	4802      	ldr	r0, [pc, #8]	@ (800116c <TIM2_IRQHandler+0x10>)
 8001162:	f001 fa2e 	bl	80025c2 <HAL_TIM_IRQHandler>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
<<<<<<< HEAD
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	200001e4 	.word	0x200001e4

08003098 <USART3_IRQHandler>:
=======
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200000b4 	.word	0x200000b4

08001170 <USART3_IRQHandler>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
<<<<<<< HEAD
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
=======
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
<<<<<<< HEAD
 800309c:	4802      	ldr	r0, [pc, #8]	@ (80030a8 <USART3_IRQHandler+0x10>)
 800309e:	f003 fc0f 	bl	80068c0 <HAL_UART_IRQHandler>
=======
 8001174:	4802      	ldr	r0, [pc, #8]	@ (8001180 <USART3_IRQHandler+0x10>)
 8001176:	f001 ff49 	bl	800300c <HAL_UART_IRQHandler>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
<<<<<<< HEAD
 80030a2:	bf00      	nop
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	2000022c 	.word	0x2000022c

080030ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	GPIO_PinState  Button_RT;
	GPIO_PinState  Button_MIDDLE;

	Button_RT = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11);
 80030b2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80030b6:	4812      	ldr	r0, [pc, #72]	@ (8003100 <EXTI15_10_IRQHandler+0x54>)
 80030b8:	f001 f8e0 	bl	800427c <HAL_GPIO_ReadPin>
 80030bc:	4603      	mov	r3, r0
 80030be:	71fb      	strb	r3, [r7, #7]
	if(Button_RT != GPIO_PIN_SET)
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d002      	beq.n	80030cc <EXTI15_10_IRQHandler+0x20>
	{
		right_button_flag_up = true;
 80030c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003104 <EXTI15_10_IRQHandler+0x58>)
 80030c8:	2201      	movs	r2, #1
 80030ca:	701a      	strb	r2, [r3, #0]
	}

	Button_MIDDLE = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 80030cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030d0:	480d      	ldr	r0, [pc, #52]	@ (8003108 <EXTI15_10_IRQHandler+0x5c>)
 80030d2:	f001 f8d3 	bl	800427c <HAL_GPIO_ReadPin>
 80030d6:	4603      	mov	r3, r0
 80030d8:	71bb      	strb	r3, [r7, #6]
	if(Button_MIDDLE != GPIO_PIN_SET)
 80030da:	79bb      	ldrb	r3, [r7, #6]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d002      	beq.n	80030e6 <EXTI15_10_IRQHandler+0x3a>
	{
		middle_button_flag_up = true;
 80030e0:	4b0a      	ldr	r3, [pc, #40]	@ (800310c <EXTI15_10_IRQHandler+0x60>)
 80030e2:	2201      	movs	r2, #1
 80030e4:	701a      	strb	r2, [r3, #0]
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80030e6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80030ea:	f001 f8f9 	bl	80042e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80030ee:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80030f2:	f001 f8f5 	bl	80042e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80030f6:	bf00      	nop
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40020800 	.word	0x40020800
 8003104:	2000027b 	.word	0x2000027b
 8003108:	40020000 	.word	0x40020000
 800310c:	2000027c 	.word	0x2000027c

08003110 <_read>:
=======
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200000fc 	.word	0x200000fc

08001184 <_read>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
<<<<<<< HEAD
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
=======
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< HEAD
 800311c:	2300      	movs	r3, #0
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	e00a      	b.n	8003138 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003122:	f3af 8000 	nop.w
 8003126:	4601      	mov	r1, r0
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	60ba      	str	r2, [r7, #8]
 800312e:	b2ca      	uxtb	r2, r1
 8003130:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	3301      	adds	r3, #1
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	429a      	cmp	r2, r3
 800313e:	dbf0      	blt.n	8003122 <_read+0x12>
  }

  return len;
 8003140:	687b      	ldr	r3, [r7, #4]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b086      	sub	sp, #24
 800314e:	af00      	add	r7, sp, #0
 8003150:	60f8      	str	r0, [r7, #12]
 8003152:	60b9      	str	r1, [r7, #8]
 8003154:	607a      	str	r2, [r7, #4]
=======
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	e00a      	b.n	80011ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001196:	f3af 8000 	nop.w
 800119a:	4601      	mov	r1, r0
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	60ba      	str	r2, [r7, #8]
 80011a2:	b2ca      	uxtb	r2, r1
 80011a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	3301      	adds	r3, #1
 80011aa:	617b      	str	r3, [r7, #20]
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	dbf0      	blt.n	8001196 <_read+0x12>
  }

  return len;
 80011b4:	687b      	ldr	r3, [r7, #4]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	60f8      	str	r0, [r7, #12]
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
<<<<<<< HEAD
 8003156:	2300      	movs	r3, #0
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	e009      	b.n	8003170 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	1c5a      	adds	r2, r3, #1
 8003160:	60ba      	str	r2, [r7, #8]
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	4618      	mov	r0, r3
 8003166:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	3301      	adds	r3, #1
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	429a      	cmp	r2, r3
 8003176:	dbf1      	blt.n	800315c <_write+0x12>
  }
  return len;
 8003178:	687b      	ldr	r3, [r7, #4]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <_close>:

int _close(int file)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800318a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800318e:	4618      	mov	r0, r3
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <_fstat>:
=======
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
 80011ce:	e009      	b.n	80011e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	1c5a      	adds	r2, r3, #1
 80011d4:	60ba      	str	r2, [r7, #8]
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	3301      	adds	r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	dbf1      	blt.n	80011d0 <_write+0x12>
  }
  return len;
 80011ec:	687b      	ldr	r3, [r7, #4]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <_close>:

int _close(int file)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <_fstat>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff


int _fstat(int file, struct stat *st)
{
<<<<<<< HEAD
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
 80031a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031aa:	605a      	str	r2, [r3, #4]
  return 0;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <_isatty>:

int _isatty(int file)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031c2:	2301      	movs	r3, #1
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
=======
 800120e:	b480      	push	{r7}
 8001210:	b083      	sub	sp, #12
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800121e:	605a      	str	r2, [r3, #4]
  return 0;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <_isatty>:

int _isatty(int file)
{
 800122e:	b480      	push	{r7}
 8001230:	b083      	sub	sp, #12
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
<<<<<<< HEAD
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
	...

080031ec <_sbrk>:
=======
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <_sbrk>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
<<<<<<< HEAD
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
=======
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
<<<<<<< HEAD
 80031f4:	4a14      	ldr	r2, [pc, #80]	@ (8003248 <_sbrk+0x5c>)
 80031f6:	4b15      	ldr	r3, [pc, #84]	@ (800324c <_sbrk+0x60>)
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	613b      	str	r3, [r7, #16]
=======
 8001268:	4a14      	ldr	r2, [pc, #80]	@ (80012bc <_sbrk+0x5c>)
 800126a:	4b15      	ldr	r3, [pc, #84]	@ (80012c0 <_sbrk+0x60>)
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	613b      	str	r3, [r7, #16]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
<<<<<<< HEAD
 8003200:	4b13      	ldr	r3, [pc, #76]	@ (8003250 <_sbrk+0x64>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d102      	bne.n	800320e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003208:	4b11      	ldr	r3, [pc, #68]	@ (8003250 <_sbrk+0x64>)
 800320a:	4a12      	ldr	r2, [pc, #72]	@ (8003254 <_sbrk+0x68>)
 800320c:	601a      	str	r2, [r3, #0]
=======
 8001274:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <_sbrk+0x64>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d102      	bne.n	8001282 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800127c:	4b11      	ldr	r3, [pc, #68]	@ (80012c4 <_sbrk+0x64>)
 800127e:	4a12      	ldr	r2, [pc, #72]	@ (80012c8 <_sbrk+0x68>)
 8001280:	601a      	str	r2, [r3, #0]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
<<<<<<< HEAD
 800320e:	4b10      	ldr	r3, [pc, #64]	@ (8003250 <_sbrk+0x64>)
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4413      	add	r3, r2
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	429a      	cmp	r2, r3
 800321a:	d207      	bcs.n	800322c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800321c:	f004 fd1e 	bl	8007c5c <__errno>
 8003220:	4603      	mov	r3, r0
 8003222:	220c      	movs	r2, #12
 8003224:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003226:	f04f 33ff 	mov.w	r3, #4294967295
 800322a:	e009      	b.n	8003240 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800322c:	4b08      	ldr	r3, [pc, #32]	@ (8003250 <_sbrk+0x64>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003232:	4b07      	ldr	r3, [pc, #28]	@ (8003250 <_sbrk+0x64>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4413      	add	r3, r2
 800323a:	4a05      	ldr	r2, [pc, #20]	@ (8003250 <_sbrk+0x64>)
 800323c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800323e:	68fb      	ldr	r3, [r7, #12]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20020000 	.word	0x20020000
 800324c:	00000400 	.word	0x00000400
 8003250:	20000280 	.word	0x20000280
 8003254:	200003d8 	.word	0x200003d8

08003258 <SystemInit>:
=======
 8001282:	4b10      	ldr	r3, [pc, #64]	@ (80012c4 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	429a      	cmp	r2, r3
 800128e:	d207      	bcs.n	80012a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001290:	f003 f86a 	bl	8004368 <__errno>
 8001294:	4603      	mov	r3, r0
 8001296:	220c      	movs	r2, #12
 8001298:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	e009      	b.n	80012b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a0:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <_sbrk+0x64>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012a6:	4b07      	ldr	r3, [pc, #28]	@ (80012c4 <_sbrk+0x64>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	4a05      	ldr	r2, [pc, #20]	@ (80012c4 <_sbrk+0x64>)
 80012b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012b2:	68fb      	ldr	r3, [r7, #12]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20020000 	.word	0x20020000
 80012c0:	00000400 	.word	0x00000400
 80012c4:	200001ac 	.word	0x200001ac
 80012c8:	20000300 	.word	0x20000300

080012cc <SystemInit>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800325c:	4b06      	ldr	r3, [pc, #24]	@ (8003278 <SystemInit+0x20>)
 800325e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003262:	4a05      	ldr	r2, [pc, #20]	@ (8003278 <SystemInit+0x20>)
 8003264:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003268:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
=======
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d0:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <SystemInit+0x20>)
 80012d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012d6:	4a05      	ldr	r2, [pc, #20]	@ (80012ec <SystemInit+0x20>)
 80012d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 800326c:	bf00      	nop
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	e000ed00 	.word	0xe000ed00

0800327c <Reset_Handler>:
=======
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <Reset_Handler>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
<<<<<<< HEAD
 800327c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80032b4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003280:	f7ff ffea 	bl	8003258 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003284:	480c      	ldr	r0, [pc, #48]	@ (80032b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003286:	490d      	ldr	r1, [pc, #52]	@ (80032bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003288:	4a0d      	ldr	r2, [pc, #52]	@ (80032c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800328a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800328c:	e002      	b.n	8003294 <LoopCopyDataInit>

0800328e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800328e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003292:	3304      	adds	r3, #4

08003294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003298:	d3f9      	bcc.n	800328e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800329a:	4a0a      	ldr	r2, [pc, #40]	@ (80032c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800329c:	4c0a      	ldr	r4, [pc, #40]	@ (80032c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800329e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032a0:	e001      	b.n	80032a6 <LoopFillZerobss>

080032a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032a4:	3204      	adds	r2, #4

080032a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032a8:	d3fb      	bcc.n	80032a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80032aa:	f004 fcdd 	bl	8007c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032ae:	f7ff f8d7 	bl	8002460 <main>
  bx  lr    
 80032b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80032b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032bc:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80032c0:	08008cfc 	.word	0x08008cfc
  ldr r2, =_sbss
 80032c4:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80032c8:	200003d4 	.word	0x200003d4

080032cc <ADC_IRQHandler>:
=======
 80012f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001328 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012f4:	f7ff ffea 	bl	80012cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012f8:	480c      	ldr	r0, [pc, #48]	@ (800132c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012fa:	490d      	ldr	r1, [pc, #52]	@ (8001330 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001334 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001300:	e002      	b.n	8001308 <LoopCopyDataInit>

08001302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001306:	3304      	adds	r3, #4

08001308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800130c:	d3f9      	bcc.n	8001302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130e:	4a0a      	ldr	r2, [pc, #40]	@ (8001338 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001310:	4c0a      	ldr	r4, [pc, #40]	@ (800133c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001314:	e001      	b.n	800131a <LoopFillZerobss>

08001316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001318:	3204      	adds	r2, #4

0800131a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800131c:	d3fb      	bcc.n	8001316 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800131e:	f003 f829 	bl	8004374 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001322:	f7ff fb39 	bl	8000998 <main>
  bx  lr    
 8001326:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001328:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800132c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001330:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001334:	08005038 	.word	0x08005038
  ldr r2, =_sbss
 8001338:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 800133c:	20000300 	.word	0x20000300

08001340 <ADC_IRQHandler>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< HEAD
 80032cc:	e7fe      	b.n	80032cc <ADC_IRQHandler>
	...

080032d0 <HAL_Init>:
=======
 8001340:	e7fe      	b.n	8001340 <ADC_IRQHandler>
	...

08001344 <HAL_Init>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003310 <HAL_Init+0x40>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003310 <HAL_Init+0x40>)
 80032da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032de:	6013      	str	r3, [r2, #0]
=======
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001348:	4b0e      	ldr	r3, [pc, #56]	@ (8001384 <HAL_Init+0x40>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a0d      	ldr	r2, [pc, #52]	@ (8001384 <HAL_Init+0x40>)
 800134e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001352:	6013      	str	r3, [r2, #0]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< HEAD
 80032e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003310 <HAL_Init+0x40>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a0a      	ldr	r2, [pc, #40]	@ (8003310 <HAL_Init+0x40>)
 80032e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032ea:	6013      	str	r3, [r2, #0]
=======
 8001354:	4b0b      	ldr	r3, [pc, #44]	@ (8001384 <HAL_Init+0x40>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a0a      	ldr	r2, [pc, #40]	@ (8001384 <HAL_Init+0x40>)
 800135a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800135e:	6013      	str	r3, [r2, #0]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 80032ec:	4b08      	ldr	r3, [pc, #32]	@ (8003310 <HAL_Init+0x40>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a07      	ldr	r2, [pc, #28]	@ (8003310 <HAL_Init+0x40>)
 80032f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032f6:	6013      	str	r3, [r2, #0]
=======
 8001360:	4b08      	ldr	r3, [pc, #32]	@ (8001384 <HAL_Init+0x40>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a07      	ldr	r2, [pc, #28]	@ (8001384 <HAL_Init+0x40>)
 8001366:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800136a:	6013      	str	r3, [r2, #0]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 80032f8:	2003      	movs	r0, #3
 80032fa:	f000 fd4f 	bl	8003d9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032fe:	200f      	movs	r0, #15
 8003300:	f000 f808 	bl	8003314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003304:	f7ff fce8 	bl	8002cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40023c00 	.word	0x40023c00

08003314 <HAL_InitTick>:
=======
 800136c:	2003      	movs	r0, #3
 800136e:	f000 f94f 	bl	8001610 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001372:	200f      	movs	r0, #15
 8001374:	f000 f808 	bl	8001388 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001378:	f7ff fdfa 	bl	8000f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40023c00 	.word	0x40023c00

08001388 <HAL_InitTick>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800331c:	4b12      	ldr	r3, [pc, #72]	@ (8003368 <HAL_InitTick+0x54>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	4b12      	ldr	r3, [pc, #72]	@ (800336c <HAL_InitTick+0x58>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	4619      	mov	r1, r3
 8003326:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800332a:	fbb3 f3f1 	udiv	r3, r3, r1
 800332e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003332:	4618      	mov	r0, r3
 8003334:	f000 fd67 	bl	8003e06 <HAL_SYSTICK_Config>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e00e      	b.n	8003360 <HAL_InitTick+0x4c>
=======
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001390:	4b12      	ldr	r3, [pc, #72]	@ (80013dc <HAL_InitTick+0x54>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b12      	ldr	r3, [pc, #72]	@ (80013e0 <HAL_InitTick+0x58>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4619      	mov	r1, r3
 800139a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800139e:	fbb3 f3f1 	udiv	r3, r3, r1
 80013a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 f967 	bl	800167a <HAL_SYSTICK_Config>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e00e      	b.n	80013d4 <HAL_InitTick+0x4c>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b0f      	cmp	r3, #15
 8003346:	d80a      	bhi.n	800335e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003348:	2200      	movs	r2, #0
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	f04f 30ff 	mov.w	r0, #4294967295
 8003350:	f000 fd2f 	bl	8003db2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003354:	4a06      	ldr	r2, [pc, #24]	@ (8003370 <HAL_InitTick+0x5c>)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6013      	str	r3, [r2, #0]
=======
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b0f      	cmp	r3, #15
 80013ba:	d80a      	bhi.n	80013d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013bc:	2200      	movs	r2, #0
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	f000 f92f 	bl	8001626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c8:	4a06      	ldr	r2, [pc, #24]	@ (80013e4 <HAL_InitTick+0x5c>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6013      	str	r3, [r2, #0]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 800335a:	2300      	movs	r3, #0
 800335c:	e000      	b.n	8003360 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
}
 8003360:	4618      	mov	r0, r3
 8003362:	3708      	adds	r7, #8
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	20000034 	.word	0x20000034
 800336c:	2000003c 	.word	0x2000003c
 8003370:	20000038 	.word	0x20000038

08003374 <HAL_IncTick>:
=======
 80013ce:	2300      	movs	r3, #0
 80013d0:	e000      	b.n	80013d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000030 	.word	0x20000030
 80013e0:	20000038 	.word	0x20000038
 80013e4:	20000034 	.word	0x20000034

080013e8 <HAL_IncTick>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003378:	4b06      	ldr	r3, [pc, #24]	@ (8003394 <HAL_IncTick+0x20>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	461a      	mov	r2, r3
 800337e:	4b06      	ldr	r3, [pc, #24]	@ (8003398 <HAL_IncTick+0x24>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4413      	add	r3, r2
 8003384:	4a04      	ldr	r2, [pc, #16]	@ (8003398 <HAL_IncTick+0x24>)
 8003386:	6013      	str	r3, [r2, #0]
}
 8003388:	bf00      	nop
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	2000003c 	.word	0x2000003c
 8003398:	20000284 	.word	0x20000284

0800339c <HAL_GetTick>:
=======
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013ec:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <HAL_IncTick+0x20>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b06      	ldr	r3, [pc, #24]	@ (800140c <HAL_IncTick+0x24>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4413      	add	r3, r2
 80013f8:	4a04      	ldr	r2, [pc, #16]	@ (800140c <HAL_IncTick+0x24>)
 80013fa:	6013      	str	r3, [r2, #0]
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20000038 	.word	0x20000038
 800140c:	200001b0 	.word	0x200001b0

08001410 <HAL_GetTick>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return uwTick;
 80033a0:	4b03      	ldr	r3, [pc, #12]	@ (80033b0 <HAL_GetTick+0x14>)
 80033a2:	681b      	ldr	r3, [r3, #0]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	20000284 	.word	0x20000284

080033b4 <HAL_Delay>:
=======
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return uwTick;
 8001414:	4b03      	ldr	r3, [pc, #12]	@ (8001424 <HAL_GetTick+0x14>)
 8001416:	681b      	ldr	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	200001b0 	.word	0x200001b0

08001428 <HAL_Delay>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033bc:	f7ff ffee 	bl	800339c <HAL_GetTick>
 80033c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033cc:	d005      	beq.n	80033da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033ce:	4b0a      	ldr	r3, [pc, #40]	@ (80033f8 <HAL_Delay+0x44>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	461a      	mov	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4413      	add	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033da:	bf00      	nop
 80033dc:	f7ff ffde 	bl	800339c <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d8f7      	bhi.n	80033dc <HAL_Delay+0x28>
  {
  }
}
 80033ec:	bf00      	nop
 80033ee:	bf00      	nop
 80033f0:	3710      	adds	r7, #16
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	2000003c 	.word	0x2000003c

080033fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e033      	b.n	800347a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003416:	2b00      	cmp	r3, #0
 8003418:	d109      	bne.n	800342e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7ff fc84 	bl	8002d28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003432:	f003 0310 	and.w	r3, r3, #16
 8003436:	2b00      	cmp	r3, #0
 8003438:	d118      	bne.n	800346c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003442:	f023 0302 	bic.w	r3, r3, #2
 8003446:	f043 0202 	orr.w	r2, r3, #2
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fad8 	bl	8003a04 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345e:	f023 0303 	bic.w	r3, r3, #3
 8003462:	f043 0201 	orr.w	r2, r3, #1
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	641a      	str	r2, [r3, #64]	@ 0x40
 800346a:	e001      	b.n	8003470 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003478:	7bfb      	ldrb	r3, [r7, #15]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003496:	2b01      	cmp	r3, #1
 8003498:	d101      	bne.n	800349e <HAL_ADC_Start+0x1a>
 800349a:	2302      	movs	r3, #2
 800349c:	e0b2      	b.n	8003604 <HAL_ADC_Start+0x180>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d018      	beq.n	80034e6 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0201 	orr.w	r2, r2, #1
 80034c2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034c4:	4b52      	ldr	r3, [pc, #328]	@ (8003610 <HAL_ADC_Start+0x18c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a52      	ldr	r2, [pc, #328]	@ (8003614 <HAL_ADC_Start+0x190>)
 80034ca:	fba2 2303 	umull	r2, r3, r2, r3
 80034ce:	0c9a      	lsrs	r2, r3, #18
 80034d0:	4613      	mov	r3, r2
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	4413      	add	r3, r2
 80034d6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80034d8:	e002      	b.n	80034e0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	3b01      	subs	r3, #1
 80034de:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f9      	bne.n	80034da <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d17a      	bne.n	80035ea <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80034fc:	f023 0301 	bic.w	r3, r3, #1
 8003500:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003512:	2b00      	cmp	r3, #0
 8003514:	d007      	beq.n	8003526 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800351e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800352a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800352e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003532:	d106      	bne.n	8003542 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003538:	f023 0206 	bic.w	r2, r3, #6
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	645a      	str	r2, [r3, #68]	@ 0x44
 8003540:	e002      	b.n	8003548 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003550:	4b31      	ldr	r3, [pc, #196]	@ (8003618 <HAL_ADC_Start+0x194>)
 8003552:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800355c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f003 031f 	and.w	r3, r3, #31
 8003566:	2b00      	cmp	r3, #0
 8003568:	d12a      	bne.n	80035c0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a2b      	ldr	r2, [pc, #172]	@ (800361c <HAL_ADC_Start+0x198>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d015      	beq.n	80035a0 <HAL_ADC_Start+0x11c>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a29      	ldr	r2, [pc, #164]	@ (8003620 <HAL_ADC_Start+0x19c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d105      	bne.n	800358a <HAL_ADC_Start+0x106>
 800357e:	4b26      	ldr	r3, [pc, #152]	@ (8003618 <HAL_ADC_Start+0x194>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f003 031f 	and.w	r3, r3, #31
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a25      	ldr	r2, [pc, #148]	@ (8003624 <HAL_ADC_Start+0x1a0>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d136      	bne.n	8003602 <HAL_ADC_Start+0x17e>
 8003594:	4b20      	ldr	r3, [pc, #128]	@ (8003618 <HAL_ADC_Start+0x194>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f003 0310 	and.w	r3, r3, #16
 800359c:	2b00      	cmp	r3, #0
 800359e:	d130      	bne.n	8003602 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d129      	bne.n	8003602 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80035bc:	609a      	str	r2, [r3, #8]
 80035be:	e020      	b.n	8003602 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a15      	ldr	r2, [pc, #84]	@ (800361c <HAL_ADC_Start+0x198>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d11b      	bne.n	8003602 <HAL_ADC_Start+0x17e>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d114      	bne.n	8003602 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80035e6:	609a      	str	r2, [r3, #8]
 80035e8:	e00b      	b.n	8003602 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ee:	f043 0210 	orr.w	r2, r3, #16
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fa:	f043 0201 	orr.w	r2, r3, #1
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	20000034 	.word	0x20000034
 8003614:	431bde83 	.word	0x431bde83
 8003618:	40012300 	.word	0x40012300
 800361c:	40012000 	.word	0x40012000
 8003620:	40012100 	.word	0x40012100
 8003624:	40012200 	.word	0x40012200

08003628 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003636:	2b01      	cmp	r3, #1
 8003638:	d101      	bne.n	800363e <HAL_ADC_Stop+0x16>
 800363a:	2302      	movs	r3, #2
 800363c:	e021      	b.n	8003682 <HAL_ADC_Stop+0x5a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0201 	bic.w	r2, r2, #1
 8003654:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d109      	bne.n	8003678 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003668:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800366c:	f023 0301 	bic.w	r3, r3, #1
 8003670:	f043 0201 	orr.w	r2, r3, #1
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800368e:	b580      	push	{r7, lr}
 8003690:	b084      	sub	sp, #16
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036aa:	d113      	bne.n	80036d4 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80036b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036ba:	d10b      	bne.n	80036d4 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c0:	f043 0220 	orr.w	r2, r3, #32
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e063      	b.n	800379c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80036d4:	f7ff fe62 	bl	800339c <HAL_GetTick>
 80036d8:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80036da:	e021      	b.n	8003720 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e2:	d01d      	beq.n	8003720 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d007      	beq.n	80036fa <HAL_ADC_PollForConversion+0x6c>
 80036ea:	f7ff fe57 	bl	800339c <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d212      	bcs.n	8003720 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b02      	cmp	r3, #2
 8003706:	d00b      	beq.n	8003720 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370c:	f043 0204 	orr.w	r2, r3, #4
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e03d      	b.n	800379c <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b02      	cmp	r3, #2
 800372c:	d1d6      	bne.n	80036dc <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f06f 0212 	mvn.w	r2, #18
 8003736:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d123      	bne.n	800379a <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003756:	2b00      	cmp	r3, #0
 8003758:	d11f      	bne.n	800379a <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003760:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003764:	2b00      	cmp	r3, #0
 8003766:	d006      	beq.n	8003776 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003772:	2b00      	cmp	r3, #0
 8003774:	d111      	bne.n	800379a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003786:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d105      	bne.n	800379a <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003792:	f043 0201 	orr.w	r2, r3, #1
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
	...

080037c0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80037ca:	2300      	movs	r3, #0
 80037cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d101      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x1c>
 80037d8:	2302      	movs	r3, #2
 80037da:	e105      	b.n	80039e8 <HAL_ADC_ConfigChannel+0x228>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b09      	cmp	r3, #9
 80037ea:	d925      	bls.n	8003838 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68d9      	ldr	r1, [r3, #12]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	461a      	mov	r2, r3
 80037fa:	4613      	mov	r3, r2
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	4413      	add	r3, r2
 8003800:	3b1e      	subs	r3, #30
 8003802:	2207      	movs	r2, #7
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	43da      	mvns	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	400a      	ands	r2, r1
 8003810:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68d9      	ldr	r1, [r3, #12]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	b29b      	uxth	r3, r3
 8003822:	4618      	mov	r0, r3
 8003824:	4603      	mov	r3, r0
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	4403      	add	r3, r0
 800382a:	3b1e      	subs	r3, #30
 800382c:	409a      	lsls	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	60da      	str	r2, [r3, #12]
 8003836:	e022      	b.n	800387e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6919      	ldr	r1, [r3, #16]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	b29b      	uxth	r3, r3
 8003844:	461a      	mov	r2, r3
 8003846:	4613      	mov	r3, r2
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	4413      	add	r3, r2
 800384c:	2207      	movs	r2, #7
 800384e:	fa02 f303 	lsl.w	r3, r2, r3
 8003852:	43da      	mvns	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	400a      	ands	r2, r1
 800385a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6919      	ldr	r1, [r3, #16]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	b29b      	uxth	r3, r3
 800386c:	4618      	mov	r0, r3
 800386e:	4603      	mov	r3, r0
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	4403      	add	r3, r0
 8003874:	409a      	lsls	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b06      	cmp	r3, #6
 8003884:	d824      	bhi.n	80038d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	4613      	mov	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	3b05      	subs	r3, #5
 8003898:	221f      	movs	r2, #31
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43da      	mvns	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	400a      	ands	r2, r1
 80038a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	4618      	mov	r0, r3
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	4613      	mov	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	3b05      	subs	r3, #5
 80038c2:	fa00 f203 	lsl.w	r2, r0, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80038ce:	e04c      	b.n	800396a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	2b0c      	cmp	r3, #12
 80038d6:	d824      	bhi.n	8003922 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	3b23      	subs	r3, #35	@ 0x23
 80038ea:	221f      	movs	r2, #31
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43da      	mvns	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	400a      	ands	r2, r1
 80038f8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	b29b      	uxth	r3, r3
 8003906:	4618      	mov	r0, r3
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	4413      	add	r3, r2
 8003912:	3b23      	subs	r3, #35	@ 0x23
 8003914:	fa00 f203 	lsl.w	r2, r0, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003920:	e023      	b.n	800396a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	4613      	mov	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	3b41      	subs	r3, #65	@ 0x41
 8003934:	221f      	movs	r2, #31
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43da      	mvns	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	400a      	ands	r2, r1
 8003942:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	b29b      	uxth	r3, r3
 8003950:	4618      	mov	r0, r3
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	3b41      	subs	r3, #65	@ 0x41
 800395e:	fa00 f203 	lsl.w	r2, r0, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800396a:	4b22      	ldr	r3, [pc, #136]	@ (80039f4 <HAL_ADC_ConfigChannel+0x234>)
 800396c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a21      	ldr	r2, [pc, #132]	@ (80039f8 <HAL_ADC_ConfigChannel+0x238>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d109      	bne.n	800398c <HAL_ADC_ConfigChannel+0x1cc>
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b12      	cmp	r3, #18
 800397e:	d105      	bne.n	800398c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a19      	ldr	r2, [pc, #100]	@ (80039f8 <HAL_ADC_ConfigChannel+0x238>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d123      	bne.n	80039de <HAL_ADC_ConfigChannel+0x21e>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b10      	cmp	r3, #16
 800399c:	d003      	beq.n	80039a6 <HAL_ADC_ConfigChannel+0x1e6>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b11      	cmp	r3, #17
 80039a4:	d11b      	bne.n	80039de <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b10      	cmp	r3, #16
 80039b8:	d111      	bne.n	80039de <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80039ba:	4b10      	ldr	r3, [pc, #64]	@ (80039fc <HAL_ADC_ConfigChannel+0x23c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a10      	ldr	r2, [pc, #64]	@ (8003a00 <HAL_ADC_ConfigChannel+0x240>)
 80039c0:	fba2 2303 	umull	r2, r3, r2, r3
 80039c4:	0c9a      	lsrs	r2, r3, #18
 80039c6:	4613      	mov	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4413      	add	r3, r2
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80039d0:	e002      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	3b01      	subs	r3, #1
 80039d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f9      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80039e6:	2300      	movs	r3, #0
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	40012300 	.word	0x40012300
 80039f8:	40012000 	.word	0x40012000
 80039fc:	20000034 	.word	0x20000034
 8003a00:	431bde83 	.word	0x431bde83

08003a04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a0c:	4b79      	ldr	r3, [pc, #484]	@ (8003bf4 <ADC_Init+0x1f0>)
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	685a      	ldr	r2, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	431a      	orrs	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6859      	ldr	r1, [r3, #4]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	021a      	lsls	r2, r3, #8
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003a5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6859      	ldr	r1, [r3, #4]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689a      	ldr	r2, [r3, #8]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6899      	ldr	r1, [r3, #8]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	68da      	ldr	r2, [r3, #12]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a96:	4a58      	ldr	r2, [pc, #352]	@ (8003bf8 <ADC_Init+0x1f4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d022      	beq.n	8003ae2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003aaa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6899      	ldr	r1, [r3, #8]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003acc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	6899      	ldr	r1, [r3, #8]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	609a      	str	r2, [r3, #8]
 8003ae0:	e00f      	b.n	8003b02 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003af0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003b00:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0202 	bic.w	r2, r2, #2
 8003b10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6899      	ldr	r1, [r3, #8]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	7e1b      	ldrb	r3, [r3, #24]
 8003b1c:	005a      	lsls	r2, r3, #1
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d01b      	beq.n	8003b68 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b3e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003b4e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6859      	ldr	r1, [r3, #4]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	035a      	lsls	r2, r3, #13
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	605a      	str	r2, [r3, #4]
 8003b66:	e007      	b.n	8003b78 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b76:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003b86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	051a      	lsls	r2, r3, #20
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003bac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	6899      	ldr	r1, [r3, #8]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003bba:	025a      	lsls	r2, r3, #9
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689a      	ldr	r2, [r3, #8]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6899      	ldr	r1, [r3, #8]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	029a      	lsls	r2, r3, #10
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	609a      	str	r2, [r3, #8]
}
 8003be8:	bf00      	nop
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	40012300 	.word	0x40012300
 8003bf8:	0f000001 	.word	0x0f000001

08003bfc <__NVIC_SetPriorityGrouping>:
=======
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001430:	f7ff ffee 	bl	8001410 <HAL_GetTick>
 8001434:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001440:	d005      	beq.n	800144e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001442:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <HAL_Delay+0x44>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	461a      	mov	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4413      	add	r3, r2
 800144c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800144e:	bf00      	nop
 8001450:	f7ff ffde 	bl	8001410 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	429a      	cmp	r2, r3
 800145e:	d8f7      	bhi.n	8001450 <HAL_Delay+0x28>
  {
  }
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000038 	.word	0x20000038

08001470 <__NVIC_SetPriorityGrouping>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c40 <__NVIC_SetPriorityGrouping+0x44>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c18:	4013      	ands	r3, r2
 8003c1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c2e:	4a04      	ldr	r2, [pc, #16]	@ (8003c40 <__NVIC_SetPriorityGrouping+0x44>)
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	60d3      	str	r3, [r2, #12]
}
 8003c34:	bf00      	nop
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	e000ed00 	.word	0xe000ed00

08003c44 <__NVIC_GetPriorityGrouping>:
=======
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001480:	4b0c      	ldr	r3, [pc, #48]	@ (80014b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800148c:	4013      	ands	r3, r2
 800148e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001498:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800149c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a2:	4a04      	ldr	r2, [pc, #16]	@ (80014b4 <__NVIC_SetPriorityGrouping+0x44>)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	60d3      	str	r3, [r2, #12]
}
 80014a8:	bf00      	nop
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <__NVIC_GetPriorityGrouping>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c48:	4b04      	ldr	r3, [pc, #16]	@ (8003c5c <__NVIC_GetPriorityGrouping+0x18>)
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	0a1b      	lsrs	r3, r3, #8
 8003c4e:	f003 0307 	and.w	r3, r3, #7
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr
 8003c5c:	e000ed00 	.word	0xe000ed00

08003c60 <__NVIC_EnableIRQ>:
=======
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014bc:	4b04      	ldr	r3, [pc, #16]	@ (80014d0 <__NVIC_GetPriorityGrouping+0x18>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	0a1b      	lsrs	r3, r3, #8
 80014c2:	f003 0307 	and.w	r3, r3, #7
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <__NVIC_EnableIRQ>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	4603      	mov	r3, r0
 8003c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	db0b      	blt.n	8003c8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c72:	79fb      	ldrb	r3, [r7, #7]
 8003c74:	f003 021f 	and.w	r2, r3, #31
 8003c78:	4907      	ldr	r1, [pc, #28]	@ (8003c98 <__NVIC_EnableIRQ+0x38>)
 8003c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7e:	095b      	lsrs	r3, r3, #5
 8003c80:	2001      	movs	r0, #1
 8003c82:	fa00 f202 	lsl.w	r2, r0, r2
 8003c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	e000e100 	.word	0xe000e100

08003c9c <__NVIC_SetPriority>:
=======
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	db0b      	blt.n	80014fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	f003 021f 	and.w	r2, r3, #31
 80014ec:	4907      	ldr	r1, [pc, #28]	@ (800150c <__NVIC_EnableIRQ+0x38>)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	095b      	lsrs	r3, r3, #5
 80014f4:	2001      	movs	r0, #1
 80014f6:	fa00 f202 	lsl.w	r2, r0, r2
 80014fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000e100 	.word	0xe000e100

08001510 <__NVIC_SetPriority>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	6039      	str	r1, [r7, #0]
 8003ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	db0a      	blt.n	8003cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	490c      	ldr	r1, [pc, #48]	@ (8003ce8 <__NVIC_SetPriority+0x4c>)
 8003cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cba:	0112      	lsls	r2, r2, #4
 8003cbc:	b2d2      	uxtb	r2, r2
 8003cbe:	440b      	add	r3, r1
 8003cc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
=======
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	2b00      	cmp	r3, #0
 8001522:	db0a      	blt.n	800153a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	490c      	ldr	r1, [pc, #48]	@ (800155c <__NVIC_SetPriority+0x4c>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	0112      	lsls	r2, r2, #4
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	440b      	add	r3, r1
 8001534:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8003cc4:	e00a      	b.n	8003cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	b2da      	uxtb	r2, r3
 8003cca:	4908      	ldr	r1, [pc, #32]	@ (8003cec <__NVIC_SetPriority+0x50>)
 8003ccc:	79fb      	ldrb	r3, [r7, #7]
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	3b04      	subs	r3, #4
 8003cd4:	0112      	lsls	r2, r2, #4
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	440b      	add	r3, r1
 8003cda:	761a      	strb	r2, [r3, #24]
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	e000e100 	.word	0xe000e100
 8003cec:	e000ed00 	.word	0xe000ed00

08003cf0 <NVIC_EncodePriority>:
=======
 8001538:	e00a      	b.n	8001550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4908      	ldr	r1, [pc, #32]	@ (8001560 <__NVIC_SetPriority+0x50>)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	3b04      	subs	r3, #4
 8001548:	0112      	lsls	r2, r2, #4
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	440b      	add	r3, r1
 800154e:	761a      	strb	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000e100 	.word	0xe000e100
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <NVIC_EncodePriority>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8003cf0:	b480      	push	{r7}
 8003cf2:	b089      	sub	sp, #36	@ 0x24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	61fb      	str	r3, [r7, #28]
=======
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	@ 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	61fb      	str	r3, [r7, #28]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	f1c3 0307 	rsb	r3, r3, #7
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	bf28      	it	cs
 8003d0e:	2304      	movcs	r3, #4
 8003d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	3304      	adds	r3, #4
 8003d16:	2b06      	cmp	r3, #6
 8003d18:	d902      	bls.n	8003d20 <NVIC_EncodePriority+0x30>
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	3b03      	subs	r3, #3
 8003d1e:	e000      	b.n	8003d22 <NVIC_EncodePriority+0x32>
 8003d20:	2300      	movs	r3, #0
 8003d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d24:	f04f 32ff 	mov.w	r2, #4294967295
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	43da      	mvns	r2, r3
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	401a      	ands	r2, r3
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d38:	f04f 31ff 	mov.w	r1, #4294967295
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d42:	43d9      	mvns	r1, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d48:	4313      	orrs	r3, r2
         );
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3724      	adds	r7, #36	@ 0x24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
	...

08003d58 <SysTick_Config>:
=======
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f1c3 0307 	rsb	r3, r3, #7
 800157e:	2b04      	cmp	r3, #4
 8001580:	bf28      	it	cs
 8001582:	2304      	movcs	r3, #4
 8001584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3304      	adds	r3, #4
 800158a:	2b06      	cmp	r3, #6
 800158c:	d902      	bls.n	8001594 <NVIC_EncodePriority+0x30>
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3b03      	subs	r3, #3
 8001592:	e000      	b.n	8001596 <NVIC_EncodePriority+0x32>
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	f04f 32ff 	mov.w	r2, #4294967295
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43da      	mvns	r2, r3
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	401a      	ands	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ac:	f04f 31ff 	mov.w	r1, #4294967295
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	43d9      	mvns	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	4313      	orrs	r3, r2
         );
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3724      	adds	r7, #36	@ 0x24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <SysTick_Config>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d68:	d301      	bcc.n	8003d6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e00f      	b.n	8003d8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d98 <SysTick_Config+0x40>)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d76:	210f      	movs	r1, #15
 8003d78:	f04f 30ff 	mov.w	r0, #4294967295
 8003d7c:	f7ff ff8e 	bl	8003c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d80:	4b05      	ldr	r3, [pc, #20]	@ (8003d98 <SysTick_Config+0x40>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d86:	4b04      	ldr	r3, [pc, #16]	@ (8003d98 <SysTick_Config+0x40>)
 8003d88:	2207      	movs	r2, #7
 8003d8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	e000e010 	.word	0xe000e010

08003d9c <HAL_NVIC_SetPriorityGrouping>:
=======
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015dc:	d301      	bcc.n	80015e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015de:	2301      	movs	r3, #1
 80015e0:	e00f      	b.n	8001602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e2:	4a0a      	ldr	r2, [pc, #40]	@ (800160c <SysTick_Config+0x40>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ea:	210f      	movs	r1, #15
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	f7ff ff8e 	bl	8001510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f4:	4b05      	ldr	r3, [pc, #20]	@ (800160c <SysTick_Config+0x40>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fa:	4b04      	ldr	r3, [pc, #16]	@ (800160c <SysTick_Config+0x40>)
 80015fc:	2207      	movs	r2, #7
 80015fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	e000e010 	.word	0xe000e010

08001610 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
=======
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff ff29 	bl	8003bfc <__NVIC_SetPriorityGrouping>
}
 8003daa:	bf00      	nop
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_NVIC_SetPriority>:
=======
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ff29 	bl	8001470 <__NVIC_SetPriorityGrouping>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_SetPriority>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b086      	sub	sp, #24
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	4603      	mov	r3, r0
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	607a      	str	r2, [r7, #4]
 8003dbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	617b      	str	r3, [r7, #20]
=======
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8003dc4:	f7ff ff3e 	bl	8003c44 <__NVIC_GetPriorityGrouping>
 8003dc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	68b9      	ldr	r1, [r7, #8]
 8003dce:	6978      	ldr	r0, [r7, #20]
 8003dd0:	f7ff ff8e 	bl	8003cf0 <NVIC_EncodePriority>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dda:	4611      	mov	r1, r2
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff ff5d 	bl	8003c9c <__NVIC_SetPriority>
}
 8003de2:	bf00      	nop
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_NVIC_EnableIRQ>:
=======
 8001638:	f7ff ff3e 	bl	80014b8 <__NVIC_GetPriorityGrouping>
 800163c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	68b9      	ldr	r1, [r7, #8]
 8001642:	6978      	ldr	r0, [r7, #20]
 8001644:	f7ff ff8e 	bl	8001564 <NVIC_EncodePriority>
 8001648:	4602      	mov	r2, r0
 800164a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164e:	4611      	mov	r1, r2
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff ff5d 	bl	8001510 <__NVIC_SetPriority>
}
 8001656:	bf00      	nop
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_NVIC_EnableIRQ>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b082      	sub	sp, #8
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	4603      	mov	r3, r0
 8003df2:	71fb      	strb	r3, [r7, #7]
=======
 800165e:	b580      	push	{r7, lr}
 8001660:	b082      	sub	sp, #8
 8001662:	af00      	add	r7, sp, #0
 8001664:	4603      	mov	r3, r0
 8001666:	71fb      	strb	r3, [r7, #7]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8003df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff ff31 	bl	8003c60 <__NVIC_EnableIRQ>
}
 8003dfe:	bf00      	nop
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_SYSTICK_Config>:
=======
 8001668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff31 	bl	80014d4 <__NVIC_EnableIRQ>
}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_SYSTICK_Config>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b082      	sub	sp, #8
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7ff ffa2 	bl	8003d58 <SysTick_Config>
 8003e14:	4603      	mov	r3, r0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_DMA_Abort>:
=======
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff ffa2 	bl	80015cc <SysTick_Config>
 8001688:	4603      	mov	r3, r0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_DMA_Abort>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b084      	sub	sp, #16
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e2a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e2c:	f7ff fab6 	bl	800339c <HAL_GetTick>
 8003e30:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d008      	beq.n	8003e50 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2280      	movs	r2, #128	@ 0x80
 8003e42:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e052      	b.n	8003ef6 <HAL_DMA_Abort+0xd8>
=======
 8001692:	b580      	push	{r7, lr}
 8001694:	b084      	sub	sp, #16
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800169e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016a0:	f7ff feb6 	bl	8001410 <HAL_GetTick>
 80016a4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d008      	beq.n	80016c4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2280      	movs	r2, #128	@ 0x80
 80016b6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e052      	b.n	800176a <HAL_DMA_Abort+0xd8>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
<<<<<<< HEAD
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0216 	bic.w	r2, r2, #22
 8003e5e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	695a      	ldr	r2, [r3, #20]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e6e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d103      	bne.n	8003e80 <HAL_DMA_Abort+0x62>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d007      	beq.n	8003e90 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0208 	bic.w	r2, r2, #8
 8003e8e:	601a      	str	r2, [r3, #0]
=======
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 0216 	bic.w	r2, r2, #22
 80016d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	695a      	ldr	r2, [r3, #20]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016e2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d103      	bne.n	80016f4 <HAL_DMA_Abort+0x62>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d007      	beq.n	8001704 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0208 	bic.w	r2, r2, #8
 8001702:	601a      	str	r2, [r3, #0]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
<<<<<<< HEAD
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0201 	bic.w	r2, r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ea0:	e013      	b.n	8003eca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ea2:	f7ff fa7b 	bl	800339c <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b05      	cmp	r3, #5
 8003eae:	d90c      	bls.n	8003eca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2203      	movs	r2, #3
 8003eba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e015      	b.n	8003ef6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1e4      	bne.n	8003ea2 <HAL_DMA_Abort+0x84>
=======
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0201 	bic.w	r2, r2, #1
 8001712:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001714:	e013      	b.n	800173e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001716:	f7ff fe7b 	bl	8001410 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b05      	cmp	r3, #5
 8001722:	d90c      	bls.n	800173e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2220      	movs	r2, #32
 8001728:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2203      	movs	r2, #3
 800172e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e015      	b.n	800176a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1e4      	bne.n	8001716 <HAL_DMA_Abort+0x84>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< HEAD
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003edc:	223f      	movs	r2, #63	@ 0x3f
 8003ede:	409a      	lsls	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_DMA_Abort_IT>:
=======
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001750:	223f      	movs	r2, #63	@ 0x3f
 8001752:	409a      	lsls	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_DMA_Abort_IT>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d004      	beq.n	8003f1c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2280      	movs	r2, #128	@ 0x80
 8003f16:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e00c      	b.n	8003f36 <HAL_DMA_Abort_IT+0x38>
=======
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d004      	beq.n	8001790 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2280      	movs	r2, #128	@ 0x80
 800178a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e00c      	b.n	80017aa <HAL_DMA_Abort_IT+0x38>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
<<<<<<< HEAD
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2205      	movs	r2, #5
 8003f20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 0201 	bic.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
	...

08003f44 <HAL_GPIO_Init>:
=======
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2205      	movs	r2, #5
 8001794:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 0201 	bic.w	r2, r2, #1
 80017a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
	...

080017b8 <HAL_GPIO_Init>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8003f44:	b480      	push	{r7}
 8003f46:	b089      	sub	sp, #36	@ 0x24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	61bb      	str	r3, [r7, #24]
=======
 80017b8:	b480      	push	{r7}
 80017ba:	b089      	sub	sp, #36	@ 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61bb      	str	r3, [r7, #24]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61fb      	str	r3, [r7, #28]
 8003f5e:	e16b      	b.n	8004238 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f60:	2201      	movs	r2, #1
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	4013      	ands	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	f040 815a 	bne.w	8004232 <HAL_GPIO_Init+0x2ee>
=======
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
 80017d2:	e16b      	b.n	8001aac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017d4:	2201      	movs	r2, #1
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	f040 815a 	bne.w	8001aa6 <HAL_GPIO_Init+0x2ee>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
<<<<<<< HEAD
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d005      	beq.n	8003f96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d130      	bne.n	8003ff8 <HAL_GPIO_Init+0xb4>
=======
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 0303 	and.w	r3, r3, #3
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d005      	beq.n	800180a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001806:	2b02      	cmp	r3, #2
 8001808:	d130      	bne.n	800186c <HAL_GPIO_Init+0xb4>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< HEAD
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	2203      	movs	r2, #3
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	43db      	mvns	r3, r3
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	4013      	ands	r3, r2
 8003fac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fcc:	2201      	movs	r2, #1
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	4013      	ands	r3, r2
 8003fda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	091b      	lsrs	r3, r3, #4
 8003fe2:	f003 0201 	and.w	r2, r3, #1
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f003 0303 	and.w	r3, r3, #3
 8004000:	2b03      	cmp	r3, #3
 8004002:	d017      	beq.n	8004034 <HAL_GPIO_Init+0xf0>
=======
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	2203      	movs	r2, #3
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001840:	2201      	movs	r2, #1
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	091b      	lsrs	r3, r3, #4
 8001856:	f003 0201 	and.w	r2, r3, #1
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	2b03      	cmp	r3, #3
 8001876:	d017      	beq.n	80018a8 <HAL_GPIO_Init+0xf0>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
<<<<<<< HEAD
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	005b      	lsls	r3, r3, #1
 800400e:	2203      	movs	r2, #3
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	43db      	mvns	r3, r3
 8004016:	69ba      	ldr	r2, [r7, #24]
 8004018:	4013      	ands	r3, r2
 800401a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	689a      	ldr	r2, [r3, #8]
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	4313      	orrs	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	60da      	str	r2, [r3, #12]
=======
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	2203      	movs	r2, #3
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	60da      	str	r2, [r3, #12]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f003 0303 	and.w	r3, r3, #3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d123      	bne.n	8004088 <HAL_GPIO_Init+0x144>
=======
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d123      	bne.n	80018fc <HAL_GPIO_Init+0x144>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	08da      	lsrs	r2, r3, #3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3208      	adds	r2, #8
 8004048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800404c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	f003 0307 	and.w	r3, r3, #7
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	220f      	movs	r2, #15
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	43db      	mvns	r3, r3
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	4013      	ands	r3, r2
 8004062:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	fa02 f303 	lsl.w	r3, r2, r3
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	4313      	orrs	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	08da      	lsrs	r2, r3, #3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	3208      	adds	r2, #8
 8004082:	69b9      	ldr	r1, [r7, #24]
 8004084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	08da      	lsrs	r2, r3, #3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3208      	adds	r2, #8
 80018bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	220f      	movs	r2, #15
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	691a      	ldr	r2, [r3, #16]
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	08da      	lsrs	r2, r3, #3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	3208      	adds	r2, #8
 80018f6:	69b9      	ldr	r1, [r7, #24]
 80018f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	2203      	movs	r2, #3
 8004094:	fa02 f303 	lsl.w	r3, r2, r3
 8004098:	43db      	mvns	r3, r3
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	4013      	ands	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f003 0203 	and.w	r2, r3, #3
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	005b      	lsls	r3, r3, #1
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	601a      	str	r2, [r3, #0]
=======
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	2203      	movs	r2, #3
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 0203 	and.w	r2, r3, #3
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	601a      	str	r2, [r3, #0]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
<<<<<<< HEAD
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 80b4 	beq.w	8004232 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ca:	2300      	movs	r3, #0
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	4b60      	ldr	r3, [pc, #384]	@ (8004250 <HAL_GPIO_Init+0x30c>)
 80040d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040d2:	4a5f      	ldr	r2, [pc, #380]	@ (8004250 <HAL_GPIO_Init+0x30c>)
 80040d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80040da:	4b5d      	ldr	r3, [pc, #372]	@ (8004250 <HAL_GPIO_Init+0x30c>)
 80040dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040e6:	4a5b      	ldr	r2, [pc, #364]	@ (8004254 <HAL_GPIO_Init+0x310>)
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	089b      	lsrs	r3, r3, #2
 80040ec:	3302      	adds	r3, #2
 80040ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	220f      	movs	r2, #15
 80040fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004102:	43db      	mvns	r3, r3
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	4013      	ands	r3, r2
 8004108:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a52      	ldr	r2, [pc, #328]	@ (8004258 <HAL_GPIO_Init+0x314>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d02b      	beq.n	800416a <HAL_GPIO_Init+0x226>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a51      	ldr	r2, [pc, #324]	@ (800425c <HAL_GPIO_Init+0x318>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d025      	beq.n	8004166 <HAL_GPIO_Init+0x222>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a50      	ldr	r2, [pc, #320]	@ (8004260 <HAL_GPIO_Init+0x31c>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d01f      	beq.n	8004162 <HAL_GPIO_Init+0x21e>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a4f      	ldr	r2, [pc, #316]	@ (8004264 <HAL_GPIO_Init+0x320>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d019      	beq.n	800415e <HAL_GPIO_Init+0x21a>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a4e      	ldr	r2, [pc, #312]	@ (8004268 <HAL_GPIO_Init+0x324>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d013      	beq.n	800415a <HAL_GPIO_Init+0x216>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a4d      	ldr	r2, [pc, #308]	@ (800426c <HAL_GPIO_Init+0x328>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d00d      	beq.n	8004156 <HAL_GPIO_Init+0x212>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a4c      	ldr	r2, [pc, #304]	@ (8004270 <HAL_GPIO_Init+0x32c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d007      	beq.n	8004152 <HAL_GPIO_Init+0x20e>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a4b      	ldr	r2, [pc, #300]	@ (8004274 <HAL_GPIO_Init+0x330>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d101      	bne.n	800414e <HAL_GPIO_Init+0x20a>
 800414a:	2307      	movs	r3, #7
 800414c:	e00e      	b.n	800416c <HAL_GPIO_Init+0x228>
 800414e:	2308      	movs	r3, #8
 8004150:	e00c      	b.n	800416c <HAL_GPIO_Init+0x228>
 8004152:	2306      	movs	r3, #6
 8004154:	e00a      	b.n	800416c <HAL_GPIO_Init+0x228>
 8004156:	2305      	movs	r3, #5
 8004158:	e008      	b.n	800416c <HAL_GPIO_Init+0x228>
 800415a:	2304      	movs	r3, #4
 800415c:	e006      	b.n	800416c <HAL_GPIO_Init+0x228>
 800415e:	2303      	movs	r3, #3
 8004160:	e004      	b.n	800416c <HAL_GPIO_Init+0x228>
 8004162:	2302      	movs	r3, #2
 8004164:	e002      	b.n	800416c <HAL_GPIO_Init+0x228>
 8004166:	2301      	movs	r3, #1
 8004168:	e000      	b.n	800416c <HAL_GPIO_Init+0x228>
 800416a:	2300      	movs	r3, #0
 800416c:	69fa      	ldr	r2, [r7, #28]
 800416e:	f002 0203 	and.w	r2, r2, #3
 8004172:	0092      	lsls	r2, r2, #2
 8004174:	4093      	lsls	r3, r2
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	4313      	orrs	r3, r2
 800417a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800417c:	4935      	ldr	r1, [pc, #212]	@ (8004254 <HAL_GPIO_Init+0x310>)
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	089b      	lsrs	r3, r3, #2
 8004182:	3302      	adds	r3, #2
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800418a:	4b3b      	ldr	r3, [pc, #236]	@ (8004278 <HAL_GPIO_Init+0x334>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	43db      	mvns	r3, r3
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	4013      	ands	r3, r2
 8004198:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80041a6:	69ba      	ldr	r2, [r7, #24]
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041ae:	4a32      	ldr	r2, [pc, #200]	@ (8004278 <HAL_GPIO_Init+0x334>)
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041b4:	4b30      	ldr	r3, [pc, #192]	@ (8004278 <HAL_GPIO_Init+0x334>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	43db      	mvns	r3, r3
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	4013      	ands	r3, r2
 80041c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041d8:	4a27      	ldr	r2, [pc, #156]	@ (8004278 <HAL_GPIO_Init+0x334>)
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041de:	4b26      	ldr	r3, [pc, #152]	@ (8004278 <HAL_GPIO_Init+0x334>)
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	43db      	mvns	r3, r3
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	4013      	ands	r3, r2
 80041ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	4313      	orrs	r3, r2
 8004200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004202:	4a1d      	ldr	r2, [pc, #116]	@ (8004278 <HAL_GPIO_Init+0x334>)
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004208:	4b1b      	ldr	r3, [pc, #108]	@ (8004278 <HAL_GPIO_Init+0x334>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	43db      	mvns	r3, r3
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	4013      	ands	r3, r2
 8004216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	4313      	orrs	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800422c:	4a12      	ldr	r2, [pc, #72]	@ (8004278 <HAL_GPIO_Init+0x334>)
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	3301      	adds	r3, #1
 8004236:	61fb      	str	r3, [r7, #28]
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	2b0f      	cmp	r3, #15
 800423c:	f67f ae90 	bls.w	8003f60 <HAL_GPIO_Init+0x1c>
=======
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001938:	2b00      	cmp	r3, #0
 800193a:	f000 80b4 	beq.w	8001aa6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	4b60      	ldr	r3, [pc, #384]	@ (8001ac4 <HAL_GPIO_Init+0x30c>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001946:	4a5f      	ldr	r2, [pc, #380]	@ (8001ac4 <HAL_GPIO_Init+0x30c>)
 8001948:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800194c:	6453      	str	r3, [r2, #68]	@ 0x44
 800194e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ac4 <HAL_GPIO_Init+0x30c>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001952:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800195a:	4a5b      	ldr	r2, [pc, #364]	@ (8001ac8 <HAL_GPIO_Init+0x310>)
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	089b      	lsrs	r3, r3, #2
 8001960:	3302      	adds	r3, #2
 8001962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001966:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	220f      	movs	r2, #15
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4013      	ands	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a52      	ldr	r2, [pc, #328]	@ (8001acc <HAL_GPIO_Init+0x314>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d02b      	beq.n	80019de <HAL_GPIO_Init+0x226>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a51      	ldr	r2, [pc, #324]	@ (8001ad0 <HAL_GPIO_Init+0x318>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d025      	beq.n	80019da <HAL_GPIO_Init+0x222>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a50      	ldr	r2, [pc, #320]	@ (8001ad4 <HAL_GPIO_Init+0x31c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d01f      	beq.n	80019d6 <HAL_GPIO_Init+0x21e>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a4f      	ldr	r2, [pc, #316]	@ (8001ad8 <HAL_GPIO_Init+0x320>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d019      	beq.n	80019d2 <HAL_GPIO_Init+0x21a>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a4e      	ldr	r2, [pc, #312]	@ (8001adc <HAL_GPIO_Init+0x324>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d013      	beq.n	80019ce <HAL_GPIO_Init+0x216>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a4d      	ldr	r2, [pc, #308]	@ (8001ae0 <HAL_GPIO_Init+0x328>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d00d      	beq.n	80019ca <HAL_GPIO_Init+0x212>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a4c      	ldr	r2, [pc, #304]	@ (8001ae4 <HAL_GPIO_Init+0x32c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d007      	beq.n	80019c6 <HAL_GPIO_Init+0x20e>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a4b      	ldr	r2, [pc, #300]	@ (8001ae8 <HAL_GPIO_Init+0x330>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d101      	bne.n	80019c2 <HAL_GPIO_Init+0x20a>
 80019be:	2307      	movs	r3, #7
 80019c0:	e00e      	b.n	80019e0 <HAL_GPIO_Init+0x228>
 80019c2:	2308      	movs	r3, #8
 80019c4:	e00c      	b.n	80019e0 <HAL_GPIO_Init+0x228>
 80019c6:	2306      	movs	r3, #6
 80019c8:	e00a      	b.n	80019e0 <HAL_GPIO_Init+0x228>
 80019ca:	2305      	movs	r3, #5
 80019cc:	e008      	b.n	80019e0 <HAL_GPIO_Init+0x228>
 80019ce:	2304      	movs	r3, #4
 80019d0:	e006      	b.n	80019e0 <HAL_GPIO_Init+0x228>
 80019d2:	2303      	movs	r3, #3
 80019d4:	e004      	b.n	80019e0 <HAL_GPIO_Init+0x228>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e002      	b.n	80019e0 <HAL_GPIO_Init+0x228>
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <HAL_GPIO_Init+0x228>
 80019de:	2300      	movs	r3, #0
 80019e0:	69fa      	ldr	r2, [r7, #28]
 80019e2:	f002 0203 	and.w	r2, r2, #3
 80019e6:	0092      	lsls	r2, r2, #2
 80019e8:	4093      	lsls	r3, r2
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019f0:	4935      	ldr	r1, [pc, #212]	@ (8001ac8 <HAL_GPIO_Init+0x310>)
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	089b      	lsrs	r3, r3, #2
 80019f6:	3302      	adds	r3, #2
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019fe:	4b3b      	ldr	r3, [pc, #236]	@ (8001aec <HAL_GPIO_Init+0x334>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a22:	4a32      	ldr	r2, [pc, #200]	@ (8001aec <HAL_GPIO_Init+0x334>)
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a28:	4b30      	ldr	r3, [pc, #192]	@ (8001aec <HAL_GPIO_Init+0x334>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d003      	beq.n	8001a4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a4c:	4a27      	ldr	r2, [pc, #156]	@ (8001aec <HAL_GPIO_Init+0x334>)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a52:	4b26      	ldr	r3, [pc, #152]	@ (8001aec <HAL_GPIO_Init+0x334>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a76:	4a1d      	ldr	r2, [pc, #116]	@ (8001aec <HAL_GPIO_Init+0x334>)
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001aec <HAL_GPIO_Init+0x334>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d003      	beq.n	8001aa0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aa0:	4a12      	ldr	r2, [pc, #72]	@ (8001aec <HAL_GPIO_Init+0x334>)
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	61fb      	str	r3, [r7, #28]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	2b0f      	cmp	r3, #15
 8001ab0:	f67f ae90 	bls.w	80017d4 <HAL_GPIO_Init+0x1c>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      }
    }
  }
}
<<<<<<< HEAD
 8004240:	bf00      	nop
 8004242:	bf00      	nop
 8004244:	3724      	adds	r7, #36	@ 0x24
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	40023800 	.word	0x40023800
 8004254:	40013800 	.word	0x40013800
 8004258:	40020000 	.word	0x40020000
 800425c:	40020400 	.word	0x40020400
 8004260:	40020800 	.word	0x40020800
 8004264:	40020c00 	.word	0x40020c00
 8004268:	40021000 	.word	0x40021000
 800426c:	40021400 	.word	0x40021400
 8004270:	40021800 	.word	0x40021800
 8004274:	40021c00 	.word	0x40021c00
 8004278:	40013c00 	.word	0x40013c00

0800427c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800427c:	b480      	push	{r7}
 800427e:	b085      	sub	sp, #20
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	460b      	mov	r3, r1
 8004286:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	887b      	ldrh	r3, [r7, #2]
 800428e:	4013      	ands	r3, r2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d002      	beq.n	800429a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004294:	2301      	movs	r3, #1
 8004296:	73fb      	strb	r3, [r7, #15]
 8004298:	e001      	b.n	800429e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800429a:	2300      	movs	r3, #0
 800429c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800429e:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_GPIO_WritePin>:
=======
 8001ab4:	bf00      	nop
 8001ab6:	bf00      	nop
 8001ab8:	3724      	adds	r7, #36	@ 0x24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40013800 	.word	0x40013800
 8001acc:	40020000 	.word	0x40020000
 8001ad0:	40020400 	.word	0x40020400
 8001ad4:	40020800 	.word	0x40020800
 8001ad8:	40020c00 	.word	0x40020c00
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40021400 	.word	0x40021400
 8001ae4:	40021800 	.word	0x40021800
 8001ae8:	40021c00 	.word	0x40021c00
 8001aec:	40013c00 	.word	0x40013c00

08001af0 <HAL_GPIO_WritePin>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	460b      	mov	r3, r1
 80042b6:	807b      	strh	r3, [r7, #2]
 80042b8:	4613      	mov	r3, r2
 80042ba:	707b      	strb	r3, [r7, #1]
=======
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	807b      	strh	r3, [r7, #2]
 8001afc:	4613      	mov	r3, r2
 8001afe:	707b      	strb	r3, [r7, #1]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 80042bc:	787b      	ldrb	r3, [r7, #1]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042c2:	887a      	ldrh	r2, [r7, #2]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	619a      	str	r2, [r3, #24]
=======
 8001b00:	787b      	ldrb	r3, [r7, #1]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b06:	887a      	ldrh	r2, [r7, #2]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	619a      	str	r2, [r3, #24]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< HEAD
 80042c8:	e003      	b.n	80042d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042ca:	887b      	ldrh	r3, [r7, #2]
 80042cc:	041a      	lsls	r2, r3, #16
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	619a      	str	r2, [r3, #24]
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
	...

080042e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	4603      	mov	r3, r0
 80042e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80042ea:	4b08      	ldr	r3, [pc, #32]	@ (800430c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042ec:	695a      	ldr	r2, [r3, #20]
 80042ee:	88fb      	ldrh	r3, [r7, #6]
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d006      	beq.n	8004304 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042f6:	4a05      	ldr	r2, [pc, #20]	@ (800430c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042f8:	88fb      	ldrh	r3, [r7, #6]
 80042fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042fc:	88fb      	ldrh	r3, [r7, #6]
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 f806 	bl	8004310 <HAL_GPIO_EXTI_Callback>
  }
}
 8004304:	bf00      	nop
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40013c00 	.word	0x40013c00

08004310 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	4603      	mov	r3, r0
 8004318:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800431a:	bf00      	nop
 800431c:	370c      	adds	r7, #12
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
	...

08004328 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d101      	bne.n	800433a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e12b      	b.n	8004592 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d106      	bne.n	8004354 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7fe fd2e 	bl	8002db0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2224      	movs	r2, #36	@ 0x24
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0201 	bic.w	r2, r2, #1
 800436a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800437a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800438a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800438c:	f001 f8da 	bl	8005544 <HAL_RCC_GetPCLK1Freq>
 8004390:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	4a81      	ldr	r2, [pc, #516]	@ (800459c <HAL_I2C_Init+0x274>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d807      	bhi.n	80043ac <HAL_I2C_Init+0x84>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4a80      	ldr	r2, [pc, #512]	@ (80045a0 <HAL_I2C_Init+0x278>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	bf94      	ite	ls
 80043a4:	2301      	movls	r3, #1
 80043a6:	2300      	movhi	r3, #0
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	e006      	b.n	80043ba <HAL_I2C_Init+0x92>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4a7d      	ldr	r2, [pc, #500]	@ (80045a4 <HAL_I2C_Init+0x27c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	bf94      	ite	ls
 80043b4:	2301      	movls	r3, #1
 80043b6:	2300      	movhi	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e0e7      	b.n	8004592 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4a78      	ldr	r2, [pc, #480]	@ (80045a8 <HAL_I2C_Init+0x280>)
 80043c6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ca:	0c9b      	lsrs	r3, r3, #18
 80043cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	430a      	orrs	r2, r1
 80043e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	4a6a      	ldr	r2, [pc, #424]	@ (800459c <HAL_I2C_Init+0x274>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d802      	bhi.n	80043fc <HAL_I2C_Init+0xd4>
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	3301      	adds	r3, #1
 80043fa:	e009      	b.n	8004410 <HAL_I2C_Init+0xe8>
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004402:	fb02 f303 	mul.w	r3, r2, r3
 8004406:	4a69      	ldr	r2, [pc, #420]	@ (80045ac <HAL_I2C_Init+0x284>)
 8004408:	fba2 2303 	umull	r2, r3, r2, r3
 800440c:	099b      	lsrs	r3, r3, #6
 800440e:	3301      	adds	r3, #1
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	430b      	orrs	r3, r1
 8004416:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004422:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	495c      	ldr	r1, [pc, #368]	@ (800459c <HAL_I2C_Init+0x274>)
 800442c:	428b      	cmp	r3, r1
 800442e:	d819      	bhi.n	8004464 <HAL_I2C_Init+0x13c>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	1e59      	subs	r1, r3, #1
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	fbb1 f3f3 	udiv	r3, r1, r3
 800443e:	1c59      	adds	r1, r3, #1
 8004440:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004444:	400b      	ands	r3, r1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <HAL_I2C_Init+0x138>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	1e59      	subs	r1, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	fbb1 f3f3 	udiv	r3, r1, r3
 8004458:	3301      	adds	r3, #1
 800445a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800445e:	e051      	b.n	8004504 <HAL_I2C_Init+0x1dc>
 8004460:	2304      	movs	r3, #4
 8004462:	e04f      	b.n	8004504 <HAL_I2C_Init+0x1dc>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d111      	bne.n	8004490 <HAL_I2C_Init+0x168>
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	1e58      	subs	r0, r3, #1
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6859      	ldr	r1, [r3, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	440b      	add	r3, r1
 800447a:	fbb0 f3f3 	udiv	r3, r0, r3
 800447e:	3301      	adds	r3, #1
 8004480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004484:	2b00      	cmp	r3, #0
 8004486:	bf0c      	ite	eq
 8004488:	2301      	moveq	r3, #1
 800448a:	2300      	movne	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	e012      	b.n	80044b6 <HAL_I2C_Init+0x18e>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	1e58      	subs	r0, r3, #1
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6859      	ldr	r1, [r3, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	0099      	lsls	r1, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80044a6:	3301      	adds	r3, #1
 80044a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	bf0c      	ite	eq
 80044b0:	2301      	moveq	r3, #1
 80044b2:	2300      	movne	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <HAL_I2C_Init+0x196>
 80044ba:	2301      	movs	r3, #1
 80044bc:	e022      	b.n	8004504 <HAL_I2C_Init+0x1dc>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10e      	bne.n	80044e4 <HAL_I2C_Init+0x1bc>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	1e58      	subs	r0, r3, #1
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6859      	ldr	r1, [r3, #4]
 80044ce:	460b      	mov	r3, r1
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	440b      	add	r3, r1
 80044d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80044d8:	3301      	adds	r3, #1
 80044da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80044e2:	e00f      	b.n	8004504 <HAL_I2C_Init+0x1dc>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	1e58      	subs	r0, r3, #1
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6859      	ldr	r1, [r3, #4]
 80044ec:	460b      	mov	r3, r1
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	0099      	lsls	r1, r3, #2
 80044f4:	440b      	add	r3, r1
 80044f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80044fa:	3301      	adds	r3, #1
 80044fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004500:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004504:	6879      	ldr	r1, [r7, #4]
 8004506:	6809      	ldr	r1, [r1, #0]
 8004508:	4313      	orrs	r3, r2
 800450a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69da      	ldr	r2, [r3, #28]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004532:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6911      	ldr	r1, [r2, #16]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	68d2      	ldr	r2, [r2, #12]
 800453e:	4311      	orrs	r1, r2
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	6812      	ldr	r2, [r2, #0]
 8004544:	430b      	orrs	r3, r1
 8004546:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695a      	ldr	r2, [r3, #20]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0201 	orr.w	r2, r2, #1
 8004572:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2220      	movs	r2, #32
 800457e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	000186a0 	.word	0x000186a0
 80045a0:	001e847f 	.word	0x001e847f
 80045a4:	003d08ff 	.word	0x003d08ff
 80045a8:	431bde83 	.word	0x431bde83
 80045ac:	10624dd3 	.word	0x10624dd3

080045b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b088      	sub	sp, #32
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	607a      	str	r2, [r7, #4]
 80045ba:	461a      	mov	r2, r3
 80045bc:	460b      	mov	r3, r1
 80045be:	817b      	strh	r3, [r7, #10]
 80045c0:	4613      	mov	r3, r2
 80045c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045c4:	f7fe feea 	bl	800339c <HAL_GetTick>
 80045c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b20      	cmp	r3, #32
 80045d4:	f040 80e0 	bne.w	8004798 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	2319      	movs	r3, #25
 80045de:	2201      	movs	r2, #1
 80045e0:	4970      	ldr	r1, [pc, #448]	@ (80047a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 f964 	bl	80048b0 <I2C_WaitOnFlagUntilTimeout>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80045ee:	2302      	movs	r3, #2
 80045f0:	e0d3      	b.n	800479a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_I2C_Master_Transmit+0x50>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e0cc      	b.n	800479a <HAL_I2C_Master_Transmit+0x1ea>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0301 	and.w	r3, r3, #1
 8004612:	2b01      	cmp	r3, #1
 8004614:	d007      	beq.n	8004626 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f042 0201 	orr.w	r2, r2, #1
 8004624:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004634:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2221      	movs	r2, #33	@ 0x21
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2210      	movs	r2, #16
 8004642:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	893a      	ldrh	r2, [r7, #8]
 8004656:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4a50      	ldr	r2, [pc, #320]	@ (80047a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004666:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004668:	8979      	ldrh	r1, [r7, #10]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	6a3a      	ldr	r2, [r7, #32]
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 f89c 	bl	80047ac <I2C_MasterRequestWrite>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e08d      	b.n	800479a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800467e:	2300      	movs	r3, #0
 8004680:	613b      	str	r3, [r7, #16]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004694:	e066      	b.n	8004764 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	6a39      	ldr	r1, [r7, #32]
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 fa22 	bl	8004ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00d      	beq.n	80046c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d107      	bne.n	80046be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e06b      	b.n	800479a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c6:	781a      	ldrb	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046dc:	b29b      	uxth	r3, r3
 80046de:	3b01      	subs	r3, #1
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ea:	3b01      	subs	r3, #1
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	d11b      	bne.n	8004738 <HAL_I2C_Master_Transmit+0x188>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004704:	2b00      	cmp	r3, #0
 8004706:	d017      	beq.n	8004738 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470c:	781a      	ldrb	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004722:	b29b      	uxth	r3, r3
 8004724:	3b01      	subs	r3, #1
 8004726:	b29a      	uxth	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004730:	3b01      	subs	r3, #1
 8004732:	b29a      	uxth	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	6a39      	ldr	r1, [r7, #32]
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 fa19 	bl	8004b74 <I2C_WaitOnBTFFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00d      	beq.n	8004764 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800474c:	2b04      	cmp	r3, #4
 800474e:	d107      	bne.n	8004760 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800475e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e01a      	b.n	800479a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004768:	2b00      	cmp	r3, #0
 800476a:	d194      	bne.n	8004696 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800477a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2220      	movs	r2, #32
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	e000      	b.n	800479a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004798:	2302      	movs	r3, #2
  }
}
 800479a:	4618      	mov	r0, r3
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	00100002 	.word	0x00100002
 80047a8:	ffff0000 	.word	0xffff0000

080047ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af02      	add	r7, sp, #8
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	607a      	str	r2, [r7, #4]
 80047b6:	603b      	str	r3, [r7, #0]
 80047b8:	460b      	mov	r3, r1
 80047ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	2b08      	cmp	r3, #8
 80047c6:	d006      	beq.n	80047d6 <I2C_MasterRequestWrite+0x2a>
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d003      	beq.n	80047d6 <I2C_MasterRequestWrite+0x2a>
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047d4:	d108      	bne.n	80047e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	e00b      	b.n	8004800 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ec:	2b12      	cmp	r3, #18
 80047ee:	d107      	bne.n	8004800 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 f84f 	bl	80048b0 <I2C_WaitOnFlagUntilTimeout>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00d      	beq.n	8004834 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004822:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004826:	d103      	bne.n	8004830 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800482e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e035      	b.n	80048a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800483c:	d108      	bne.n	8004850 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800483e:	897b      	ldrh	r3, [r7, #10]
 8004840:	b2db      	uxtb	r3, r3
 8004842:	461a      	mov	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800484c:	611a      	str	r2, [r3, #16]
 800484e:	e01b      	b.n	8004888 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004850:	897b      	ldrh	r3, [r7, #10]
 8004852:	11db      	asrs	r3, r3, #7
 8004854:	b2db      	uxtb	r3, r3
 8004856:	f003 0306 	and.w	r3, r3, #6
 800485a:	b2db      	uxtb	r3, r3
 800485c:	f063 030f 	orn	r3, r3, #15
 8004860:	b2da      	uxtb	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	490e      	ldr	r1, [pc, #56]	@ (80048a8 <I2C_MasterRequestWrite+0xfc>)
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f000 f898 	bl	80049a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e010      	b.n	80048a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800487e:	897b      	ldrh	r3, [r7, #10]
 8004880:	b2da      	uxtb	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	4907      	ldr	r1, [pc, #28]	@ (80048ac <I2C_MasterRequestWrite+0x100>)
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 f888 	bl	80049a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3718      	adds	r7, #24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	00010008 	.word	0x00010008
 80048ac:	00010002 	.word	0x00010002

080048b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	4613      	mov	r3, r2
 80048be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048c0:	e048      	b.n	8004954 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c8:	d044      	beq.n	8004954 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ca:	f7fe fd67 	bl	800339c <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d302      	bcc.n	80048e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d139      	bne.n	8004954 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	0c1b      	lsrs	r3, r3, #16
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d10d      	bne.n	8004906 <I2C_WaitOnFlagUntilTimeout+0x56>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	43da      	mvns	r2, r3
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	4013      	ands	r3, r2
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	bf0c      	ite	eq
 80048fc:	2301      	moveq	r3, #1
 80048fe:	2300      	movne	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	461a      	mov	r2, r3
 8004904:	e00c      	b.n	8004920 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	43da      	mvns	r2, r3
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	4013      	ands	r3, r2
 8004912:	b29b      	uxth	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	bf0c      	ite	eq
 8004918:	2301      	moveq	r3, #1
 800491a:	2300      	movne	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	461a      	mov	r2, r3
 8004920:	79fb      	ldrb	r3, [r7, #7]
 8004922:	429a      	cmp	r2, r3
 8004924:	d116      	bne.n	8004954 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2220      	movs	r2, #32
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004940:	f043 0220 	orr.w	r2, r3, #32
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e023      	b.n	800499c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	0c1b      	lsrs	r3, r3, #16
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b01      	cmp	r3, #1
 800495c:	d10d      	bne.n	800497a <I2C_WaitOnFlagUntilTimeout+0xca>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	43da      	mvns	r2, r3
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	4013      	ands	r3, r2
 800496a:	b29b      	uxth	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	bf0c      	ite	eq
 8004970:	2301      	moveq	r3, #1
 8004972:	2300      	movne	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	461a      	mov	r2, r3
 8004978:	e00c      	b.n	8004994 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	43da      	mvns	r2, r3
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	4013      	ands	r3, r2
 8004986:	b29b      	uxth	r3, r3
 8004988:	2b00      	cmp	r3, #0
 800498a:	bf0c      	ite	eq
 800498c:	2301      	moveq	r3, #1
 800498e:	2300      	movne	r3, #0
 8004990:	b2db      	uxtb	r3, r3
 8004992:	461a      	mov	r2, r3
 8004994:	79fb      	ldrb	r3, [r7, #7]
 8004996:	429a      	cmp	r2, r3
 8004998:	d093      	beq.n	80048c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
 80049b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049b2:	e071      	b.n	8004a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049c2:	d123      	bne.n	8004a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80049dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f8:	f043 0204 	orr.w	r2, r3, #4
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e067      	b.n	8004adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a12:	d041      	beq.n	8004a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a14:	f7fe fcc2 	bl	800339c <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d302      	bcc.n	8004a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d136      	bne.n	8004a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	0c1b      	lsrs	r3, r3, #16
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d10c      	bne.n	8004a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	695b      	ldr	r3, [r3, #20]
 8004a3a:	43da      	mvns	r2, r3
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	bf14      	ite	ne
 8004a46:	2301      	movne	r3, #1
 8004a48:	2300      	moveq	r3, #0
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	e00b      	b.n	8004a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	43da      	mvns	r2, r3
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	4013      	ands	r3, r2
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	bf14      	ite	ne
 8004a60:	2301      	movne	r3, #1
 8004a62:	2300      	moveq	r3, #0
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d016      	beq.n	8004a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a84:	f043 0220 	orr.w	r2, r3, #32
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e021      	b.n	8004adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	0c1b      	lsrs	r3, r3, #16
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d10c      	bne.n	8004abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	695b      	ldr	r3, [r3, #20]
 8004aa8:	43da      	mvns	r2, r3
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	4013      	ands	r3, r2
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	bf14      	ite	ne
 8004ab4:	2301      	movne	r3, #1
 8004ab6:	2300      	moveq	r3, #0
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	e00b      	b.n	8004ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	43da      	mvns	r2, r3
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	bf14      	ite	ne
 8004ace:	2301      	movne	r3, #1
 8004ad0:	2300      	moveq	r3, #0
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f47f af6d 	bne.w	80049b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004af0:	e034      	b.n	8004b5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 f886 	bl	8004c04 <I2C_IsAcknowledgeFailed>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e034      	b.n	8004b6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b08:	d028      	beq.n	8004b5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b0a:	f7fe fc47 	bl	800339c <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d302      	bcc.n	8004b20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d11d      	bne.n	8004b5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b2a:	2b80      	cmp	r3, #128	@ 0x80
 8004b2c:	d016      	beq.n	8004b5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b48:	f043 0220 	orr.w	r2, r3, #32
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e007      	b.n	8004b6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b66:	2b80      	cmp	r3, #128	@ 0x80
 8004b68:	d1c3      	bne.n	8004af2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b80:	e034      	b.n	8004bec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 f83e 	bl	8004c04 <I2C_IsAcknowledgeFailed>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e034      	b.n	8004bfc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b98:	d028      	beq.n	8004bec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b9a:	f7fe fbff 	bl	800339c <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d302      	bcc.n	8004bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d11d      	bne.n	8004bec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	f003 0304 	and.w	r3, r3, #4
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	d016      	beq.n	8004bec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd8:	f043 0220 	orr.w	r2, r3, #32
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e007      	b.n	8004bfc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	f003 0304 	and.w	r3, r3, #4
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d1c3      	bne.n	8004b82 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c1a:	d11b      	bne.n	8004c54 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c24:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c40:	f043 0204 	orr.w	r2, r3, #4
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e000      	b.n	8004c56 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
	...

08004c64 <HAL_RCC_OscConfig>:
=======
 8001b0c:	e003      	b.n	8001b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b0e:	887b      	ldrh	r3, [r7, #2]
 8001b10:	041a      	lsls	r2, r3, #16
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	619a      	str	r2, [r3, #24]
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
	...

08001b24 <HAL_RCC_OscConfig>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
=======
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e267      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
=======
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e267      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d075      	beq.n	8004d6e <HAL_RCC_OscConfig+0x10a>
=======
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d075      	beq.n	8001c2e <HAL_RCC_OscConfig+0x10a>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
<<<<<<< HEAD
 8004c82:	4b88      	ldr	r3, [pc, #544]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 030c 	and.w	r3, r3, #12
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	d00c      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c8e:	4b85      	ldr	r3, [pc, #532]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c96:	2b08      	cmp	r3, #8
 8004c98:	d112      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c9a:	4b82      	ldr	r3, [pc, #520]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ca2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ca6:	d10b      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca8:	4b7e      	ldr	r3, [pc, #504]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d05b      	beq.n	8004d6c <HAL_RCC_OscConfig+0x108>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d157      	bne.n	8004d6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e242      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
=======
 8001b42:	4b88      	ldr	r3, [pc, #544]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d00c      	beq.n	8001b68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b4e:	4b85      	ldr	r3, [pc, #532]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	d112      	bne.n	8001b80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b5a:	4b82      	ldr	r3, [pc, #520]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b66:	d10b      	bne.n	8001b80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b68:	4b7e      	ldr	r3, [pc, #504]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d05b      	beq.n	8001c2c <HAL_RCC_OscConfig+0x108>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d157      	bne.n	8001c2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e242      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cc8:	d106      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x74>
 8004cca:	4b76      	ldr	r3, [pc, #472]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a75      	ldr	r2, [pc, #468]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004cd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cd4:	6013      	str	r3, [r2, #0]
 8004cd6:	e01d      	b.n	8004d14 <HAL_RCC_OscConfig+0xb0>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ce0:	d10c      	bne.n	8004cfc <HAL_RCC_OscConfig+0x98>
 8004ce2:	4b70      	ldr	r3, [pc, #448]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a6f      	ldr	r2, [pc, #444]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004ce8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	4b6d      	ldr	r3, [pc, #436]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a6c      	ldr	r2, [pc, #432]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004cf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	e00b      	b.n	8004d14 <HAL_RCC_OscConfig+0xb0>
 8004cfc:	4b69      	ldr	r3, [pc, #420]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a68      	ldr	r2, [pc, #416]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004d02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	4b66      	ldr	r3, [pc, #408]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a65      	ldr	r2, [pc, #404]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004d0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d013      	beq.n	8004d44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d1c:	f7fe fb3e 	bl	800339c <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d24:	f7fe fb3a 	bl	800339c <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b64      	cmp	r3, #100	@ 0x64
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e207      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d36:	4b5b      	ldr	r3, [pc, #364]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0f0      	beq.n	8004d24 <HAL_RCC_OscConfig+0xc0>
 8004d42:	e014      	b.n	8004d6e <HAL_RCC_OscConfig+0x10a>
=======
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b88:	d106      	bne.n	8001b98 <HAL_RCC_OscConfig+0x74>
 8001b8a:	4b76      	ldr	r3, [pc, #472]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a75      	ldr	r2, [pc, #468]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001b90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e01d      	b.n	8001bd4 <HAL_RCC_OscConfig+0xb0>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ba0:	d10c      	bne.n	8001bbc <HAL_RCC_OscConfig+0x98>
 8001ba2:	4b70      	ldr	r3, [pc, #448]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a6f      	ldr	r2, [pc, #444]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001ba8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	4b6d      	ldr	r3, [pc, #436]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a6c      	ldr	r2, [pc, #432]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001bb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	e00b      	b.n	8001bd4 <HAL_RCC_OscConfig+0xb0>
 8001bbc:	4b69      	ldr	r3, [pc, #420]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a68      	ldr	r2, [pc, #416]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001bc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bc6:	6013      	str	r3, [r2, #0]
 8001bc8:	4b66      	ldr	r3, [pc, #408]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a65      	ldr	r2, [pc, #404]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001bce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d013      	beq.n	8001c04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7ff fc18 	bl	8001410 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001be4:	f7ff fc14 	bl	8001410 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b64      	cmp	r3, #100	@ 0x64
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e207      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf6:	4b5b      	ldr	r3, [pc, #364]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0xc0>
 8001c02:	e014      	b.n	8001c2e <HAL_RCC_OscConfig+0x10a>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8004d44:	f7fe fb2a 	bl	800339c <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d4c:	f7fe fb26 	bl	800339c <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b64      	cmp	r3, #100	@ 0x64
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e1f3      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d5e:	4b51      	ldr	r3, [pc, #324]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1f0      	bne.n	8004d4c <HAL_RCC_OscConfig+0xe8>
 8004d6a:	e000      	b.n	8004d6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d6c:	bf00      	nop
=======
 8001c04:	f7ff fc04 	bl	8001410 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c0c:	f7ff fc00 	bl	8001410 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b64      	cmp	r3, #100	@ 0x64
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e1f3      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1e:	4b51      	ldr	r3, [pc, #324]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f0      	bne.n	8001c0c <HAL_RCC_OscConfig+0xe8>
 8001c2a:	e000      	b.n	8001c2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2c:	bf00      	nop
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d063      	beq.n	8004e42 <HAL_RCC_OscConfig+0x1de>
=======
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d063      	beq.n	8001d02 <HAL_RCC_OscConfig+0x1de>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
<<<<<<< HEAD
 8004d7a:	4b4a      	ldr	r3, [pc, #296]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 030c 	and.w	r3, r3, #12
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00b      	beq.n	8004d9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d86:	4b47      	ldr	r3, [pc, #284]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d11c      	bne.n	8004dcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d92:	4b44      	ldr	r3, [pc, #272]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d116      	bne.n	8004dcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d9e:	4b41      	ldr	r3, [pc, #260]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d005      	beq.n	8004db6 <HAL_RCC_OscConfig+0x152>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d001      	beq.n	8004db6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e1c7      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
=======
 8001c3a:	4b4a      	ldr	r3, [pc, #296]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00b      	beq.n	8001c5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c46:	4b47      	ldr	r3, [pc, #284]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c4e:	2b08      	cmp	r3, #8
 8001c50:	d11c      	bne.n	8001c8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c52:	4b44      	ldr	r3, [pc, #272]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d116      	bne.n	8001c8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5e:	4b41      	ldr	r3, [pc, #260]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d005      	beq.n	8001c76 <HAL_RCC_OscConfig+0x152>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d001      	beq.n	8001c76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e1c7      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8004db6:	4b3b      	ldr	r3, [pc, #236]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	4937      	ldr	r1, [pc, #220]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dca:	e03a      	b.n	8004e42 <HAL_RCC_OscConfig+0x1de>
=======
 8001c76:	4b3b      	ldr	r3, [pc, #236]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4937      	ldr	r1, [pc, #220]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c8a:	e03a      	b.n	8001d02 <HAL_RCC_OscConfig+0x1de>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< HEAD
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d020      	beq.n	8004e16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dd4:	4b34      	ldr	r3, [pc, #208]	@ (8004ea8 <HAL_RCC_OscConfig+0x244>)
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dda:	f7fe fadf 	bl	800339c <HAL_GetTick>
 8004dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004de0:	e008      	b.n	8004df4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004de2:	f7fe fadb 	bl	800339c <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e1a8      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004df4:	4b2b      	ldr	r3, [pc, #172]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0f0      	beq.n	8004de2 <HAL_RCC_OscConfig+0x17e>
=======
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d020      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c94:	4b34      	ldr	r3, [pc, #208]	@ (8001d68 <HAL_RCC_OscConfig+0x244>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9a:	f7ff fbb9 	bl	8001410 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca2:	f7ff fbb5 	bl	8001410 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e1a8      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb4:	4b2b      	ldr	r3, [pc, #172]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f0      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x17e>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8004e00:	4b28      	ldr	r3, [pc, #160]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	00db      	lsls	r3, r3, #3
 8004e0e:	4925      	ldr	r1, [pc, #148]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	600b      	str	r3, [r1, #0]
 8004e14:	e015      	b.n	8004e42 <HAL_RCC_OscConfig+0x1de>
=======
 8001cc0:	4b28      	ldr	r3, [pc, #160]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	4925      	ldr	r1, [pc, #148]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	600b      	str	r3, [r1, #0]
 8001cd4:	e015      	b.n	8001d02 <HAL_RCC_OscConfig+0x1de>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8004e16:	4b24      	ldr	r3, [pc, #144]	@ (8004ea8 <HAL_RCC_OscConfig+0x244>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1c:	f7fe fabe 	bl	800339c <HAL_GetTick>
 8004e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e22:	e008      	b.n	8004e36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e24:	f7fe faba 	bl	800339c <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e187      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e36:	4b1b      	ldr	r3, [pc, #108]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1f0      	bne.n	8004e24 <HAL_RCC_OscConfig+0x1c0>
=======
 8001cd6:	4b24      	ldr	r3, [pc, #144]	@ (8001d68 <HAL_RCC_OscConfig+0x244>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7ff fb98 	bl	8001410 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce4:	f7ff fb94 	bl	8001410 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e187      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x1c0>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0308 	and.w	r3, r3, #8
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d036      	beq.n	8004ebc <HAL_RCC_OscConfig+0x258>
=======
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d036      	beq.n	8001d7c <HAL_RCC_OscConfig+0x258>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
<<<<<<< HEAD
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d016      	beq.n	8004e84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e56:	4b15      	ldr	r3, [pc, #84]	@ (8004eac <HAL_RCC_OscConfig+0x248>)
 8004e58:	2201      	movs	r2, #1
 8004e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e5c:	f7fe fa9e 	bl	800339c <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e64:	f7fe fa9a 	bl	800339c <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e167      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e76:	4b0b      	ldr	r3, [pc, #44]	@ (8004ea4 <HAL_RCC_OscConfig+0x240>)
 8004e78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0f0      	beq.n	8004e64 <HAL_RCC_OscConfig+0x200>
 8004e82:	e01b      	b.n	8004ebc <HAL_RCC_OscConfig+0x258>
=======
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d016      	beq.n	8001d44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d16:	4b15      	ldr	r3, [pc, #84]	@ (8001d6c <HAL_RCC_OscConfig+0x248>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d1c:	f7ff fb78 	bl	8001410 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d24:	f7ff fb74 	bl	8001410 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e167      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d36:	4b0b      	ldr	r3, [pc, #44]	@ (8001d64 <HAL_RCC_OscConfig+0x240>)
 8001d38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0x200>
 8001d42:	e01b      	b.n	8001d7c <HAL_RCC_OscConfig+0x258>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8004e84:	4b09      	ldr	r3, [pc, #36]	@ (8004eac <HAL_RCC_OscConfig+0x248>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e8a:	f7fe fa87 	bl	800339c <HAL_GetTick>
 8004e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e90:	e00e      	b.n	8004eb0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e92:	f7fe fa83 	bl	800339c <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d907      	bls.n	8004eb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e150      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
 8004ea4:	40023800 	.word	0x40023800
 8004ea8:	42470000 	.word	0x42470000
 8004eac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004eb0:	4b88      	ldr	r3, [pc, #544]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004eb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1ea      	bne.n	8004e92 <HAL_RCC_OscConfig+0x22e>
=======
 8001d44:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <HAL_RCC_OscConfig+0x248>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4a:	f7ff fb61 	bl	8001410 <HAL_GetTick>
 8001d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d50:	e00e      	b.n	8001d70 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d52:	f7ff fb5d 	bl	8001410 <HAL_GetTick>
 8001d56:	4602      	mov	r2, r0
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d907      	bls.n	8001d70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e150      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
 8001d64:	40023800 	.word	0x40023800
 8001d68:	42470000 	.word	0x42470000
 8001d6c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d70:	4b88      	ldr	r3, [pc, #544]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001d72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1ea      	bne.n	8001d52 <HAL_RCC_OscConfig+0x22e>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0304 	and.w	r3, r3, #4
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	f000 8097 	beq.w	8004ff8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	75fb      	strb	r3, [r7, #23]
=======
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 8097 	beq.w	8001eb8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	75fb      	strb	r3, [r7, #23]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 8004ece:	4b81      	ldr	r3, [pc, #516]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10f      	bne.n	8004efa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eda:	2300      	movs	r3, #0
 8004edc:	60bb      	str	r3, [r7, #8]
 8004ede:	4b7d      	ldr	r3, [pc, #500]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee2:	4a7c      	ldr	r2, [pc, #496]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ee8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004eea:	4b7a      	ldr	r3, [pc, #488]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ef2:	60bb      	str	r3, [r7, #8]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004efa:	4b77      	ldr	r3, [pc, #476]	@ (80050d8 <HAL_RCC_OscConfig+0x474>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d118      	bne.n	8004f38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f06:	4b74      	ldr	r3, [pc, #464]	@ (80050d8 <HAL_RCC_OscConfig+0x474>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a73      	ldr	r2, [pc, #460]	@ (80050d8 <HAL_RCC_OscConfig+0x474>)
 8004f0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f12:	f7fe fa43 	bl	800339c <HAL_GetTick>
 8004f16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f18:	e008      	b.n	8004f2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f1a:	f7fe fa3f 	bl	800339c <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e10c      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f2c:	4b6a      	ldr	r3, [pc, #424]	@ (80050d8 <HAL_RCC_OscConfig+0x474>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0f0      	beq.n	8004f1a <HAL_RCC_OscConfig+0x2b6>
=======
 8001d8e:	4b81      	ldr	r3, [pc, #516]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10f      	bne.n	8001dba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	4b7d      	ldr	r3, [pc, #500]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	4a7c      	ldr	r2, [pc, #496]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001da4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001da8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001daa:	4b7a      	ldr	r3, [pc, #488]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001db6:	2301      	movs	r3, #1
 8001db8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dba:	4b77      	ldr	r3, [pc, #476]	@ (8001f98 <HAL_RCC_OscConfig+0x474>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d118      	bne.n	8001df8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dc6:	4b74      	ldr	r3, [pc, #464]	@ (8001f98 <HAL_RCC_OscConfig+0x474>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a73      	ldr	r2, [pc, #460]	@ (8001f98 <HAL_RCC_OscConfig+0x474>)
 8001dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dd2:	f7ff fb1d 	bl	8001410 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dda:	f7ff fb19 	bl	8001410 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e10c      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dec:	4b6a      	ldr	r3, [pc, #424]	@ (8001f98 <HAL_RCC_OscConfig+0x474>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f0      	beq.n	8001dda <HAL_RCC_OscConfig+0x2b6>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d106      	bne.n	8004f4e <HAL_RCC_OscConfig+0x2ea>
 8004f40:	4b64      	ldr	r3, [pc, #400]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f44:	4a63      	ldr	r2, [pc, #396]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004f46:	f043 0301 	orr.w	r3, r3, #1
 8004f4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f4c:	e01c      	b.n	8004f88 <HAL_RCC_OscConfig+0x324>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	2b05      	cmp	r3, #5
 8004f54:	d10c      	bne.n	8004f70 <HAL_RCC_OscConfig+0x30c>
 8004f56:	4b5f      	ldr	r3, [pc, #380]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f5a:	4a5e      	ldr	r2, [pc, #376]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004f5c:	f043 0304 	orr.w	r3, r3, #4
 8004f60:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f62:	4b5c      	ldr	r3, [pc, #368]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f66:	4a5b      	ldr	r2, [pc, #364]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004f68:	f043 0301 	orr.w	r3, r3, #1
 8004f6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f6e:	e00b      	b.n	8004f88 <HAL_RCC_OscConfig+0x324>
 8004f70:	4b58      	ldr	r3, [pc, #352]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f74:	4a57      	ldr	r2, [pc, #348]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004f76:	f023 0301 	bic.w	r3, r3, #1
 8004f7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004f7c:	4b55      	ldr	r3, [pc, #340]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f80:	4a54      	ldr	r2, [pc, #336]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004f82:	f023 0304 	bic.w	r3, r3, #4
 8004f86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d015      	beq.n	8004fbc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f90:	f7fe fa04 	bl	800339c <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f96:	e00a      	b.n	8004fae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f98:	f7fe fa00 	bl	800339c <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e0cb      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fae:	4b49      	ldr	r3, [pc, #292]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0ee      	beq.n	8004f98 <HAL_RCC_OscConfig+0x334>
 8004fba:	e014      	b.n	8004fe6 <HAL_RCC_OscConfig+0x382>
=======
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d106      	bne.n	8001e0e <HAL_RCC_OscConfig+0x2ea>
 8001e00:	4b64      	ldr	r3, [pc, #400]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e04:	4a63      	ldr	r2, [pc, #396]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e0c:	e01c      	b.n	8001e48 <HAL_RCC_OscConfig+0x324>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2b05      	cmp	r3, #5
 8001e14:	d10c      	bne.n	8001e30 <HAL_RCC_OscConfig+0x30c>
 8001e16:	4b5f      	ldr	r3, [pc, #380]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e1a:	4a5e      	ldr	r2, [pc, #376]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e1c:	f043 0304 	orr.w	r3, r3, #4
 8001e20:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e22:	4b5c      	ldr	r3, [pc, #368]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e26:	4a5b      	ldr	r2, [pc, #364]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e2e:	e00b      	b.n	8001e48 <HAL_RCC_OscConfig+0x324>
 8001e30:	4b58      	ldr	r3, [pc, #352]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e34:	4a57      	ldr	r2, [pc, #348]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e36:	f023 0301 	bic.w	r3, r3, #1
 8001e3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e3c:	4b55      	ldr	r3, [pc, #340]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e40:	4a54      	ldr	r2, [pc, #336]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e42:	f023 0304 	bic.w	r3, r3, #4
 8001e46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d015      	beq.n	8001e7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e50:	f7ff fade 	bl	8001410 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e56:	e00a      	b.n	8001e6e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e58:	f7ff fada 	bl	8001410 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e0cb      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6e:	4b49      	ldr	r3, [pc, #292]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0ee      	beq.n	8001e58 <HAL_RCC_OscConfig+0x334>
 8001e7a:	e014      	b.n	8001ea6 <HAL_RCC_OscConfig+0x382>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8004fbc:	f7fe f9ee 	bl	800339c <HAL_GetTick>
 8004fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fc2:	e00a      	b.n	8004fda <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fc4:	f7fe f9ea 	bl	800339c <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e0b5      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fda:	4b3e      	ldr	r3, [pc, #248]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d1ee      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x360>
=======
 8001e7c:	f7ff fac8 	bl	8001410 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e82:	e00a      	b.n	8001e9a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e84:	f7ff fac4 	bl	8001410 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e0b5      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e9a:	4b3e      	ldr	r3, [pc, #248]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1ee      	bne.n	8001e84 <HAL_RCC_OscConfig+0x360>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 8004fe6:	7dfb      	ldrb	r3, [r7, #23]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d105      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fec:	4b39      	ldr	r3, [pc, #228]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ff0:	4a38      	ldr	r2, [pc, #224]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8004ff2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ff6:	6413      	str	r3, [r2, #64]	@ 0x40
=======
 8001ea6:	7dfb      	ldrb	r3, [r7, #23]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d105      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eac:	4b39      	ldr	r3, [pc, #228]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb0:	4a38      	ldr	r2, [pc, #224]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001eb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001eb6:	6413      	str	r3, [r2, #64]	@ 0x40
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 80a1 	beq.w	8005144 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005002:	4b34      	ldr	r3, [pc, #208]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 030c 	and.w	r3, r3, #12
 800500a:	2b08      	cmp	r3, #8
 800500c:	d05c      	beq.n	80050c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	2b02      	cmp	r3, #2
 8005014:	d141      	bne.n	800509a <HAL_RCC_OscConfig+0x436>
=======
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 80a1 	beq.w	8002004 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ec2:	4b34      	ldr	r3, [pc, #208]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d05c      	beq.n	8001f88 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d141      	bne.n	8001f5a <HAL_RCC_OscConfig+0x436>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8005016:	4b31      	ldr	r3, [pc, #196]	@ (80050dc <HAL_RCC_OscConfig+0x478>)
 8005018:	2200      	movs	r2, #0
 800501a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800501c:	f7fe f9be 	bl	800339c <HAL_GetTick>
 8005020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005022:	e008      	b.n	8005036 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005024:	f7fe f9ba 	bl	800339c <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b02      	cmp	r3, #2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e087      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005036:	4b27      	ldr	r3, [pc, #156]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f0      	bne.n	8005024 <HAL_RCC_OscConfig+0x3c0>
=======
 8001ed6:	4b31      	ldr	r3, [pc, #196]	@ (8001f9c <HAL_RCC_OscConfig+0x478>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7ff fa98 	bl	8001410 <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee4:	f7ff fa94 	bl	8001410 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e087      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef6:	4b27      	ldr	r3, [pc, #156]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< HEAD
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	69da      	ldr	r2, [r3, #28]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005050:	019b      	lsls	r3, r3, #6
 8005052:	431a      	orrs	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005058:	085b      	lsrs	r3, r3, #1
 800505a:	3b01      	subs	r3, #1
 800505c:	041b      	lsls	r3, r3, #16
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005064:	061b      	lsls	r3, r3, #24
 8005066:	491b      	ldr	r1, [pc, #108]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 8005068:	4313      	orrs	r3, r2
 800506a:	604b      	str	r3, [r1, #4]
=======
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69da      	ldr	r2, [r3, #28]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f10:	019b      	lsls	r3, r3, #6
 8001f12:	431a      	orrs	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f18:	085b      	lsrs	r3, r3, #1
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	041b      	lsls	r3, r3, #16
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f24:	061b      	lsls	r3, r3, #24
 8001f26:	491b      	ldr	r1, [pc, #108]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	604b      	str	r3, [r1, #4]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 800506c:	4b1b      	ldr	r3, [pc, #108]	@ (80050dc <HAL_RCC_OscConfig+0x478>)
 800506e:	2201      	movs	r2, #1
 8005070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005072:	f7fe f993 	bl	800339c <HAL_GetTick>
 8005076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005078:	e008      	b.n	800508c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800507a:	f7fe f98f 	bl	800339c <HAL_GetTick>
 800507e:	4602      	mov	r2, r0
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	2b02      	cmp	r3, #2
 8005086:	d901      	bls.n	800508c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e05c      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800508c:	4b11      	ldr	r3, [pc, #68]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d0f0      	beq.n	800507a <HAL_RCC_OscConfig+0x416>
 8005098:	e054      	b.n	8005144 <HAL_RCC_OscConfig+0x4e0>
=======
 8001f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001f9c <HAL_RCC_OscConfig+0x478>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f32:	f7ff fa6d 	bl	8001410 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f3a:	f7ff fa69 	bl	8001410 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e05c      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f4c:	4b11      	ldr	r3, [pc, #68]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0f0      	beq.n	8001f3a <HAL_RCC_OscConfig+0x416>
 8001f58:	e054      	b.n	8002004 <HAL_RCC_OscConfig+0x4e0>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 800509a:	4b10      	ldr	r3, [pc, #64]	@ (80050dc <HAL_RCC_OscConfig+0x478>)
 800509c:	2200      	movs	r2, #0
 800509e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a0:	f7fe f97c 	bl	800339c <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a8:	f7fe f978 	bl	800339c <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e045      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ba:	4b06      	ldr	r3, [pc, #24]	@ (80050d4 <HAL_RCC_OscConfig+0x470>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1f0      	bne.n	80050a8 <HAL_RCC_OscConfig+0x444>
 80050c6:	e03d      	b.n	8005144 <HAL_RCC_OscConfig+0x4e0>
=======
 8001f5a:	4b10      	ldr	r3, [pc, #64]	@ (8001f9c <HAL_RCC_OscConfig+0x478>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7ff fa56 	bl	8001410 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f68:	f7ff fa52 	bl	8001410 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e045      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f7a:	4b06      	ldr	r3, [pc, #24]	@ (8001f94 <HAL_RCC_OscConfig+0x470>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0x444>
 8001f86:	e03d      	b.n	8002004 <HAL_RCC_OscConfig+0x4e0>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d107      	bne.n	80050e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e038      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
 80050d4:	40023800 	.word	0x40023800
 80050d8:	40007000 	.word	0x40007000
 80050dc:	42470060 	.word	0x42470060
=======
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d107      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e038      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40007000 	.word	0x40007000
 8001f9c:	42470060 	.word	0x42470060
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 80050e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005150 <HAL_RCC_OscConfig+0x4ec>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	60fb      	str	r3, [r7, #12]
=======
 8001fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8002010 <HAL_RCC_OscConfig+0x4ec>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	60fb      	str	r3, [r7, #12]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
<<<<<<< HEAD
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d028      	beq.n	8005140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d121      	bne.n	8005140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005106:	429a      	cmp	r2, r3
 8005108:	d11a      	bne.n	8005140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005110:	4013      	ands	r3, r2
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005116:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005118:	4293      	cmp	r3, r2
 800511a:	d111      	bne.n	8005140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005126:	085b      	lsrs	r3, r3, #1
 8005128:	3b01      	subs	r3, #1
 800512a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800512c:	429a      	cmp	r2, r3
 800512e:	d107      	bne.n	8005140 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800513c:	429a      	cmp	r2, r3
 800513e:	d001      	beq.n	8005144 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e000      	b.n	8005146 <HAL_RCC_OscConfig+0x4e2>
=======
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d028      	beq.n	8002000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d121      	bne.n	8002000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d11a      	bne.n	8002000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001fd6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d111      	bne.n	8002000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe6:	085b      	lsrs	r3, r3, #1
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d107      	bne.n	8002000 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ffa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e000      	b.n	8002006 <HAL_RCC_OscConfig+0x4e2>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3718      	adds	r7, #24
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	40023800 	.word	0x40023800

08005154 <HAL_RCC_ClockConfig>:
=======
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800

08002014 <HAL_RCC_ClockConfig>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
=======
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e0cc      	b.n	8005302 <HAL_RCC_ClockConfig+0x1ae>
=======
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0cc      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8005168:	4b68      	ldr	r3, [pc, #416]	@ (800530c <HAL_RCC_ClockConfig+0x1b8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d90c      	bls.n	8005190 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005176:	4b65      	ldr	r3, [pc, #404]	@ (800530c <HAL_RCC_ClockConfig+0x1b8>)
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	701a      	strb	r2, [r3, #0]
=======
 8002028:	4b68      	ldr	r3, [pc, #416]	@ (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	429a      	cmp	r2, r3
 8002034:	d90c      	bls.n	8002050 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002036:	4b65      	ldr	r3, [pc, #404]	@ (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	701a      	strb	r2, [r3, #0]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 800517e:	4b63      	ldr	r3, [pc, #396]	@ (800530c <HAL_RCC_ClockConfig+0x1b8>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	429a      	cmp	r2, r3
 800518a:	d001      	beq.n	8005190 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e0b8      	b.n	8005302 <HAL_RCC_ClockConfig+0x1ae>
=======
 800203e:	4b63      	ldr	r3, [pc, #396]	@ (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d001      	beq.n	8002050 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0b8      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d020      	beq.n	80051de <HAL_RCC_ClockConfig+0x8a>
=======
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d020      	beq.n	800209e <HAL_RCC_ClockConfig+0x8a>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d005      	beq.n	80051b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051a8:	4b59      	ldr	r3, [pc, #356]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	4a58      	ldr	r2, [pc, #352]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80051ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80051b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0308 	and.w	r3, r3, #8
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d005      	beq.n	80051cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051c0:	4b53      	ldr	r3, [pc, #332]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	4a52      	ldr	r2, [pc, #328]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80051c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80051ca:	6093      	str	r3, [r2, #8]
=======
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d005      	beq.n	8002074 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002068:	4b59      	ldr	r3, [pc, #356]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	4a58      	ldr	r2, [pc, #352]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 800206e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002072:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002080:	4b53      	ldr	r3, [pc, #332]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	4a52      	ldr	r2, [pc, #328]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002086:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800208a:	6093      	str	r3, [r2, #8]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 80051cc:	4b50      	ldr	r3, [pc, #320]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	494d      	ldr	r1, [pc, #308]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	608b      	str	r3, [r1, #8]
=======
 800208c:	4b50      	ldr	r3, [pc, #320]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	494d      	ldr	r1, [pc, #308]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 800209a:	4313      	orrs	r3, r2
 800209c:	608b      	str	r3, [r1, #8]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d044      	beq.n	8005274 <HAL_RCC_ClockConfig+0x120>
=======
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d044      	beq.n	8002134 <HAL_RCC_ClockConfig+0x120>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d107      	bne.n	8005202 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051f2:	4b47      	ldr	r3, [pc, #284]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d119      	bne.n	8005232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e07f      	b.n	8005302 <HAL_RCC_ClockConfig+0x1ae>
=======
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d107      	bne.n	80020c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b2:	4b47      	ldr	r3, [pc, #284]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d119      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e07f      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< HEAD
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	2b02      	cmp	r3, #2
 8005208:	d003      	beq.n	8005212 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800520e:	2b03      	cmp	r3, #3
 8005210:	d107      	bne.n	8005222 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005212:	4b3f      	ldr	r3, [pc, #252]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d109      	bne.n	8005232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e06f      	b.n	8005302 <HAL_RCC_ClockConfig+0x1ae>
=======
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d003      	beq.n	80020d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	d107      	bne.n	80020e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020d2:	4b3f      	ldr	r3, [pc, #252]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d109      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e06f      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8005222:	4b3b      	ldr	r3, [pc, #236]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e067      	b.n	8005302 <HAL_RCC_ClockConfig+0x1ae>
=======
 80020e2:	4b3b      	ldr	r3, [pc, #236]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e067      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 8005232:	4b37      	ldr	r3, [pc, #220]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f023 0203 	bic.w	r2, r3, #3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	4934      	ldr	r1, [pc, #208]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 8005240:	4313      	orrs	r3, r2
 8005242:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005244:	f7fe f8aa 	bl	800339c <HAL_GetTick>
 8005248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800524a:	e00a      	b.n	8005262 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800524c:	f7fe f8a6 	bl	800339c <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	f241 3288 	movw	r2, #5000	@ 0x1388
 800525a:	4293      	cmp	r3, r2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e04f      	b.n	8005302 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005262:	4b2b      	ldr	r3, [pc, #172]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	f003 020c 	and.w	r2, r3, #12
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	429a      	cmp	r2, r3
 8005272:	d1eb      	bne.n	800524c <HAL_RCC_ClockConfig+0xf8>
=======
 80020f2:	4b37      	ldr	r3, [pc, #220]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f023 0203 	bic.w	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	4934      	ldr	r1, [pc, #208]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002100:	4313      	orrs	r3, r2
 8002102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002104:	f7ff f984 	bl	8001410 <HAL_GetTick>
 8002108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210a:	e00a      	b.n	8002122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800210c:	f7ff f980 	bl	8001410 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e04f      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002122:	4b2b      	ldr	r3, [pc, #172]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 020c 	and.w	r2, r3, #12
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	429a      	cmp	r2, r3
 8002132:	d1eb      	bne.n	800210c <HAL_RCC_ClockConfig+0xf8>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8005274:	4b25      	ldr	r3, [pc, #148]	@ (800530c <HAL_RCC_ClockConfig+0x1b8>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0307 	and.w	r3, r3, #7
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	429a      	cmp	r2, r3
 8005280:	d20c      	bcs.n	800529c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005282:	4b22      	ldr	r3, [pc, #136]	@ (800530c <HAL_RCC_ClockConfig+0x1b8>)
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	701a      	strb	r2, [r3, #0]
=======
 8002134:	4b25      	ldr	r3, [pc, #148]	@ (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d20c      	bcs.n	800215c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002142:	4b22      	ldr	r3, [pc, #136]	@ (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	701a      	strb	r2, [r3, #0]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 800528a:	4b20      	ldr	r3, [pc, #128]	@ (800530c <HAL_RCC_ClockConfig+0x1b8>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	429a      	cmp	r2, r3
 8005296:	d001      	beq.n	800529c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e032      	b.n	8005302 <HAL_RCC_ClockConfig+0x1ae>
=======
 800214a:	4b20      	ldr	r3, [pc, #128]	@ (80021cc <HAL_RCC_ClockConfig+0x1b8>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d001      	beq.n	800215c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e032      	b.n	80021c2 <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d008      	beq.n	80052ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052a8:	4b19      	ldr	r3, [pc, #100]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	4916      	ldr	r1, [pc, #88]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	608b      	str	r3, [r1, #8]
=======
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0304 	and.w	r3, r3, #4
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002168:	4b19      	ldr	r3, [pc, #100]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4916      	ldr	r1, [pc, #88]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002176:	4313      	orrs	r3, r2
 8002178:	608b      	str	r3, [r1, #8]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 0308 	and.w	r3, r3, #8
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d009      	beq.n	80052da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052c6:	4b12      	ldr	r3, [pc, #72]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	490e      	ldr	r1, [pc, #56]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	608b      	str	r3, [r1, #8]
=======
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0308 	and.w	r3, r3, #8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d009      	beq.n	800219a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002186:	4b12      	ldr	r3, [pc, #72]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	490e      	ldr	r1, [pc, #56]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	4313      	orrs	r3, r2
 8002198:	608b      	str	r3, [r1, #8]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 80052da:	f000 f821 	bl	8005320 <HAL_RCC_GetSysClockFreq>
 80052de:	4602      	mov	r2, r0
 80052e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005310 <HAL_RCC_ClockConfig+0x1bc>)
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	091b      	lsrs	r3, r3, #4
 80052e6:	f003 030f 	and.w	r3, r3, #15
 80052ea:	490a      	ldr	r1, [pc, #40]	@ (8005314 <HAL_RCC_ClockConfig+0x1c0>)
 80052ec:	5ccb      	ldrb	r3, [r1, r3]
 80052ee:	fa22 f303 	lsr.w	r3, r2, r3
 80052f2:	4a09      	ldr	r2, [pc, #36]	@ (8005318 <HAL_RCC_ClockConfig+0x1c4>)
 80052f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80052f6:	4b09      	ldr	r3, [pc, #36]	@ (800531c <HAL_RCC_ClockConfig+0x1c8>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fe f80a 	bl	8003314 <HAL_InitTick>

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	40023c00 	.word	0x40023c00
 8005310:	40023800 	.word	0x40023800
 8005314:	08008ca0 	.word	0x08008ca0
 8005318:	20000034 	.word	0x20000034
 800531c:	20000038 	.word	0x20000038

08005320 <HAL_RCC_GetSysClockFreq>:
=======
 800219a:	f000 f821 	bl	80021e0 <HAL_RCC_GetSysClockFreq>
 800219e:	4602      	mov	r2, r0
 80021a0:	4b0b      	ldr	r3, [pc, #44]	@ (80021d0 <HAL_RCC_ClockConfig+0x1bc>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	490a      	ldr	r1, [pc, #40]	@ (80021d4 <HAL_RCC_ClockConfig+0x1c0>)
 80021ac:	5ccb      	ldrb	r3, [r1, r3]
 80021ae:	fa22 f303 	lsr.w	r3, r2, r3
 80021b2:	4a09      	ldr	r2, [pc, #36]	@ (80021d8 <HAL_RCC_ClockConfig+0x1c4>)
 80021b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80021b6:	4b09      	ldr	r3, [pc, #36]	@ (80021dc <HAL_RCC_ClockConfig+0x1c8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff f8e4 	bl	8001388 <HAL_InitTick>

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40023c00 	.word	0x40023c00
 80021d0:	40023800 	.word	0x40023800
 80021d4:	08004fdc 	.word	0x08004fdc
 80021d8:	20000030 	.word	0x20000030
 80021dc:	20000034 	.word	0x20000034

080021e0 <HAL_RCC_GetSysClockFreq>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8005320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005324:	b094      	sub	sp, #80	@ 0x50
 8005326:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	647b      	str	r3, [r7, #68]	@ 0x44
 800532c:	2300      	movs	r3, #0
 800532e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005330:	2300      	movs	r3, #0
 8005332:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005334:	2300      	movs	r3, #0
 8005336:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005338:	4b79      	ldr	r3, [pc, #484]	@ (8005520 <HAL_RCC_GetSysClockFreq+0x200>)
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f003 030c 	and.w	r3, r3, #12
 8005340:	2b08      	cmp	r3, #8
 8005342:	d00d      	beq.n	8005360 <HAL_RCC_GetSysClockFreq+0x40>
 8005344:	2b08      	cmp	r3, #8
 8005346:	f200 80e1 	bhi.w	800550c <HAL_RCC_GetSysClockFreq+0x1ec>
 800534a:	2b00      	cmp	r3, #0
 800534c:	d002      	beq.n	8005354 <HAL_RCC_GetSysClockFreq+0x34>
 800534e:	2b04      	cmp	r3, #4
 8005350:	d003      	beq.n	800535a <HAL_RCC_GetSysClockFreq+0x3a>
 8005352:	e0db      	b.n	800550c <HAL_RCC_GetSysClockFreq+0x1ec>
=======
 80021e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021e4:	b094      	sub	sp, #80	@ 0x50
 80021e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80021ec:	2300      	movs	r3, #0
 80021ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021f0:	2300      	movs	r3, #0
 80021f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021f8:	4b79      	ldr	r3, [pc, #484]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 030c 	and.w	r3, r3, #12
 8002200:	2b08      	cmp	r3, #8
 8002202:	d00d      	beq.n	8002220 <HAL_RCC_GetSysClockFreq+0x40>
 8002204:	2b08      	cmp	r3, #8
 8002206:	f200 80e1 	bhi.w	80023cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <HAL_RCC_GetSysClockFreq+0x34>
 800220e:	2b04      	cmp	r3, #4
 8002210:	d003      	beq.n	800221a <HAL_RCC_GetSysClockFreq+0x3a>
 8002212:	e0db      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0x1ec>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8005354:	4b73      	ldr	r3, [pc, #460]	@ (8005524 <HAL_RCC_GetSysClockFreq+0x204>)
 8005356:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005358:	e0db      	b.n	8005512 <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 8002214:	4b73      	ldr	r3, [pc, #460]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002216:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002218:	e0db      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 800535a:	4b73      	ldr	r3, [pc, #460]	@ (8005528 <HAL_RCC_GetSysClockFreq+0x208>)
 800535c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800535e:	e0d8      	b.n	8005512 <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 800221a:	4b73      	ldr	r3, [pc, #460]	@ (80023e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800221c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800221e:	e0d8      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 8005360:	4b6f      	ldr	r3, [pc, #444]	@ (8005520 <HAL_RCC_GetSysClockFreq+0x200>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005368:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800536a:	4b6d      	ldr	r3, [pc, #436]	@ (8005520 <HAL_RCC_GetSysClockFreq+0x200>)
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d063      	beq.n	800543e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005376:	4b6a      	ldr	r3, [pc, #424]	@ (8005520 <HAL_RCC_GetSysClockFreq+0x200>)
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	099b      	lsrs	r3, r3, #6
 800537c:	2200      	movs	r2, #0
 800537e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005380:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005388:	633b      	str	r3, [r7, #48]	@ 0x30
 800538a:	2300      	movs	r3, #0
 800538c:	637b      	str	r3, [r7, #52]	@ 0x34
 800538e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005392:	4622      	mov	r2, r4
 8005394:	462b      	mov	r3, r5
 8005396:	f04f 0000 	mov.w	r0, #0
 800539a:	f04f 0100 	mov.w	r1, #0
 800539e:	0159      	lsls	r1, r3, #5
 80053a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053a4:	0150      	lsls	r0, r2, #5
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
 80053aa:	4621      	mov	r1, r4
 80053ac:	1a51      	subs	r1, r2, r1
 80053ae:	6139      	str	r1, [r7, #16]
 80053b0:	4629      	mov	r1, r5
 80053b2:	eb63 0301 	sbc.w	r3, r3, r1
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	f04f 0300 	mov.w	r3, #0
 80053c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053c4:	4659      	mov	r1, fp
 80053c6:	018b      	lsls	r3, r1, #6
 80053c8:	4651      	mov	r1, sl
 80053ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053ce:	4651      	mov	r1, sl
 80053d0:	018a      	lsls	r2, r1, #6
 80053d2:	4651      	mov	r1, sl
 80053d4:	ebb2 0801 	subs.w	r8, r2, r1
 80053d8:	4659      	mov	r1, fp
 80053da:	eb63 0901 	sbc.w	r9, r3, r1
 80053de:	f04f 0200 	mov.w	r2, #0
 80053e2:	f04f 0300 	mov.w	r3, #0
 80053e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053f2:	4690      	mov	r8, r2
 80053f4:	4699      	mov	r9, r3
 80053f6:	4623      	mov	r3, r4
 80053f8:	eb18 0303 	adds.w	r3, r8, r3
 80053fc:	60bb      	str	r3, [r7, #8]
 80053fe:	462b      	mov	r3, r5
 8005400:	eb49 0303 	adc.w	r3, r9, r3
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	f04f 0200 	mov.w	r2, #0
 800540a:	f04f 0300 	mov.w	r3, #0
 800540e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005412:	4629      	mov	r1, r5
 8005414:	024b      	lsls	r3, r1, #9
 8005416:	4621      	mov	r1, r4
 8005418:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800541c:	4621      	mov	r1, r4
 800541e:	024a      	lsls	r2, r1, #9
 8005420:	4610      	mov	r0, r2
 8005422:	4619      	mov	r1, r3
 8005424:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005426:	2200      	movs	r2, #0
 8005428:	62bb      	str	r3, [r7, #40]	@ 0x28
 800542a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800542c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005430:	f7fb fb9c 	bl	8000b6c <__aeabi_uldivmod>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4613      	mov	r3, r2
 800543a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800543c:	e058      	b.n	80054f0 <HAL_RCC_GetSysClockFreq+0x1d0>
=======
 8002220:	4b6f      	ldr	r3, [pc, #444]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002228:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800222a:	4b6d      	ldr	r3, [pc, #436]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d063      	beq.n	80022fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002236:	4b6a      	ldr	r3, [pc, #424]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	099b      	lsrs	r3, r3, #6
 800223c:	2200      	movs	r2, #0
 800223e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002240:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002248:	633b      	str	r3, [r7, #48]	@ 0x30
 800224a:	2300      	movs	r3, #0
 800224c:	637b      	str	r3, [r7, #52]	@ 0x34
 800224e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002252:	4622      	mov	r2, r4
 8002254:	462b      	mov	r3, r5
 8002256:	f04f 0000 	mov.w	r0, #0
 800225a:	f04f 0100 	mov.w	r1, #0
 800225e:	0159      	lsls	r1, r3, #5
 8002260:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002264:	0150      	lsls	r0, r2, #5
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	4621      	mov	r1, r4
 800226c:	1a51      	subs	r1, r2, r1
 800226e:	6139      	str	r1, [r7, #16]
 8002270:	4629      	mov	r1, r5
 8002272:	eb63 0301 	sbc.w	r3, r3, r1
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	f04f 0300 	mov.w	r3, #0
 8002280:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002284:	4659      	mov	r1, fp
 8002286:	018b      	lsls	r3, r1, #6
 8002288:	4651      	mov	r1, sl
 800228a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800228e:	4651      	mov	r1, sl
 8002290:	018a      	lsls	r2, r1, #6
 8002292:	4651      	mov	r1, sl
 8002294:	ebb2 0801 	subs.w	r8, r2, r1
 8002298:	4659      	mov	r1, fp
 800229a:	eb63 0901 	sbc.w	r9, r3, r1
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	f04f 0300 	mov.w	r3, #0
 80022a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022b2:	4690      	mov	r8, r2
 80022b4:	4699      	mov	r9, r3
 80022b6:	4623      	mov	r3, r4
 80022b8:	eb18 0303 	adds.w	r3, r8, r3
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	462b      	mov	r3, r5
 80022c0:	eb49 0303 	adc.w	r3, r9, r3
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	f04f 0200 	mov.w	r2, #0
 80022ca:	f04f 0300 	mov.w	r3, #0
 80022ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022d2:	4629      	mov	r1, r5
 80022d4:	024b      	lsls	r3, r1, #9
 80022d6:	4621      	mov	r1, r4
 80022d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022dc:	4621      	mov	r1, r4
 80022de:	024a      	lsls	r2, r1, #9
 80022e0:	4610      	mov	r0, r2
 80022e2:	4619      	mov	r1, r3
 80022e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022e6:	2200      	movs	r2, #0
 80022e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80022ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80022f0:	f7fd ffc6 	bl	8000280 <__aeabi_uldivmod>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	4613      	mov	r3, r2
 80022fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022fc:	e058      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x1d0>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 800543e:	4b38      	ldr	r3, [pc, #224]	@ (8005520 <HAL_RCC_GetSysClockFreq+0x200>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	099b      	lsrs	r3, r3, #6
 8005444:	2200      	movs	r2, #0
 8005446:	4618      	mov	r0, r3
 8005448:	4611      	mov	r1, r2
 800544a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800544e:	623b      	str	r3, [r7, #32]
 8005450:	2300      	movs	r3, #0
 8005452:	627b      	str	r3, [r7, #36]	@ 0x24
 8005454:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005458:	4642      	mov	r2, r8
 800545a:	464b      	mov	r3, r9
 800545c:	f04f 0000 	mov.w	r0, #0
 8005460:	f04f 0100 	mov.w	r1, #0
 8005464:	0159      	lsls	r1, r3, #5
 8005466:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800546a:	0150      	lsls	r0, r2, #5
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	4641      	mov	r1, r8
 8005472:	ebb2 0a01 	subs.w	sl, r2, r1
 8005476:	4649      	mov	r1, r9
 8005478:	eb63 0b01 	sbc.w	fp, r3, r1
 800547c:	f04f 0200 	mov.w	r2, #0
 8005480:	f04f 0300 	mov.w	r3, #0
 8005484:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005488:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800548c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005490:	ebb2 040a 	subs.w	r4, r2, sl
 8005494:	eb63 050b 	sbc.w	r5, r3, fp
 8005498:	f04f 0200 	mov.w	r2, #0
 800549c:	f04f 0300 	mov.w	r3, #0
 80054a0:	00eb      	lsls	r3, r5, #3
 80054a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054a6:	00e2      	lsls	r2, r4, #3
 80054a8:	4614      	mov	r4, r2
 80054aa:	461d      	mov	r5, r3
 80054ac:	4643      	mov	r3, r8
 80054ae:	18e3      	adds	r3, r4, r3
 80054b0:	603b      	str	r3, [r7, #0]
 80054b2:	464b      	mov	r3, r9
 80054b4:	eb45 0303 	adc.w	r3, r5, r3
 80054b8:	607b      	str	r3, [r7, #4]
 80054ba:	f04f 0200 	mov.w	r2, #0
 80054be:	f04f 0300 	mov.w	r3, #0
 80054c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054c6:	4629      	mov	r1, r5
 80054c8:	028b      	lsls	r3, r1, #10
 80054ca:	4621      	mov	r1, r4
 80054cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054d0:	4621      	mov	r1, r4
 80054d2:	028a      	lsls	r2, r1, #10
 80054d4:	4610      	mov	r0, r2
 80054d6:	4619      	mov	r1, r3
 80054d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054da:	2200      	movs	r2, #0
 80054dc:	61bb      	str	r3, [r7, #24]
 80054de:	61fa      	str	r2, [r7, #28]
 80054e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054e4:	f7fb fb42 	bl	8000b6c <__aeabi_uldivmod>
 80054e8:	4602      	mov	r2, r0
 80054ea:	460b      	mov	r3, r1
 80054ec:	4613      	mov	r3, r2
 80054ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005520 <HAL_RCC_GetSysClockFreq+0x200>)
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	0c1b      	lsrs	r3, r3, #16
 80054f6:	f003 0303 	and.w	r3, r3, #3
 80054fa:	3301      	adds	r3, #1
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005500:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005502:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005504:	fbb2 f3f3 	udiv	r3, r2, r3
 8005508:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800550a:	e002      	b.n	8005512 <HAL_RCC_GetSysClockFreq+0x1f2>
=======
 80022fe:	4b38      	ldr	r3, [pc, #224]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	099b      	lsrs	r3, r3, #6
 8002304:	2200      	movs	r2, #0
 8002306:	4618      	mov	r0, r3
 8002308:	4611      	mov	r1, r2
 800230a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800230e:	623b      	str	r3, [r7, #32]
 8002310:	2300      	movs	r3, #0
 8002312:	627b      	str	r3, [r7, #36]	@ 0x24
 8002314:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002318:	4642      	mov	r2, r8
 800231a:	464b      	mov	r3, r9
 800231c:	f04f 0000 	mov.w	r0, #0
 8002320:	f04f 0100 	mov.w	r1, #0
 8002324:	0159      	lsls	r1, r3, #5
 8002326:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800232a:	0150      	lsls	r0, r2, #5
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4641      	mov	r1, r8
 8002332:	ebb2 0a01 	subs.w	sl, r2, r1
 8002336:	4649      	mov	r1, r9
 8002338:	eb63 0b01 	sbc.w	fp, r3, r1
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	f04f 0300 	mov.w	r3, #0
 8002344:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002348:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800234c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002350:	ebb2 040a 	subs.w	r4, r2, sl
 8002354:	eb63 050b 	sbc.w	r5, r3, fp
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	00eb      	lsls	r3, r5, #3
 8002362:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002366:	00e2      	lsls	r2, r4, #3
 8002368:	4614      	mov	r4, r2
 800236a:	461d      	mov	r5, r3
 800236c:	4643      	mov	r3, r8
 800236e:	18e3      	adds	r3, r4, r3
 8002370:	603b      	str	r3, [r7, #0]
 8002372:	464b      	mov	r3, r9
 8002374:	eb45 0303 	adc.w	r3, r5, r3
 8002378:	607b      	str	r3, [r7, #4]
 800237a:	f04f 0200 	mov.w	r2, #0
 800237e:	f04f 0300 	mov.w	r3, #0
 8002382:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002386:	4629      	mov	r1, r5
 8002388:	028b      	lsls	r3, r1, #10
 800238a:	4621      	mov	r1, r4
 800238c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002390:	4621      	mov	r1, r4
 8002392:	028a      	lsls	r2, r1, #10
 8002394:	4610      	mov	r0, r2
 8002396:	4619      	mov	r1, r3
 8002398:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800239a:	2200      	movs	r2, #0
 800239c:	61bb      	str	r3, [r7, #24]
 800239e:	61fa      	str	r2, [r7, #28]
 80023a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023a4:	f7fd ff6c 	bl	8000280 <__aeabi_uldivmod>
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	4613      	mov	r3, r2
 80023ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023b0:	4b0b      	ldr	r3, [pc, #44]	@ (80023e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	0c1b      	lsrs	r3, r3, #16
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	3301      	adds	r3, #1
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80023c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023ca:	e002      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0x1f2>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 800550c:	4b05      	ldr	r3, [pc, #20]	@ (8005524 <HAL_RCC_GetSysClockFreq+0x204>)
 800550e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005510:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005512:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005514:	4618      	mov	r0, r3
 8005516:	3750      	adds	r7, #80	@ 0x50
 8005518:	46bd      	mov	sp, r7
 800551a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800551e:	bf00      	nop
 8005520:	40023800 	.word	0x40023800
 8005524:	00f42400 	.word	0x00f42400
 8005528:	007a1200 	.word	0x007a1200

0800552c <HAL_RCC_GetHCLKFreq>:
=======
 80023cc:	4b05      	ldr	r3, [pc, #20]	@ (80023e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80023ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3750      	adds	r7, #80	@ 0x50
 80023d8:	46bd      	mov	sp, r7
 80023da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023de:	bf00      	nop
 80023e0:	40023800 	.word	0x40023800
 80023e4:	00f42400 	.word	0x00f42400
 80023e8:	007a1200 	.word	0x007a1200

080023ec <HAL_RCC_GetHCLKFreq>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 800552c:	b480      	push	{r7}
 800552e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005530:	4b03      	ldr	r3, [pc, #12]	@ (8005540 <HAL_RCC_GetHCLKFreq+0x14>)
 8005532:	681b      	ldr	r3, [r3, #0]
}
 8005534:	4618      	mov	r0, r3
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	20000034 	.word	0x20000034

08005544 <HAL_RCC_GetPCLK1Freq>:
=======
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f0:	4b03      	ldr	r3, [pc, #12]	@ (8002400 <HAL_RCC_GetHCLKFreq+0x14>)
 80023f2:	681b      	ldr	r3, [r3, #0]
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	20000030 	.word	0x20000030

08002404 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005548:	f7ff fff0 	bl	800552c <HAL_RCC_GetHCLKFreq>
 800554c:	4602      	mov	r2, r0
 800554e:	4b05      	ldr	r3, [pc, #20]	@ (8005564 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	0a9b      	lsrs	r3, r3, #10
 8005554:	f003 0307 	and.w	r3, r3, #7
 8005558:	4903      	ldr	r1, [pc, #12]	@ (8005568 <HAL_RCC_GetPCLK1Freq+0x24>)
 800555a:	5ccb      	ldrb	r3, [r1, r3]
 800555c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005560:	4618      	mov	r0, r3
 8005562:	bd80      	pop	{r7, pc}
 8005564:	40023800 	.word	0x40023800
 8005568:	08008cb0 	.word	0x08008cb0

0800556c <HAL_RCC_GetPCLK2Freq>:
=======
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002408:	f7ff fff0 	bl	80023ec <HAL_RCC_GetHCLKFreq>
 800240c:	4602      	mov	r2, r0
 800240e:	4b05      	ldr	r3, [pc, #20]	@ (8002424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	0a9b      	lsrs	r3, r3, #10
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	4903      	ldr	r1, [pc, #12]	@ (8002428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800241a:	5ccb      	ldrb	r3, [r1, r3]
 800241c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002420:	4618      	mov	r0, r3
 8002422:	bd80      	pop	{r7, pc}
 8002424:	40023800 	.word	0x40023800
 8002428:	08004fec 	.word	0x08004fec

0800242c <HAL_RCC_GetPCLK2Freq>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005570:	f7ff ffdc 	bl	800552c <HAL_RCC_GetHCLKFreq>
 8005574:	4602      	mov	r2, r0
 8005576:	4b05      	ldr	r3, [pc, #20]	@ (800558c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	0b5b      	lsrs	r3, r3, #13
 800557c:	f003 0307 	and.w	r3, r3, #7
 8005580:	4903      	ldr	r1, [pc, #12]	@ (8005590 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005582:	5ccb      	ldrb	r3, [r1, r3]
 8005584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005588:	4618      	mov	r0, r3
 800558a:	bd80      	pop	{r7, pc}
 800558c:	40023800 	.word	0x40023800
 8005590:	08008cb0 	.word	0x08008cb0

08005594 <HAL_TIM_Base_Start>:
=======
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002430:	f7ff ffdc 	bl	80023ec <HAL_RCC_GetHCLKFreq>
 8002434:	4602      	mov	r2, r0
 8002436:	4b05      	ldr	r3, [pc, #20]	@ (800244c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	0b5b      	lsrs	r3, r3, #13
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	4903      	ldr	r1, [pc, #12]	@ (8002450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002442:	5ccb      	ldrb	r3, [r1, r3]
 8002444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002448:	4618      	mov	r0, r3
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40023800 	.word	0x40023800
 8002450:	08004fec 	.word	0x08004fec

08002454 <HAL_TIM_Base_Start>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
=======
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d001      	beq.n	80055ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e046      	b.n	800563a <HAL_TIM_Base_Start+0xa6>
=======
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b01      	cmp	r3, #1
 8002466:	d001      	beq.n	800246c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e046      	b.n	80024fa <HAL_TIM_Base_Start+0xa6>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a23      	ldr	r2, [pc, #140]	@ (8005648 <HAL_TIM_Base_Start+0xb4>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d022      	beq.n	8005604 <HAL_TIM_Base_Start+0x70>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055c6:	d01d      	beq.n	8005604 <HAL_TIM_Base_Start+0x70>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a1f      	ldr	r2, [pc, #124]	@ (800564c <HAL_TIM_Base_Start+0xb8>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d018      	beq.n	8005604 <HAL_TIM_Base_Start+0x70>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005650 <HAL_TIM_Base_Start+0xbc>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d013      	beq.n	8005604 <HAL_TIM_Base_Start+0x70>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005654 <HAL_TIM_Base_Start+0xc0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d00e      	beq.n	8005604 <HAL_TIM_Base_Start+0x70>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005658 <HAL_TIM_Base_Start+0xc4>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d009      	beq.n	8005604 <HAL_TIM_Base_Start+0x70>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a19      	ldr	r2, [pc, #100]	@ (800565c <HAL_TIM_Base_Start+0xc8>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d004      	beq.n	8005604 <HAL_TIM_Base_Start+0x70>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a18      	ldr	r2, [pc, #96]	@ (8005660 <HAL_TIM_Base_Start+0xcc>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d111      	bne.n	8005628 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f003 0307 	and.w	r3, r3, #7
 800560e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2b06      	cmp	r3, #6
 8005614:	d010      	beq.n	8005638 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f042 0201 	orr.w	r2, r2, #1
 8005624:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005626:	e007      	b.n	8005638 <HAL_TIM_Base_Start+0xa4>
=======
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a23      	ldr	r2, [pc, #140]	@ (8002508 <HAL_TIM_Base_Start+0xb4>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d022      	beq.n	80024c4 <HAL_TIM_Base_Start+0x70>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002486:	d01d      	beq.n	80024c4 <HAL_TIM_Base_Start+0x70>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a1f      	ldr	r2, [pc, #124]	@ (800250c <HAL_TIM_Base_Start+0xb8>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d018      	beq.n	80024c4 <HAL_TIM_Base_Start+0x70>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a1e      	ldr	r2, [pc, #120]	@ (8002510 <HAL_TIM_Base_Start+0xbc>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d013      	beq.n	80024c4 <HAL_TIM_Base_Start+0x70>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a1c      	ldr	r2, [pc, #112]	@ (8002514 <HAL_TIM_Base_Start+0xc0>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d00e      	beq.n	80024c4 <HAL_TIM_Base_Start+0x70>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a1b      	ldr	r2, [pc, #108]	@ (8002518 <HAL_TIM_Base_Start+0xc4>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d009      	beq.n	80024c4 <HAL_TIM_Base_Start+0x70>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a19      	ldr	r2, [pc, #100]	@ (800251c <HAL_TIM_Base_Start+0xc8>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d004      	beq.n	80024c4 <HAL_TIM_Base_Start+0x70>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a18      	ldr	r2, [pc, #96]	@ (8002520 <HAL_TIM_Base_Start+0xcc>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d111      	bne.n	80024e8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d010      	beq.n	80024f8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 0201 	orr.w	r2, r2, #1
 80024e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024e6:	e007      	b.n	80024f8 <HAL_TIM_Base_Start+0xa4>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0201 	orr.w	r2, r2, #1
 8005636:	601a      	str	r2, [r3, #0]
=======
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0201 	orr.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	40010000 	.word	0x40010000
 800564c:	40000400 	.word	0x40000400
 8005650:	40000800 	.word	0x40000800
 8005654:	40000c00 	.word	0x40000c00
 8005658:	40010400 	.word	0x40010400
 800565c:	40014000 	.word	0x40014000
 8005660:	40001800 	.word	0x40001800

08005664 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
=======
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	40010000 	.word	0x40010000
 800250c:	40000400 	.word	0x40000400
 8002510:	40000800 	.word	0x40000800
 8002514:	40000c00 	.word	0x40000c00
 8002518:	40010400 	.word	0x40010400
 800251c:	40014000 	.word	0x40014000
 8002520:	40001800 	.word	0x40001800

08002524 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e041      	b.n	80056fa <HAL_TIM_PWM_Init+0x96>
=======
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e041      	b.n	80025ba <HAL_TIM_IC_Init+0x96>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d106      	bne.n	8005690 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 f839 	bl	8005702 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2202      	movs	r2, #2
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3304      	adds	r3, #4
 80056a0:	4619      	mov	r1, r3
 80056a2:	4610      	mov	r0, r2
 80056a4:	f000 fbd0 	bl	8005e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056f8:	2300      	movs	r3, #0
}
 80056fa:	4618      	mov	r0, r3
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005702:	b480      	push	{r7}
 8005704:	b083      	sub	sp, #12
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
	...

08005718 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d109      	bne.n	800573c <HAL_TIM_PWM_Start+0x24>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b01      	cmp	r3, #1
 8005732:	bf14      	ite	ne
 8005734:	2301      	movne	r3, #1
 8005736:	2300      	moveq	r3, #0
 8005738:	b2db      	uxtb	r3, r3
 800573a:	e022      	b.n	8005782 <HAL_TIM_PWM_Start+0x6a>
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	2b04      	cmp	r3, #4
 8005740:	d109      	bne.n	8005756 <HAL_TIM_PWM_Start+0x3e>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b01      	cmp	r3, #1
 800574c:	bf14      	ite	ne
 800574e:	2301      	movne	r3, #1
 8005750:	2300      	moveq	r3, #0
 8005752:	b2db      	uxtb	r3, r3
 8005754:	e015      	b.n	8005782 <HAL_TIM_PWM_Start+0x6a>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b08      	cmp	r3, #8
 800575a:	d109      	bne.n	8005770 <HAL_TIM_PWM_Start+0x58>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b01      	cmp	r3, #1
 8005766:	bf14      	ite	ne
 8005768:	2301      	movne	r3, #1
 800576a:	2300      	moveq	r3, #0
 800576c:	b2db      	uxtb	r3, r3
 800576e:	e008      	b.n	8005782 <HAL_TIM_PWM_Start+0x6a>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b01      	cmp	r3, #1
 800577a:	bf14      	ite	ne
 800577c:	2301      	movne	r3, #1
 800577e:	2300      	moveq	r3, #0
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e07c      	b.n	8005884 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d104      	bne.n	800579a <HAL_TIM_PWM_Start+0x82>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005798:	e013      	b.n	80057c2 <HAL_TIM_PWM_Start+0xaa>
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b04      	cmp	r3, #4
 800579e:	d104      	bne.n	80057aa <HAL_TIM_PWM_Start+0x92>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057a8:	e00b      	b.n	80057c2 <HAL_TIM_PWM_Start+0xaa>
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b08      	cmp	r3, #8
 80057ae:	d104      	bne.n	80057ba <HAL_TIM_PWM_Start+0xa2>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057b8:	e003      	b.n	80057c2 <HAL_TIM_PWM_Start+0xaa>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2202      	movs	r2, #2
 80057be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2201      	movs	r2, #1
 80057c8:	6839      	ldr	r1, [r7, #0]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 fec2 	bl	8006554 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a2d      	ldr	r2, [pc, #180]	@ (800588c <HAL_TIM_PWM_Start+0x174>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d004      	beq.n	80057e4 <HAL_TIM_PWM_Start+0xcc>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a2c      	ldr	r2, [pc, #176]	@ (8005890 <HAL_TIM_PWM_Start+0x178>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d101      	bne.n	80057e8 <HAL_TIM_PWM_Start+0xd0>
 80057e4:	2301      	movs	r3, #1
 80057e6:	e000      	b.n	80057ea <HAL_TIM_PWM_Start+0xd2>
 80057e8:	2300      	movs	r3, #0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d007      	beq.n	80057fe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80057fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a22      	ldr	r2, [pc, #136]	@ (800588c <HAL_TIM_PWM_Start+0x174>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d022      	beq.n	800584e <HAL_TIM_PWM_Start+0x136>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005810:	d01d      	beq.n	800584e <HAL_TIM_PWM_Start+0x136>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a1f      	ldr	r2, [pc, #124]	@ (8005894 <HAL_TIM_PWM_Start+0x17c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d018      	beq.n	800584e <HAL_TIM_PWM_Start+0x136>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a1d      	ldr	r2, [pc, #116]	@ (8005898 <HAL_TIM_PWM_Start+0x180>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d013      	beq.n	800584e <HAL_TIM_PWM_Start+0x136>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a1c      	ldr	r2, [pc, #112]	@ (800589c <HAL_TIM_PWM_Start+0x184>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d00e      	beq.n	800584e <HAL_TIM_PWM_Start+0x136>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a16      	ldr	r2, [pc, #88]	@ (8005890 <HAL_TIM_PWM_Start+0x178>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d009      	beq.n	800584e <HAL_TIM_PWM_Start+0x136>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a18      	ldr	r2, [pc, #96]	@ (80058a0 <HAL_TIM_PWM_Start+0x188>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d004      	beq.n	800584e <HAL_TIM_PWM_Start+0x136>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a16      	ldr	r2, [pc, #88]	@ (80058a4 <HAL_TIM_PWM_Start+0x18c>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d111      	bne.n	8005872 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f003 0307 	and.w	r3, r3, #7
 8005858:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2b06      	cmp	r3, #6
 800585e:	d010      	beq.n	8005882 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f042 0201 	orr.w	r2, r2, #1
 800586e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005870:	e007      	b.n	8005882 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f042 0201 	orr.w	r2, r2, #1
 8005880:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	40010000 	.word	0x40010000
 8005890:	40010400 	.word	0x40010400
 8005894:	40000400 	.word	0x40000400
 8005898:	40000800 	.word	0x40000800
 800589c:	40000c00 	.word	0x40000c00
 80058a0:	40014000 	.word	0x40014000
 80058a4:	40001800 	.word	0x40001800

080058a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e041      	b.n	800593e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d106      	bne.n	80058d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d106      	bne.n	8002550 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
<<<<<<< HEAD
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7fd fab6 	bl	8002e40 <HAL_TIM_IC_MspInit>
=======
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7fe fd38 	bl	8000fc0 <HAL_TIM_IC_MspInit>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	3304      	adds	r3, #4
 80058e4:	4619      	mov	r1, r3
 80058e6:	4610      	mov	r0, r2
 80058e8:	f000 faae 	bl	8005e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <HAL_TIM_IRQHandler>:
=======
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2202      	movs	r2, #2
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3304      	adds	r3, #4
 8002560:	4619      	mov	r1, r3
 8002562:	4610      	mov	r0, r2
 8002564:	f000 f9ec 	bl	8002940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025b8:	2300      	movs	r3, #0
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_TIM_IRQHandler>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005946:	b580      	push	{r7, lr}
 8005948:	b084      	sub	sp, #16
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b00      	cmp	r3, #0
 8005966:	d020      	beq.n	80059aa <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d01b      	beq.n	80059aa <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f06f 0202 	mvn.w	r2, #2
 800597a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	f003 0303 	and.w	r3, r3, #3
 800598c:	2b00      	cmp	r3, #0
 800598e:	d003      	beq.n	8005998 <HAL_TIM_IRQHandler+0x52>
=======
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b084      	sub	sp, #16
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d020      	beq.n	8002626 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d01b      	beq.n	8002626 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f06f 0202 	mvn.w	r2, #2
 80025f6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_TIM_IRQHandler+0x52>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 fa3b 	bl	8005e0c <HAL_TIM_IC_CaptureCallback>
 8005996:	e005      	b.n	80059a4 <HAL_TIM_IRQHandler+0x5e>
=======
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 f978 	bl	8002902 <HAL_TIM_IC_CaptureCallback>
 8002612:	e005      	b.n	8002620 <HAL_TIM_IRQHandler+0x5e>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 fa2d 	bl	8005df8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fa3e 	bl	8005e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	771a      	strb	r2, [r3, #28]
=======
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f000 f96a 	bl	80028ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f97b 	bl	8002916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	771a      	strb	r2, [r3, #28]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
<<<<<<< HEAD
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	f003 0304 	and.w	r3, r3, #4
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d020      	beq.n	80059f6 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f003 0304 	and.w	r3, r3, #4
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d01b      	beq.n	80059f6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f06f 0204 	mvn.w	r2, #4
 80059c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <HAL_TIM_IRQHandler+0x9e>
=======
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	f003 0304 	and.w	r3, r3, #4
 800262c:	2b00      	cmp	r3, #0
 800262e:	d020      	beq.n	8002672 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f003 0304 	and.w	r3, r3, #4
 8002636:	2b00      	cmp	r3, #0
 8002638:	d01b      	beq.n	8002672 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f06f 0204 	mvn.w	r2, #4
 8002642:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_TIM_IRQHandler+0x9e>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 fa15 	bl	8005e0c <HAL_TIM_IC_CaptureCallback>
 80059e2:	e005      	b.n	80059f0 <HAL_TIM_IRQHandler+0xaa>
=======
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f952 	bl	8002902 <HAL_TIM_IC_CaptureCallback>
 800265e:	e005      	b.n	800266c <HAL_TIM_IRQHandler+0xaa>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fa07 	bl	8005df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 fa18 	bl	8005e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	771a      	strb	r2, [r3, #28]
=======
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f000 f944 	bl	80028ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f955 	bl	8002916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	771a      	strb	r2, [r3, #28]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
<<<<<<< HEAD
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d020      	beq.n	8005a42 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f003 0308 	and.w	r3, r3, #8
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d01b      	beq.n	8005a42 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f06f 0208 	mvn.w	r2, #8
 8005a12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2204      	movs	r2, #4
 8005a18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	69db      	ldr	r3, [r3, #28]
 8005a20:	f003 0303 	and.w	r3, r3, #3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <HAL_TIM_IRQHandler+0xea>
=======
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	2b00      	cmp	r3, #0
 800267a:	d020      	beq.n	80026be <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d01b      	beq.n	80026be <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f06f 0208 	mvn.w	r2, #8
 800268e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2204      	movs	r2, #4
 8002694:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	f003 0303 	and.w	r3, r3, #3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_TIM_IRQHandler+0xea>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 f9ef 	bl	8005e0c <HAL_TIM_IC_CaptureCallback>
 8005a2e:	e005      	b.n	8005a3c <HAL_TIM_IRQHandler+0xf6>
=======
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f92c 	bl	8002902 <HAL_TIM_IC_CaptureCallback>
 80026aa:	e005      	b.n	80026b8 <HAL_TIM_IRQHandler+0xf6>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f9e1 	bl	8005df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f9f2 	bl	8005e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	771a      	strb	r2, [r3, #28]
=======
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f91e 	bl	80028ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f92f 	bl	8002916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	771a      	strb	r2, [r3, #28]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
<<<<<<< HEAD
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	f003 0310 	and.w	r3, r3, #16
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d020      	beq.n	8005a8e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f003 0310 	and.w	r3, r3, #16
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d01b      	beq.n	8005a8e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f06f 0210 	mvn.w	r2, #16
 8005a5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2208      	movs	r2, #8
 8005a64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	69db      	ldr	r3, [r3, #28]
 8005a6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d003      	beq.n	8005a7c <HAL_TIM_IRQHandler+0x136>
=======
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	f003 0310 	and.w	r3, r3, #16
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d020      	beq.n	800270a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f003 0310 	and.w	r3, r3, #16
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d01b      	beq.n	800270a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f06f 0210 	mvn.w	r2, #16
 80026da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2208      	movs	r2, #8
 80026e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_TIM_IRQHandler+0x136>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 f9c9 	bl	8005e0c <HAL_TIM_IC_CaptureCallback>
 8005a7a:	e005      	b.n	8005a88 <HAL_TIM_IRQHandler+0x142>
=======
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f906 	bl	8002902 <HAL_TIM_IC_CaptureCallback>
 80026f6:	e005      	b.n	8002704 <HAL_TIM_IRQHandler+0x142>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 f9bb 	bl	8005df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f9cc 	bl	8005e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	771a      	strb	r2, [r3, #28]
=======
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f8f8 	bl	80028ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f909 	bl	8002916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	771a      	strb	r2, [r3, #28]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
<<<<<<< HEAD
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00c      	beq.n	8005ab2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d007      	beq.n	8005ab2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f06f 0201 	mvn.w	r2, #1
 8005aaa:	611a      	str	r2, [r3, #16]
=======
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00c      	beq.n	800272e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b00      	cmp	r3, #0
 800271c:	d007      	beq.n	800272e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f06f 0201 	mvn.w	r2, #1
 8002726:	611a      	str	r2, [r3, #16]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 f999 	bl	8005de4 <HAL_TIM_PeriodElapsedCallback>
=======
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f8d6 	bl	80028da <HAL_TIM_PeriodElapsedCallback>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
<<<<<<< HEAD
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00c      	beq.n	8005ad6 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d007      	beq.n	8005ad6 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005ace:	611a      	str	r2, [r3, #16]
=======
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00c      	beq.n	8002752 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800273e:	2b00      	cmp	r3, #0
 8002740:	d007      	beq.n	8002752 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800274a:	611a      	str	r2, [r3, #16]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 fdeb 	bl	80066ac <HAL_TIMEx_BreakCallback>
=======
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 fb53 	bl	8002df8 <HAL_TIMEx_BreakCallback>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
<<<<<<< HEAD
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00c      	beq.n	8005afa <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d007      	beq.n	8005afa <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005af2:	611a      	str	r2, [r3, #16]
=======
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00c      	beq.n	8002776 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002762:	2b00      	cmp	r3, #0
 8002764:	d007      	beq.n	8002776 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800276e:	611a      	str	r2, [r3, #16]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f99d 	bl	8005e34 <HAL_TIM_TriggerCallback>
=======
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f8da 	bl	800292a <HAL_TIM_TriggerCallback>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
<<<<<<< HEAD
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	f003 0320 	and.w	r3, r3, #32
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00c      	beq.n	8005b1e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f003 0320 	and.w	r3, r3, #32
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d007      	beq.n	8005b1e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f06f 0220 	mvn.w	r2, #32
 8005b16:	611a      	str	r2, [r3, #16]
=======
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	f003 0320 	and.w	r3, r3, #32
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00c      	beq.n	800279a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f003 0320 	and.w	r3, r3, #32
 8002786:	2b00      	cmp	r3, #0
 8002788:	d007      	beq.n	800279a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f06f 0220 	mvn.w	r2, #32
 8002792:	611a      	str	r2, [r3, #16]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fdbd 	bl	8006698 <HAL_TIMEx_CommutCallback>
=======
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 fb25 	bl	8002de4 <HAL_TIMEx_CommutCallback>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8005b1e:	bf00      	nop
 8005b20:	3710      	adds	r7, #16
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <HAL_TIM_IC_ConfigChannel>:
=======
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_TIM_IC_ConfigChannel>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
<<<<<<< HEAD
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b086      	sub	sp, #24
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	60f8      	str	r0, [r7, #12]
 8005b2e:	60b9      	str	r1, [r7, #8]
 8005b30:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	75fb      	strb	r3, [r7, #23]
=======
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b086      	sub	sp, #24
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	75fb      	strb	r3, [r7, #23]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d101      	bne.n	8005b44 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005b40:	2302      	movs	r3, #2
 8005b42:	e088      	b.n	8005c56 <HAL_TIM_IC_ConfigChannel+0x130>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d11b      	bne.n	8005b8a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005b62:	f000 fbcd 	bl	8006300 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	699a      	ldr	r2, [r3, #24]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f022 020c 	bic.w	r2, r2, #12
 8005b74:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	6999      	ldr	r1, [r3, #24]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	430a      	orrs	r2, r1
 8005b86:	619a      	str	r2, [r3, #24]
 8005b88:	e060      	b.n	8005c4c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b04      	cmp	r3, #4
 8005b8e:	d11c      	bne.n	8005bca <HAL_TIM_IC_ConfigChannel+0xa4>
=======
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80027bc:	2302      	movs	r3, #2
 80027be:	e088      	b.n	80028d2 <HAL_TIM_IC_ConfigChannel+0x130>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d11b      	bne.n	8002806 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80027de:	f000 f95b 	bl	8002a98 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	699a      	ldr	r2, [r3, #24]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 020c 	bic.w	r2, r2, #12
 80027f0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	6999      	ldr	r1, [r3, #24]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	619a      	str	r2, [r3, #24]
 8002804:	e060      	b.n	80028c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b04      	cmp	r3, #4
 800280a:	d11c      	bne.n	8002846 <HAL_TIM_IC_ConfigChannel+0xa4>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
<<<<<<< HEAD
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005ba0:	f000 fc22 	bl	80063e8 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	699a      	ldr	r2, [r3, #24]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005bb2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6999      	ldr	r1, [r3, #24]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	021a      	lsls	r2, r3, #8
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	619a      	str	r2, [r3, #24]
 8005bc8:	e040      	b.n	8005c4c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b08      	cmp	r3, #8
 8005bce:	d11b      	bne.n	8005c08 <HAL_TIM_IC_ConfigChannel+0xe2>
=======
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800281c:	f000 f9b0 	bl	8002b80 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	699a      	ldr	r2, [r3, #24]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800282e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6999      	ldr	r1, [r3, #24]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	021a      	lsls	r2, r3, #8
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	430a      	orrs	r2, r1
 8002842:	619a      	str	r2, [r3, #24]
 8002844:	e040      	b.n	80028c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b08      	cmp	r3, #8
 800284a:	d11b      	bne.n	8002884 <HAL_TIM_IC_ConfigChannel+0xe2>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
<<<<<<< HEAD
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005be0:	f000 fc3f 	bl	8006462 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	69da      	ldr	r2, [r3, #28]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 020c 	bic.w	r2, r2, #12
 8005bf2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	69d9      	ldr	r1, [r3, #28]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	689a      	ldr	r2, [r3, #8]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	61da      	str	r2, [r3, #28]
 8005c06:	e021      	b.n	8005c4c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b0c      	cmp	r3, #12
 8005c0c:	d11c      	bne.n	8005c48 <HAL_TIM_IC_ConfigChannel+0x122>
=======
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800285c:	f000 f9cd 	bl	8002bfa <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	69da      	ldr	r2, [r3, #28]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 020c 	bic.w	r2, r2, #12
 800286e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	69d9      	ldr	r1, [r3, #28]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	430a      	orrs	r2, r1
 8002880:	61da      	str	r2, [r3, #28]
 8002882:	e021      	b.n	80028c8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b0c      	cmp	r3, #12
 8002888:	d11c      	bne.n	80028c4 <HAL_TIM_IC_ConfigChannel+0x122>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
<<<<<<< HEAD
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005c1e:	f000 fc5c 	bl	80064da <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	69da      	ldr	r2, [r3, #28]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005c30:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	69d9      	ldr	r1, [r3, #28]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	021a      	lsls	r2, r3, #8
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	61da      	str	r2, [r3, #28]
 8005c46:	e001      	b.n	8005c4c <HAL_TIM_IC_ConfigChannel+0x126>
=======
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800289a:	f000 f9ea 	bl	8002c72 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	69da      	ldr	r2, [r3, #28]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80028ac:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	69d9      	ldr	r1, [r3, #28]
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	021a      	lsls	r2, r3, #8
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	61da      	str	r2, [r3, #28]
 80028c2:	e001      	b.n	80028c8 <HAL_TIM_IC_ConfigChannel+0x126>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  }
  else
  {
    status = HAL_ERROR;
<<<<<<< HEAD
 8005c48:	2301      	movs	r3, #1
 8005c4a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3718      	adds	r7, #24
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
	...

08005c60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b086      	sub	sp, #24
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d101      	bne.n	8005c7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	e0ae      	b.n	8005ddc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b0c      	cmp	r3, #12
 8005c8a:	f200 809f 	bhi.w	8005dcc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c94:	08005cc9 	.word	0x08005cc9
 8005c98:	08005dcd 	.word	0x08005dcd
 8005c9c:	08005dcd 	.word	0x08005dcd
 8005ca0:	08005dcd 	.word	0x08005dcd
 8005ca4:	08005d09 	.word	0x08005d09
 8005ca8:	08005dcd 	.word	0x08005dcd
 8005cac:	08005dcd 	.word	0x08005dcd
 8005cb0:	08005dcd 	.word	0x08005dcd
 8005cb4:	08005d4b 	.word	0x08005d4b
 8005cb8:	08005dcd 	.word	0x08005dcd
 8005cbc:	08005dcd 	.word	0x08005dcd
 8005cc0:	08005dcd 	.word	0x08005dcd
 8005cc4:	08005d8b 	.word	0x08005d8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68b9      	ldr	r1, [r7, #8]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 f966 	bl	8005fa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	699a      	ldr	r2, [r3, #24]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f042 0208 	orr.w	r2, r2, #8
 8005ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	699a      	ldr	r2, [r3, #24]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 0204 	bic.w	r2, r2, #4
 8005cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6999      	ldr	r1, [r3, #24]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	691a      	ldr	r2, [r3, #16]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	430a      	orrs	r2, r1
 8005d04:	619a      	str	r2, [r3, #24]
      break;
 8005d06:	e064      	b.n	8005dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68b9      	ldr	r1, [r7, #8]
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 f9b6 	bl	8006080 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	699a      	ldr	r2, [r3, #24]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	699a      	ldr	r2, [r3, #24]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6999      	ldr	r1, [r3, #24]
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	021a      	lsls	r2, r3, #8
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	619a      	str	r2, [r3, #24]
      break;
 8005d48:	e043      	b.n	8005dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68b9      	ldr	r1, [r7, #8]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 fa0b 	bl	800616c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	69da      	ldr	r2, [r3, #28]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f042 0208 	orr.w	r2, r2, #8
 8005d64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69da      	ldr	r2, [r3, #28]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 0204 	bic.w	r2, r2, #4
 8005d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	69d9      	ldr	r1, [r3, #28]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	691a      	ldr	r2, [r3, #16]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	61da      	str	r2, [r3, #28]
      break;
 8005d88:	e023      	b.n	8005dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68b9      	ldr	r1, [r7, #8]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 fa5f 	bl	8006254 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	69da      	ldr	r2, [r3, #28]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005da4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	69da      	ldr	r2, [r3, #28]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005db4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	69d9      	ldr	r1, [r3, #28]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	021a      	lsls	r2, r3, #8
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	61da      	str	r2, [r3, #28]
      break;
 8005dca:	e002      	b.n	8005dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	75fb      	strb	r3, [r7, #23]
      break;
 8005dd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <HAL_TIM_PeriodElapsedCallback>:
=======
 80028c4:	2301      	movs	r3, #1
 80028c6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
=======
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
=======
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_TIM_IC_CaptureCallback>:
=======
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
=======
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
=======
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_TIM_TriggerCallback>:
=======
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <HAL_TIM_TriggerCallback>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
=======
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <TIM_Base_SetConfig>:
=======
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
	...

08002940 <TIM_Base_SetConfig>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a46      	ldr	r2, [pc, #280]	@ (8005f74 <TIM_Base_SetConfig+0x12c>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d013      	beq.n	8005e88 <TIM_Base_SetConfig+0x40>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e66:	d00f      	beq.n	8005e88 <TIM_Base_SetConfig+0x40>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a43      	ldr	r2, [pc, #268]	@ (8005f78 <TIM_Base_SetConfig+0x130>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00b      	beq.n	8005e88 <TIM_Base_SetConfig+0x40>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a42      	ldr	r2, [pc, #264]	@ (8005f7c <TIM_Base_SetConfig+0x134>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d007      	beq.n	8005e88 <TIM_Base_SetConfig+0x40>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a41      	ldr	r2, [pc, #260]	@ (8005f80 <TIM_Base_SetConfig+0x138>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d003      	beq.n	8005e88 <TIM_Base_SetConfig+0x40>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a40      	ldr	r2, [pc, #256]	@ (8005f84 <TIM_Base_SetConfig+0x13c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d108      	bne.n	8005e9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a35      	ldr	r2, [pc, #212]	@ (8005f74 <TIM_Base_SetConfig+0x12c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d02b      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ea8:	d027      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a32      	ldr	r2, [pc, #200]	@ (8005f78 <TIM_Base_SetConfig+0x130>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d023      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a31      	ldr	r2, [pc, #196]	@ (8005f7c <TIM_Base_SetConfig+0x134>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d01f      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a30      	ldr	r2, [pc, #192]	@ (8005f80 <TIM_Base_SetConfig+0x138>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d01b      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a2f      	ldr	r2, [pc, #188]	@ (8005f84 <TIM_Base_SetConfig+0x13c>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d017      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a2e      	ldr	r2, [pc, #184]	@ (8005f88 <TIM_Base_SetConfig+0x140>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d013      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a2d      	ldr	r2, [pc, #180]	@ (8005f8c <TIM_Base_SetConfig+0x144>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d00f      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a2c      	ldr	r2, [pc, #176]	@ (8005f90 <TIM_Base_SetConfig+0x148>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d00b      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a2b      	ldr	r2, [pc, #172]	@ (8005f94 <TIM_Base_SetConfig+0x14c>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d007      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a2a      	ldr	r2, [pc, #168]	@ (8005f98 <TIM_Base_SetConfig+0x150>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d003      	beq.n	8005efa <TIM_Base_SetConfig+0xb2>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a29      	ldr	r2, [pc, #164]	@ (8005f9c <TIM_Base_SetConfig+0x154>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d108      	bne.n	8005f0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	60fb      	str	r3, [r7, #12]
=======
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a46      	ldr	r2, [pc, #280]	@ (8002a6c <TIM_Base_SetConfig+0x12c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d013      	beq.n	8002980 <TIM_Base_SetConfig+0x40>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800295e:	d00f      	beq.n	8002980 <TIM_Base_SetConfig+0x40>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a43      	ldr	r2, [pc, #268]	@ (8002a70 <TIM_Base_SetConfig+0x130>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d00b      	beq.n	8002980 <TIM_Base_SetConfig+0x40>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a42      	ldr	r2, [pc, #264]	@ (8002a74 <TIM_Base_SetConfig+0x134>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d007      	beq.n	8002980 <TIM_Base_SetConfig+0x40>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a41      	ldr	r2, [pc, #260]	@ (8002a78 <TIM_Base_SetConfig+0x138>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d003      	beq.n	8002980 <TIM_Base_SetConfig+0x40>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a40      	ldr	r2, [pc, #256]	@ (8002a7c <TIM_Base_SetConfig+0x13c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d108      	bne.n	8002992 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	4313      	orrs	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a35      	ldr	r2, [pc, #212]	@ (8002a6c <TIM_Base_SetConfig+0x12c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d02b      	beq.n	80029f2 <TIM_Base_SetConfig+0xb2>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029a0:	d027      	beq.n	80029f2 <TIM_Base_SetConfig+0xb2>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a32      	ldr	r2, [pc, #200]	@ (8002a70 <TIM_Base_SetConfig+0x130>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d023      	beq.n	80029f2 <TIM_Base_SetConfig+0xb2>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a31      	ldr	r2, [pc, #196]	@ (8002a74 <TIM_Base_SetConfig+0x134>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d01f      	beq.n	80029f2 <TIM_Base_SetConfig+0xb2>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a30      	ldr	r2, [pc, #192]	@ (8002a78 <TIM_Base_SetConfig+0x138>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d01b      	beq.n	80029f2 <TIM_Base_SetConfig+0xb2>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a2f      	ldr	r2, [pc, #188]	@ (8002a7c <TIM_Base_SetConfig+0x13c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d017      	beq.n	80029f2 <TIM_Base_SetConfig+0xb2>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a2e      	ldr	r2, [pc, #184]	@ (8002a80 <TIM_Base_SetConfig+0x140>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d013      	beq.n	80029f2 <TIM_Base_SetConfig+0xb2>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a2d      	ldr	r2, [pc, #180]	@ (8002a84 <TIM_Base_SetConfig+0x144>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d00f      	beq.n	80029f2 <TIM_Base_SetConfig+0xb2>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a2c      	ldr	r2, [pc, #176]	@ (8002a88 <TIM_Base_SetConfig+0x148>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00b      	beq.n	80029f2 <TIM_Base_SetConfig+0xb2>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a2b      	ldr	r2, [pc, #172]	@ (8002a8c <TIM_Base_SetConfig+0x14c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d007      	beq.n	80029f2 <TIM_Base_SetConfig+0xb2>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a2a      	ldr	r2, [pc, #168]	@ (8002a90 <TIM_Base_SetConfig+0x150>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d003      	beq.n	80029f2 <TIM_Base_SetConfig+0xb2>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a29      	ldr	r2, [pc, #164]	@ (8002a94 <TIM_Base_SetConfig+0x154>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d108      	bne.n	8002a04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	60fb      	str	r3, [r7, #12]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68fa      	ldr	r2, [r7, #12]
 8005f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a10      	ldr	r2, [pc, #64]	@ (8005f74 <TIM_Base_SetConfig+0x12c>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d003      	beq.n	8005f40 <TIM_Base_SetConfig+0xf8>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a12      	ldr	r2, [pc, #72]	@ (8005f84 <TIM_Base_SetConfig+0x13c>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d103      	bne.n	8005f48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	691a      	ldr	r2, [r3, #16]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a10      	ldr	r2, [pc, #64]	@ (8002a6c <TIM_Base_SetConfig+0x12c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d003      	beq.n	8002a38 <TIM_Base_SetConfig+0xf8>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a12      	ldr	r2, [pc, #72]	@ (8002a7c <TIM_Base_SetConfig+0x13c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d103      	bne.n	8002a40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	691a      	ldr	r2, [r3, #16]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d105      	bne.n	8005f66 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	f023 0201 	bic.w	r2, r3, #1
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	611a      	str	r2, [r3, #16]
  }
}
 8005f66:	bf00      	nop
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	40010000 	.word	0x40010000
 8005f78:	40000400 	.word	0x40000400
 8005f7c:	40000800 	.word	0x40000800
 8005f80:	40000c00 	.word	0x40000c00
 8005f84:	40010400 	.word	0x40010400
 8005f88:	40014000 	.word	0x40014000
 8005f8c:	40014400 	.word	0x40014400
 8005f90:	40014800 	.word	0x40014800
 8005f94:	40001800 	.word	0x40001800
 8005f98:	40001c00 	.word	0x40001c00
 8005f9c:	40002000 	.word	0x40002000

08005fa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	f023 0201 	bic.w	r2, r3, #1
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f023 0303 	bic.w	r3, r3, #3
 8005fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f023 0302 	bic.w	r3, r3, #2
 8005fe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a20      	ldr	r2, [pc, #128]	@ (8006078 <TIM_OC1_SetConfig+0xd8>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d003      	beq.n	8006004 <TIM_OC1_SetConfig+0x64>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a1f      	ldr	r2, [pc, #124]	@ (800607c <TIM_OC1_SetConfig+0xdc>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d10c      	bne.n	800601e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	f023 0308 	bic.w	r3, r3, #8
 800600a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	4313      	orrs	r3, r2
 8006014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	f023 0304 	bic.w	r3, r3, #4
 800601c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a15      	ldr	r2, [pc, #84]	@ (8006078 <TIM_OC1_SetConfig+0xd8>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d003      	beq.n	800602e <TIM_OC1_SetConfig+0x8e>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a14      	ldr	r2, [pc, #80]	@ (800607c <TIM_OC1_SetConfig+0xdc>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d111      	bne.n	8006052 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800603c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	4313      	orrs	r3, r2
 8006046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	4313      	orrs	r3, r2
 8006050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	621a      	str	r2, [r3, #32]
}
 800606c:	bf00      	nop
 800606e:	371c      	adds	r7, #28
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	40010000 	.word	0x40010000
 800607c:	40010400 	.word	0x40010400

08006080 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006080:	b480      	push	{r7}
 8006082:	b087      	sub	sp, #28
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	f023 0210 	bic.w	r2, r3, #16
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	021b      	lsls	r3, r3, #8
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f023 0320 	bic.w	r3, r3, #32
 80060ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	011b      	lsls	r3, r3, #4
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a22      	ldr	r2, [pc, #136]	@ (8006164 <TIM_OC2_SetConfig+0xe4>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d003      	beq.n	80060e8 <TIM_OC2_SetConfig+0x68>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a21      	ldr	r2, [pc, #132]	@ (8006168 <TIM_OC2_SetConfig+0xe8>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d10d      	bne.n	8006104 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	011b      	lsls	r3, r3, #4
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006102:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a17      	ldr	r2, [pc, #92]	@ (8006164 <TIM_OC2_SetConfig+0xe4>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d003      	beq.n	8006114 <TIM_OC2_SetConfig+0x94>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a16      	ldr	r2, [pc, #88]	@ (8006168 <TIM_OC2_SetConfig+0xe8>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d113      	bne.n	800613c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800611a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006122:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	4313      	orrs	r3, r2
 800612e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	4313      	orrs	r3, r2
 800613a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	621a      	str	r2, [r3, #32]
}
 8006156:	bf00      	nop
 8006158:	371c      	adds	r7, #28
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	40010000 	.word	0x40010000
 8006168:	40010400 	.word	0x40010400

0800616c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a1b      	ldr	r3, [r3, #32]
 8006180:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800619a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f023 0303 	bic.w	r3, r3, #3
 80061a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	021b      	lsls	r3, r3, #8
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	4313      	orrs	r3, r2
 80061c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a21      	ldr	r2, [pc, #132]	@ (800624c <TIM_OC3_SetConfig+0xe0>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d003      	beq.n	80061d2 <TIM_OC3_SetConfig+0x66>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a20      	ldr	r2, [pc, #128]	@ (8006250 <TIM_OC3_SetConfig+0xe4>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d10d      	bne.n	80061ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	021b      	lsls	r3, r3, #8
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a16      	ldr	r2, [pc, #88]	@ (800624c <TIM_OC3_SetConfig+0xe0>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d003      	beq.n	80061fe <TIM_OC3_SetConfig+0x92>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a15      	ldr	r2, [pc, #84]	@ (8006250 <TIM_OC3_SetConfig+0xe4>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d113      	bne.n	8006226 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006204:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800620c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	011b      	lsls	r3, r3, #4
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	4313      	orrs	r3, r2
 8006218:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	011b      	lsls	r3, r3, #4
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	4313      	orrs	r3, r2
 8006224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	685a      	ldr	r2, [r3, #4]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	621a      	str	r2, [r3, #32]
}
 8006240:	bf00      	nop
 8006242:	371c      	adds	r7, #28
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	40010000 	.word	0x40010000
 8006250:	40010400 	.word	0x40010400

08006254 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a1b      	ldr	r3, [r3, #32]
 8006262:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6a1b      	ldr	r3, [r3, #32]
 8006268:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800628a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	021b      	lsls	r3, r3, #8
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	4313      	orrs	r3, r2
 8006296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800629e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	031b      	lsls	r3, r3, #12
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	4a12      	ldr	r2, [pc, #72]	@ (80062f8 <TIM_OC4_SetConfig+0xa4>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d003      	beq.n	80062bc <TIM_OC4_SetConfig+0x68>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	4a11      	ldr	r2, [pc, #68]	@ (80062fc <TIM_OC4_SetConfig+0xa8>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d109      	bne.n	80062d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	695b      	ldr	r3, [r3, #20]
 80062c8:	019b      	lsls	r3, r3, #6
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	621a      	str	r2, [r3, #32]
}
 80062ea:	bf00      	nop
 80062ec:	371c      	adds	r7, #28
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	40010000 	.word	0x40010000
 80062fc:	40010400 	.word	0x40010400

08006300 <TIM_TI1_SetConfig>:
=======
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d105      	bne.n	8002a5e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	f023 0201 	bic.w	r2, r3, #1
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	611a      	str	r2, [r3, #16]
  }
}
 8002a5e:	bf00      	nop
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	40010000 	.word	0x40010000
 8002a70:	40000400 	.word	0x40000400
 8002a74:	40000800 	.word	0x40000800
 8002a78:	40000c00 	.word	0x40000c00
 8002a7c:	40010400 	.word	0x40010400
 8002a80:	40014000 	.word	0x40014000
 8002a84:	40014400 	.word	0x40014400
 8002a88:	40014800 	.word	0x40014800
 8002a8c:	40001800 	.word	0x40001800
 8002a90:	40001c00 	.word	0x40001c00
 8002a94:	40002000 	.word	0x40002000

08002a98 <TIM_TI1_SetConfig>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
 800630c:	603b      	str	r3, [r7, #0]
=======
 8002a98:	b480      	push	{r7}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	f023 0201 	bic.w	r2, r3, #1
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	4a28      	ldr	r2, [pc, #160]	@ (80063cc <TIM_TI1_SetConfig+0xcc>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d01b      	beq.n	8006366 <TIM_TI1_SetConfig+0x66>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006334:	d017      	beq.n	8006366 <TIM_TI1_SetConfig+0x66>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	4a25      	ldr	r2, [pc, #148]	@ (80063d0 <TIM_TI1_SetConfig+0xd0>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d013      	beq.n	8006366 <TIM_TI1_SetConfig+0x66>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	4a24      	ldr	r2, [pc, #144]	@ (80063d4 <TIM_TI1_SetConfig+0xd4>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d00f      	beq.n	8006366 <TIM_TI1_SetConfig+0x66>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	4a23      	ldr	r2, [pc, #140]	@ (80063d8 <TIM_TI1_SetConfig+0xd8>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d00b      	beq.n	8006366 <TIM_TI1_SetConfig+0x66>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	4a22      	ldr	r2, [pc, #136]	@ (80063dc <TIM_TI1_SetConfig+0xdc>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d007      	beq.n	8006366 <TIM_TI1_SetConfig+0x66>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4a21      	ldr	r2, [pc, #132]	@ (80063e0 <TIM_TI1_SetConfig+0xe0>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d003      	beq.n	8006366 <TIM_TI1_SetConfig+0x66>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4a20      	ldr	r2, [pc, #128]	@ (80063e4 <TIM_TI1_SetConfig+0xe4>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d101      	bne.n	800636a <TIM_TI1_SetConfig+0x6a>
 8006366:	2301      	movs	r3, #1
 8006368:	e000      	b.n	800636c <TIM_TI1_SetConfig+0x6c>
 800636a:	2300      	movs	r3, #0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d008      	beq.n	8006382 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	f023 0303 	bic.w	r3, r3, #3
 8006376:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4313      	orrs	r3, r2
 800637e:	617b      	str	r3, [r7, #20]
 8006380:	e003      	b.n	800638a <TIM_TI1_SetConfig+0x8a>
=======
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	f023 0201 	bic.w	r2, r3, #1
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	4a28      	ldr	r2, [pc, #160]	@ (8002b64 <TIM_TI1_SetConfig+0xcc>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d01b      	beq.n	8002afe <TIM_TI1_SetConfig+0x66>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002acc:	d017      	beq.n	8002afe <TIM_TI1_SetConfig+0x66>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	4a25      	ldr	r2, [pc, #148]	@ (8002b68 <TIM_TI1_SetConfig+0xd0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d013      	beq.n	8002afe <TIM_TI1_SetConfig+0x66>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4a24      	ldr	r2, [pc, #144]	@ (8002b6c <TIM_TI1_SetConfig+0xd4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d00f      	beq.n	8002afe <TIM_TI1_SetConfig+0x66>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4a23      	ldr	r2, [pc, #140]	@ (8002b70 <TIM_TI1_SetConfig+0xd8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d00b      	beq.n	8002afe <TIM_TI1_SetConfig+0x66>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4a22      	ldr	r2, [pc, #136]	@ (8002b74 <TIM_TI1_SetConfig+0xdc>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d007      	beq.n	8002afe <TIM_TI1_SetConfig+0x66>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4a21      	ldr	r2, [pc, #132]	@ (8002b78 <TIM_TI1_SetConfig+0xe0>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d003      	beq.n	8002afe <TIM_TI1_SetConfig+0x66>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	4a20      	ldr	r2, [pc, #128]	@ (8002b7c <TIM_TI1_SetConfig+0xe4>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d101      	bne.n	8002b02 <TIM_TI1_SetConfig+0x6a>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <TIM_TI1_SetConfig+0x6c>
 8002b02:	2300      	movs	r3, #0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f023 0303 	bic.w	r3, r3, #3
 8002b0e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	e003      	b.n	8002b22 <TIM_TI1_SetConfig+0x8a>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
<<<<<<< HEAD
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f043 0301 	orr.w	r3, r3, #1
 8006388:	617b      	str	r3, [r7, #20]
=======
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	617b      	str	r3, [r7, #20]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
<<<<<<< HEAD
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006390:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	011b      	lsls	r3, r3, #4
 8006396:	b2db      	uxtb	r3, r3
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	4313      	orrs	r3, r2
 800639c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	f023 030a 	bic.w	r3, r3, #10
 80063a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	f003 030a 	and.w	r3, r3, #10
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	621a      	str	r2, [r3, #32]
}
 80063be:	bf00      	nop
 80063c0:	371c      	adds	r7, #28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	40010000 	.word	0x40010000
 80063d0:	40000400 	.word	0x40000400
 80063d4:	40000800 	.word	0x40000800
 80063d8:	40000c00 	.word	0x40000c00
 80063dc:	40010400 	.word	0x40010400
 80063e0:	40014000 	.word	0x40014000
 80063e4:	40001800 	.word	0x40001800

080063e8 <TIM_TI2_SetConfig>:
=======
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	f023 030a 	bic.w	r3, r3, #10
 8002b3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	f003 030a 	and.w	r3, r3, #10
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	621a      	str	r2, [r3, #32]
}
 8002b56:	bf00      	nop
 8002b58:	371c      	adds	r7, #28
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	40010000 	.word	0x40010000
 8002b68:	40000400 	.word	0x40000400
 8002b6c:	40000800 	.word	0x40000800
 8002b70:	40000c00 	.word	0x40000c00
 8002b74:	40010400 	.word	0x40010400
 8002b78:	40014000 	.word	0x40014000
 8002b7c:	40001800 	.word	0x40001800

08002b80 <TIM_TI2_SetConfig>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 80063e8:	b480      	push	{r7}
 80063ea:	b087      	sub	sp, #28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
 80063f4:	603b      	str	r3, [r7, #0]
=======
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	603b      	str	r3, [r7, #0]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6a1b      	ldr	r3, [r3, #32]
 80063fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6a1b      	ldr	r3, [r3, #32]
 8006400:	f023 0210 	bic.w	r2, r3, #16
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	699b      	ldr	r3, [r3, #24]
 800640c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006414:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	021b      	lsls	r3, r3, #8
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	4313      	orrs	r3, r2
 800641e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	031b      	lsls	r3, r3, #12
 800642c:	b29b      	uxth	r3, r3
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	4313      	orrs	r3, r2
 8006432:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800643a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	011b      	lsls	r3, r3, #4
 8006440:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	4313      	orrs	r3, r2
 8006448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	697a      	ldr	r2, [r7, #20]
 8006454:	621a      	str	r2, [r3, #32]
}
 8006456:	bf00      	nop
 8006458:	371c      	adds	r7, #28
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <TIM_TI3_SetConfig>:
=======
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	f023 0210 	bic.w	r2, r3, #16
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	021b      	lsls	r3, r3, #8
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002bbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	031b      	lsls	r3, r3, #12
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002bd2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	621a      	str	r2, [r3, #32]
}
 8002bee:	bf00      	nop
 8002bf0:	371c      	adds	r7, #28
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <TIM_TI3_SetConfig>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8006462:	b480      	push	{r7}
 8006464:	b087      	sub	sp, #28
 8006466:	af00      	add	r7, sp, #0
 8006468:	60f8      	str	r0, [r7, #12]
 800646a:	60b9      	str	r1, [r7, #8]
 800646c:	607a      	str	r2, [r7, #4]
 800646e:	603b      	str	r3, [r7, #0]
=======
 8002bfa:	b480      	push	{r7}
 8002bfc:	b087      	sub	sp, #28
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	60f8      	str	r0, [r7, #12]
 8002c02:	60b9      	str	r1, [r7, #8]
 8002c04:	607a      	str	r2, [r7, #4]
 8002c06:	603b      	str	r3, [r7, #0]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	69db      	ldr	r3, [r3, #28]
 8006486:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	f023 0303 	bic.w	r3, r3, #3
 800648e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4313      	orrs	r3, r2
 8006496:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800649e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	011b      	lsls	r3, r3, #4
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80064b2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	021b      	lsls	r3, r3, #8
 80064b8:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	4313      	orrs	r3, r2
 80064c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	621a      	str	r2, [r3, #32]
}
 80064ce:	bf00      	nop
 80064d0:	371c      	adds	r7, #28
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <TIM_TI4_SetConfig>:
=======
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	69db      	ldr	r3, [r3, #28]
 8002c1e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	f023 0303 	bic.w	r3, r3, #3
 8002c26:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c36:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8002c4a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	021b      	lsls	r3, r3, #8
 8002c50:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	621a      	str	r2, [r3, #32]
}
 8002c66:	bf00      	nop
 8002c68:	371c      	adds	r7, #28
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <TIM_TI4_SetConfig>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 80064da:	b480      	push	{r7}
 80064dc:	b087      	sub	sp, #28
 80064de:	af00      	add	r7, sp, #0
 80064e0:	60f8      	str	r0, [r7, #12]
 80064e2:	60b9      	str	r1, [r7, #8]
 80064e4:	607a      	str	r2, [r7, #4]
 80064e6:	603b      	str	r3, [r7, #0]
=======
 8002c72:	b480      	push	{r7}
 8002c74:	b087      	sub	sp, #28
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	60f8      	str	r0, [r7, #12]
 8002c7a:	60b9      	str	r1, [r7, #8]
 8002c7c:	607a      	str	r2, [r7, #4]
 8002c7e:	603b      	str	r3, [r7, #0]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6a1b      	ldr	r3, [r3, #32]
 80064ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	69db      	ldr	r3, [r3, #28]
 80064fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006506:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	021b      	lsls	r3, r3, #8
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	4313      	orrs	r3, r2
 8006510:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006518:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	031b      	lsls	r3, r3, #12
 800651e:	b29b      	uxth	r3, r3
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	4313      	orrs	r3, r2
 8006524:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800652c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	031b      	lsls	r3, r3, #12
 8006532:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	4313      	orrs	r3, r2
 800653a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	621a      	str	r2, [r3, #32]
}
 8006548:	bf00      	nop
 800654a:	371c      	adds	r7, #28
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	f003 031f 	and.w	r3, r3, #31
 8006566:	2201      	movs	r2, #1
 8006568:	fa02 f303 	lsl.w	r3, r2, r3
 800656c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6a1a      	ldr	r2, [r3, #32]
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	43db      	mvns	r3, r3
 8006576:	401a      	ands	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6a1a      	ldr	r2, [r3, #32]
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f003 031f 	and.w	r3, r3, #31
 8006586:	6879      	ldr	r1, [r7, #4]
 8006588:	fa01 f303 	lsl.w	r3, r1, r3
 800658c:	431a      	orrs	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	621a      	str	r2, [r3, #32]
}
 8006592:	bf00      	nop
 8006594:	371c      	adds	r7, #28
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
	...

080065a0 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c9e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	021b      	lsls	r3, r3, #8
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002cb0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	031b      	lsls	r3, r3, #12
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8002cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	031b      	lsls	r3, r3, #12
 8002cca:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	621a      	str	r2, [r3, #32]
}
 8002ce0:	bf00      	nop
 8002ce2:	371c      	adds	r7, #28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
=======
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d101      	bne.n	80065b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065b4:	2302      	movs	r3, #2
 80065b6:	e05a      	b.n	800666e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2202      	movs	r2, #2
 80065c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a21      	ldr	r2, [pc, #132]	@ (800667c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d022      	beq.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006604:	d01d      	beq.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a1d      	ldr	r2, [pc, #116]	@ (8006680 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d018      	beq.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a1b      	ldr	r2, [pc, #108]	@ (8006684 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d013      	beq.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a1a      	ldr	r2, [pc, #104]	@ (8006688 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d00e      	beq.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a18      	ldr	r2, [pc, #96]	@ (800668c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d009      	beq.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a17      	ldr	r2, [pc, #92]	@ (8006690 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d004      	beq.n	8006642 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a15      	ldr	r2, [pc, #84]	@ (8006694 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d10c      	bne.n	800665c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006648:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	4313      	orrs	r3, r2
 8006652:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	609a      	str	r2, [r3, #8]
=======
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e05a      	b.n	8002dba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a21      	ldr	r2, [pc, #132]	@ (8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d022      	beq.n	8002d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d50:	d01d      	beq.n	8002d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a1d      	ldr	r2, [pc, #116]	@ (8002dcc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d018      	beq.n	8002d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a1b      	ldr	r2, [pc, #108]	@ (8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d013      	beq.n	8002d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a1a      	ldr	r2, [pc, #104]	@ (8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d00e      	beq.n	8002d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a18      	ldr	r2, [pc, #96]	@ (8002dd8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d009      	beq.n	8002d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a17      	ldr	r2, [pc, #92]	@ (8002ddc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d004      	beq.n	8002d8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a15      	ldr	r2, [pc, #84]	@ (8002de0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d10c      	bne.n	8002da8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	609a      	str	r2, [r3, #8]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3714      	adds	r7, #20
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	40010000 	.word	0x40010000
 8006680:	40000400 	.word	0x40000400
 8006684:	40000800 	.word	0x40000800
 8006688:	40000c00 	.word	0x40000c00
 800668c:	40010400 	.word	0x40010400
 8006690:	40014000 	.word	0x40014000
 8006694:	40001800 	.word	0x40001800

08006698 <HAL_TIMEx_CommutCallback>:
=======
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40010000 	.word	0x40010000
 8002dcc:	40000400 	.word	0x40000400
 8002dd0:	40000800 	.word	0x40000800
 8002dd4:	40000c00 	.word	0x40000c00
 8002dd8:	40010400 	.word	0x40010400
 8002ddc:	40014000 	.word	0x40014000
 8002de0:	40001800 	.word	0x40001800

08002de4 <HAL_TIMEx_CommutCallback>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
=======
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_TIMEx_BreakCallback>:
=======
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_TIMEx_BreakCallback>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
=======
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_UART_Init>:
=======
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_UART_Init>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e042      	b.n	8006758 <HAL_UART_Init+0x98>
=======
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e042      	b.n	8002ea4 <HAL_UART_Init+0x98>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d106      	bne.n	80066ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
=======
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d106      	bne.n	8002e38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f7fc fc30 	bl	8002f4c <HAL_UART_MspInit>
=======
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7fe f912 	bl	800105c <HAL_UART_MspInit>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2224      	movs	r2, #36	@ 0x24
 80066f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68da      	ldr	r2, [r3, #12]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006702:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 fdbd 	bl	8007284 <UART_SetConfig>
=======
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2224      	movs	r2, #36	@ 0x24
 8002e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 fdbd 	bl	80039d0 <UART_SetConfig>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	691a      	ldr	r2, [r3, #16]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006718:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	695a      	ldr	r2, [r3, #20]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006728:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68da      	ldr	r2, [r3, #12]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006738:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2220      	movs	r2, #32
 8006744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2220      	movs	r2, #32
 800674c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3708      	adds	r7, #8
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <HAL_UART_Transmit>:
=======
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695a      	ldr	r2, [r3, #20]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_UART_Transmit>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 8006760:	b580      	push	{r7, lr}
 8006762:	b08a      	sub	sp, #40	@ 0x28
 8006764:	af02      	add	r7, sp, #8
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	603b      	str	r3, [r7, #0]
 800676c:	4613      	mov	r3, r2
 800676e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006770:	2300      	movs	r3, #0
 8006772:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800677a:	b2db      	uxtb	r3, r3
 800677c:	2b20      	cmp	r3, #32
 800677e:	d175      	bne.n	800686c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d002      	beq.n	800678c <HAL_UART_Transmit+0x2c>
 8006786:	88fb      	ldrh	r3, [r7, #6]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d101      	bne.n	8006790 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e06e      	b.n	800686e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2221      	movs	r2, #33	@ 0x21
 800679a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800679e:	f7fc fdfd 	bl	800339c <HAL_GetTick>
 80067a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	88fa      	ldrh	r2, [r7, #6]
 80067a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	88fa      	ldrh	r2, [r7, #6]
 80067ae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067b8:	d108      	bne.n	80067cc <HAL_UART_Transmit+0x6c>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	691b      	ldr	r3, [r3, #16]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d104      	bne.n	80067cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80067c2:	2300      	movs	r3, #0
 80067c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	61bb      	str	r3, [r7, #24]
 80067ca:	e003      	b.n	80067d4 <HAL_UART_Transmit+0x74>
=======
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08a      	sub	sp, #40	@ 0x28
 8002eb0:	af02      	add	r7, sp, #8
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b20      	cmp	r3, #32
 8002eca:	d175      	bne.n	8002fb8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <HAL_UART_Transmit+0x2c>
 8002ed2:	88fb      	ldrh	r3, [r7, #6]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e06e      	b.n	8002fba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2221      	movs	r2, #33	@ 0x21
 8002ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eea:	f7fe fa91 	bl	8001410 <HAL_GetTick>
 8002eee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	88fa      	ldrh	r2, [r7, #6]
 8002ef4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	88fa      	ldrh	r2, [r7, #6]
 8002efa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f04:	d108      	bne.n	8002f18 <HAL_UART_Transmit+0x6c>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d104      	bne.n	8002f18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	61bb      	str	r3, [r7, #24]
 8002f16:	e003      	b.n	8002f20 <HAL_UART_Transmit+0x74>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    }
    else
    {
      pdata8bits  = pData;
<<<<<<< HEAD
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067d0:	2300      	movs	r3, #0
 80067d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80067d4:	e02e      	b.n	8006834 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	9300      	str	r3, [sp, #0]
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	2200      	movs	r2, #0
 80067de:	2180      	movs	r1, #128	@ 0x80
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 fb1f 	bl	8006e24 <UART_WaitOnFlagUntilTimeout>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d005      	beq.n	80067f8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2220      	movs	r2, #32
 80067f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e03a      	b.n	800686e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10b      	bne.n	8006816 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	881b      	ldrh	r3, [r3, #0]
 8006802:	461a      	mov	r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800680c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	3302      	adds	r3, #2
 8006812:	61bb      	str	r3, [r7, #24]
 8006814:	e007      	b.n	8006826 <HAL_UART_Transmit+0xc6>
=======
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f20:	e02e      	b.n	8002f80 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2180      	movs	r1, #128	@ 0x80
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 fb1f 	bl	8003570 <UART_WaitOnFlagUntilTimeout>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d005      	beq.n	8002f44 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e03a      	b.n	8002fba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10b      	bne.n	8002f62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	3302      	adds	r3, #2
 8002f5e:	61bb      	str	r3, [r7, #24]
 8002f60:	e007      	b.n	8002f72 <HAL_UART_Transmit+0xc6>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
<<<<<<< HEAD
 8006816:	69fb      	ldr	r3, [r7, #28]
 8006818:	781a      	ldrb	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	3301      	adds	r3, #1
 8006824:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800682a:	b29b      	uxth	r3, r3
 800682c:	3b01      	subs	r3, #1
 800682e:	b29a      	uxth	r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006838:	b29b      	uxth	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1cb      	bne.n	80067d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	2200      	movs	r2, #0
 8006846:	2140      	movs	r1, #64	@ 0x40
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 faeb 	bl	8006e24 <UART_WaitOnFlagUntilTimeout>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d005      	beq.n	8006860 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2220      	movs	r2, #32
 8006858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e006      	b.n	800686e <HAL_UART_Transmit+0x10e>
=======
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	781a      	ldrb	r2, [r3, #0]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1cb      	bne.n	8002f22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2200      	movs	r2, #0
 8002f92:	2140      	movs	r1, #64	@ 0x40
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 faeb 	bl	8003570 <UART_WaitOnFlagUntilTimeout>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d005      	beq.n	8002fac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2220      	movs	r2, #32
 8002fa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e006      	b.n	8002fba <HAL_UART_Transmit+0x10e>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2220      	movs	r2, #32
 8006864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006868:	2300      	movs	r3, #0
 800686a:	e000      	b.n	800686e <HAL_UART_Transmit+0x10e>
=======
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	e000      	b.n	8002fba <HAL_UART_Transmit+0x10e>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 800686c:	2302      	movs	r3, #2
  }
}
 800686e:	4618      	mov	r0, r3
 8006870:	3720      	adds	r7, #32
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <HAL_UART_Receive_IT>:
=======
 8002fb8:	2302      	movs	r3, #2
  }
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3720      	adds	r7, #32
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_UART_Receive_IT>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 8006876:	b580      	push	{r7, lr}
 8006878:	b084      	sub	sp, #16
 800687a:	af00      	add	r7, sp, #0
 800687c:	60f8      	str	r0, [r7, #12]
 800687e:	60b9      	str	r1, [r7, #8]
 8006880:	4613      	mov	r3, r2
 8006882:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b20      	cmp	r3, #32
 800688e:	d112      	bne.n	80068b6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d002      	beq.n	800689c <HAL_UART_Receive_IT+0x26>
 8006896:	88fb      	ldrh	r3, [r7, #6]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d101      	bne.n	80068a0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e00b      	b.n	80068b8 <HAL_UART_Receive_IT+0x42>
=======
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b084      	sub	sp, #16
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	60f8      	str	r0, [r7, #12]
 8002fca:	60b9      	str	r1, [r7, #8]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b20      	cmp	r3, #32
 8002fda:	d112      	bne.n	8003002 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <HAL_UART_Receive_IT+0x26>
 8002fe2:	88fb      	ldrh	r3, [r7, #6]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e00b      	b.n	8003004 <HAL_UART_Receive_IT+0x42>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
<<<<<<< HEAD
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2200      	movs	r2, #0
 80068a4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80068a6:	88fb      	ldrh	r3, [r7, #6]
 80068a8:	461a      	mov	r2, r3
 80068aa:	68b9      	ldr	r1, [r7, #8]
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f000 fb12 	bl	8006ed6 <UART_Start_Receive_IT>
 80068b2:	4603      	mov	r3, r0
 80068b4:	e000      	b.n	80068b8 <HAL_UART_Receive_IT+0x42>
=======
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002ff2:	88fb      	ldrh	r3, [r7, #6]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	68b9      	ldr	r1, [r7, #8]
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 fb12 	bl	8003622 <UART_Start_Receive_IT>
 8002ffe:	4603      	mov	r3, r0
 8003000:	e000      	b.n	8003004 <HAL_UART_Receive_IT+0x42>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80068b6:	2302      	movs	r3, #2
  }
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <HAL_UART_IRQHandler>:
=======
 8003002:	2302      	movs	r3, #2
  }
}
 8003004:	4618      	mov	r0, r3
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_UART_IRQHandler>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b0ba      	sub	sp, #232	@ 0xe8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80068e6:	2300      	movs	r3, #0
 80068e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80068f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068f6:	f003 030f 	and.w	r3, r3, #15
 80068fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80068fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10f      	bne.n	8006926 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800690a:	f003 0320 	and.w	r3, r3, #32
 800690e:	2b00      	cmp	r3, #0
 8006910:	d009      	beq.n	8006926 <HAL_UART_IRQHandler+0x66>
 8006912:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006916:	f003 0320 	and.w	r3, r3, #32
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 fbf2 	bl	8007108 <UART_Receive_IT>
      return;
 8006924:	e25b      	b.n	8006dde <HAL_UART_IRQHandler+0x51e>
=======
 800300c:	b580      	push	{r7, lr}
 800300e:	b0ba      	sub	sp, #232	@ 0xe8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003032:	2300      	movs	r3, #0
 8003034:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003038:	2300      	movs	r3, #0
 800303a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800303e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800304a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10f      	bne.n	8003072 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003056:	f003 0320 	and.w	r3, r3, #32
 800305a:	2b00      	cmp	r3, #0
 800305c:	d009      	beq.n	8003072 <HAL_UART_IRQHandler+0x66>
 800305e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003062:	f003 0320 	and.w	r3, r3, #32
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fbf2 	bl	8003854 <UART_Receive_IT>
      return;
 8003070:	e25b      	b.n	800352a <HAL_UART_IRQHandler+0x51e>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
<<<<<<< HEAD
 8006926:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800692a:	2b00      	cmp	r3, #0
 800692c:	f000 80de 	beq.w	8006aec <HAL_UART_IRQHandler+0x22c>
 8006930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	2b00      	cmp	r3, #0
 800693a:	d106      	bne.n	800694a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800693c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006940:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 80d1 	beq.w	8006aec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800694a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00b      	beq.n	800696e <HAL_UART_IRQHandler+0xae>
 8006956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800695a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800695e:	2b00      	cmp	r3, #0
 8006960:	d005      	beq.n	800696e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006966:	f043 0201 	orr.w	r2, r3, #1
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8003072:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 80de 	beq.w	8003238 <HAL_UART_IRQHandler+0x22c>
 800307c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b00      	cmp	r3, #0
 8003086:	d106      	bne.n	8003096 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800308c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 80d1 	beq.w	8003238 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00b      	beq.n	80030ba <HAL_UART_IRQHandler+0xae>
 80030a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d005      	beq.n	80030ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b2:	f043 0201 	orr.w	r2, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
 800696e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006972:	f003 0304 	and.w	r3, r3, #4
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00b      	beq.n	8006992 <HAL_UART_IRQHandler+0xd2>
 800697a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	2b00      	cmp	r3, #0
 8006984:	d005      	beq.n	8006992 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800698a:	f043 0202 	orr.w	r2, r3, #2
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 80030ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00b      	beq.n	80030de <HAL_UART_IRQHandler+0xd2>
 80030c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d005      	beq.n	80030de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d6:	f043 0202 	orr.w	r2, r3, #2
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
 8006992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00b      	beq.n	80069b6 <HAL_UART_IRQHandler+0xf6>
 800699e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069a2:	f003 0301 	and.w	r3, r3, #1
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d005      	beq.n	80069b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ae:	f043 0204 	orr.w	r2, r3, #4
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 80030de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00b      	beq.n	8003102 <HAL_UART_IRQHandler+0xf6>
 80030ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d005      	beq.n	8003102 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fa:	f043 0204 	orr.w	r2, r3, #4
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
<<<<<<< HEAD
 80069b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069ba:	f003 0308 	and.w	r3, r3, #8
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d011      	beq.n	80069e6 <HAL_UART_IRQHandler+0x126>
 80069c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069c6:	f003 0320 	and.w	r3, r3, #32
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d105      	bne.n	80069da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80069ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d005      	beq.n	80069e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069de:	f043 0208 	orr.w	r2, r3, #8
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	645a      	str	r2, [r3, #68]	@ 0x44
=======
 8003102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d011      	beq.n	8003132 <HAL_UART_IRQHandler+0x126>
 800310e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003112:	f003 0320 	and.w	r3, r3, #32
 8003116:	2b00      	cmp	r3, #0
 8003118:	d105      	bne.n	8003126 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800311a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b00      	cmp	r3, #0
 8003124:	d005      	beq.n	8003132 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800312a:	f043 0208 	orr.w	r2, r3, #8
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	645a      	str	r2, [r3, #68]	@ 0x44
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f000 81f2 	beq.w	8006dd4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069f4:	f003 0320 	and.w	r3, r3, #32
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d008      	beq.n	8006a0e <HAL_UART_IRQHandler+0x14e>
 80069fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a00:	f003 0320 	and.w	r3, r3, #32
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d002      	beq.n	8006a0e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 fb7d 	bl	8007108 <UART_Receive_IT>
=======
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 81f2 	beq.w	8003520 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800313c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003140:	f003 0320 	and.w	r3, r3, #32
 8003144:	2b00      	cmp	r3, #0
 8003146:	d008      	beq.n	800315a <HAL_UART_IRQHandler+0x14e>
 8003148:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800314c:	f003 0320 	and.w	r3, r3, #32
 8003150:	2b00      	cmp	r3, #0
 8003152:	d002      	beq.n	800315a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 fb7d 	bl	8003854 <UART_Receive_IT>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	695b      	ldr	r3, [r3, #20]
 8006a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a18:	2b40      	cmp	r3, #64	@ 0x40
 8006a1a:	bf0c      	ite	eq
 8006a1c:	2301      	moveq	r3, #1
 8006a1e:	2300      	movne	r3, #0
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a2a:	f003 0308 	and.w	r3, r3, #8
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d103      	bne.n	8006a3a <HAL_UART_IRQHandler+0x17a>
 8006a32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d04f      	beq.n	8006ada <HAL_UART_IRQHandler+0x21a>
=======
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003164:	2b40      	cmp	r3, #64	@ 0x40
 8003166:	bf0c      	ite	eq
 8003168:	2301      	moveq	r3, #1
 800316a:	2300      	movne	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	2b00      	cmp	r3, #0
 800317c:	d103      	bne.n	8003186 <HAL_UART_IRQHandler+0x17a>
 800317e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003182:	2b00      	cmp	r3, #0
 8003184:	d04f      	beq.n	8003226 <HAL_UART_IRQHandler+0x21a>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fa85 	bl	8006f4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a4a:	2b40      	cmp	r3, #64	@ 0x40
 8006a4c:	d141      	bne.n	8006ad2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	3314      	adds	r3, #20
 8006a54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006a64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3314      	adds	r3, #20
 8006a76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006a7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006a7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006a86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006a8a:	e841 2300 	strex	r3, r2, [r1]
 8006a8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006a92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1d9      	bne.n	8006a4e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d013      	beq.n	8006aca <HAL_UART_IRQHandler+0x20a>
=======
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 fa85 	bl	8003696 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003196:	2b40      	cmp	r3, #64	@ 0x40
 8003198:	d141      	bne.n	800321e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	3314      	adds	r3, #20
 80031a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80031a8:	e853 3f00 	ldrex	r3, [r3]
 80031ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80031b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80031b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	3314      	adds	r3, #20
 80031c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80031c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80031ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80031d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80031d6:	e841 2300 	strex	r3, r2, [r1]
 80031da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80031de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1d9      	bne.n	800319a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d013      	beq.n	8003216 <HAL_UART_IRQHandler+0x20a>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< HEAD
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa6:	4a7e      	ldr	r2, [pc, #504]	@ (8006ca0 <HAL_UART_IRQHandler+0x3e0>)
 8006aa8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7fd fa25 	bl	8003efe <HAL_DMA_Abort_IT>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d016      	beq.n	8006ae8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006abe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006ac4:	4610      	mov	r0, r2
 8006ac6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac8:	e00e      	b.n	8006ae8 <HAL_UART_IRQHandler+0x228>
=======
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f2:	4a7e      	ldr	r2, [pc, #504]	@ (80033ec <HAL_UART_IRQHandler+0x3e0>)
 80031f4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fe fab9 	bl	8001772 <HAL_DMA_Abort_IT>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d016      	beq.n	8003234 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800320a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003210:	4610      	mov	r0, r2
 8003212:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003214:	e00e      	b.n	8003234 <HAL_UART_IRQHandler+0x228>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f994 	bl	8006df8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ad0:	e00a      	b.n	8006ae8 <HAL_UART_IRQHandler+0x228>
=======
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f994 	bl	8003544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800321c:	e00a      	b.n	8003234 <HAL_UART_IRQHandler+0x228>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f000 f990 	bl	8006df8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ad8:	e006      	b.n	8006ae8 <HAL_UART_IRQHandler+0x228>
=======
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f990 	bl	8003544 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003224:	e006      	b.n	8003234 <HAL_UART_IRQHandler+0x228>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f98c 	bl	8006df8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006ae6:	e175      	b.n	8006dd4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae8:	bf00      	nop
    return;
 8006aea:	e173      	b.n	8006dd4 <HAL_UART_IRQHandler+0x514>
=======
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f98c 	bl	8003544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003232:	e175      	b.n	8003520 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003234:	bf00      	nop
    return;
 8003236:	e173      	b.n	8003520 <HAL_UART_IRQHandler+0x514>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	f040 814f 	bne.w	8006d94 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006afa:	f003 0310 	and.w	r3, r3, #16
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 8148 	beq.w	8006d94 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b08:	f003 0310 	and.w	r3, r3, #16
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 8141 	beq.w	8006d94 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b12:	2300      	movs	r3, #0
 8006b14:	60bb      	str	r3, [r7, #8]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	60bb      	str	r3, [r7, #8]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	60bb      	str	r3, [r7, #8]
 8006b26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b32:	2b40      	cmp	r3, #64	@ 0x40
 8006b34:	f040 80b6 	bne.w	8006ca4 <HAL_UART_IRQHandler+0x3e4>
=======
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323c:	2b01      	cmp	r3, #1
 800323e:	f040 814f 	bne.w	80034e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003242:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003246:	f003 0310 	and.w	r3, r3, #16
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 8148 	beq.w	80034e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003254:	f003 0310 	and.w	r3, r3, #16
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 8141 	beq.w	80034e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800325e:	2300      	movs	r3, #0
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	60bb      	str	r3, [r7, #8]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800327e:	2b40      	cmp	r3, #64	@ 0x40
 8003280:	f040 80b6 	bne.w	80033f0 <HAL_UART_IRQHandler+0x3e4>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< HEAD
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 8145 	beq.w	8006dd8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006b52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b56:	429a      	cmp	r2, r3
 8006b58:	f080 813e 	bcs.w	8006dd8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b62:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b6e:	f000 8088 	beq.w	8006c82 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	330c      	adds	r3, #12
 8006b78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b80:	e853 3f00 	ldrex	r3, [r3]
 8006b84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006b88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	330c      	adds	r3, #12
 8006b9a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006b9e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ba2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006baa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006bae:	e841 2300 	strex	r3, r2, [r1]
 8006bb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006bb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1d9      	bne.n	8006b72 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	3314      	adds	r3, #20
 8006bc4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006bc8:	e853 3f00 	ldrex	r3, [r3]
 8006bcc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006bce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006bd0:	f023 0301 	bic.w	r3, r3, #1
 8006bd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3314      	adds	r3, #20
 8006bde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006be2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006be6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006bea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006bee:	e841 2300 	strex	r3, r2, [r1]
 8006bf2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006bf4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1e1      	bne.n	8006bbe <HAL_UART_IRQHandler+0x2fe>
=======
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003290:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 8145 	beq.w	8003524 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800329e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032a2:	429a      	cmp	r2, r3
 80032a4:	f080 813e 	bcs.w	8003524 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80032ae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032ba:	f000 8088 	beq.w	80033ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	330c      	adds	r3, #12
 80032c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80032cc:	e853 3f00 	ldrex	r3, [r3]
 80032d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80032d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80032d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	330c      	adds	r3, #12
 80032e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80032ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80032ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80032f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80032fa:	e841 2300 	strex	r3, r2, [r1]
 80032fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003302:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1d9      	bne.n	80032be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	3314      	adds	r3, #20
 8003310:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003312:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003314:	e853 3f00 	ldrex	r3, [r3]
 8003318:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800331a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800331c:	f023 0301 	bic.w	r3, r3, #1
 8003320:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	3314      	adds	r3, #20
 800332a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800332e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003332:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003334:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003336:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800333a:	e841 2300 	strex	r3, r2, [r1]
 800333e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003340:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1e1      	bne.n	800330a <HAL_UART_IRQHandler+0x2fe>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	3314      	adds	r3, #20
 8006c00:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c04:	e853 3f00 	ldrex	r3, [r3]
 8006c08:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006c0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	3314      	adds	r3, #20
 8006c1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006c1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006c20:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c22:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006c24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006c26:	e841 2300 	strex	r3, r2, [r1]
 8006c2a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006c2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1e3      	bne.n	8006bfa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2220      	movs	r2, #32
 8006c36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	330c      	adds	r3, #12
 8006c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c4a:	e853 3f00 	ldrex	r3, [r3]
 8006c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c52:	f023 0310 	bic.w	r3, r3, #16
 8006c56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	330c      	adds	r3, #12
 8006c60:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006c64:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006c66:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c68:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c6a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c6c:	e841 2300 	strex	r3, r2, [r1]
 8006c70:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1e3      	bne.n	8006c40 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fd f8ce 	bl	8003e1e <HAL_DMA_Abort>
=======
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	3314      	adds	r3, #20
 800334c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003350:	e853 3f00 	ldrex	r3, [r3]
 8003354:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003356:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003358:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800335c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3314      	adds	r3, #20
 8003366:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800336a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800336c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800336e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003370:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003372:	e841 2300 	strex	r3, r2, [r1]
 8003376:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003378:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1e3      	bne.n	8003346 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2220      	movs	r2, #32
 8003382:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	330c      	adds	r3, #12
 8003392:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003394:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003396:	e853 3f00 	ldrex	r3, [r3]
 800339a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800339c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800339e:	f023 0310 	bic.w	r3, r3, #16
 80033a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	330c      	adds	r3, #12
 80033ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80033b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80033b2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033b8:	e841 2300 	strex	r3, r2, [r1]
 80033bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80033be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1e3      	bne.n	800338c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7fe f962 	bl	8001692 <HAL_DMA_Abort>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< HEAD
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2202      	movs	r2, #2
 8006c86:	635a      	str	r2, [r3, #52]	@ 0x34
=======
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2202      	movs	r2, #2
 80033d2:	635a      	str	r2, [r3, #52]	@ 0x34
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< HEAD
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	4619      	mov	r1, r3
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f8b7 	bl	8006e0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c9e:	e09b      	b.n	8006dd8 <HAL_UART_IRQHandler+0x518>
 8006ca0:	08007011 	.word	0x08007011
=======
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033dc:	b29b      	uxth	r3, r3
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	4619      	mov	r1, r3
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f8b7 	bl	8003558 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80033ea:	e09b      	b.n	8003524 <HAL_UART_IRQHandler+0x518>
 80033ec:	0800375d 	.word	0x0800375d
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< HEAD
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	f000 808e 	beq.w	8006ddc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006cc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 8089 	beq.w	8006ddc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	330c      	adds	r3, #12
 8006cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cd4:	e853 3f00 	ldrex	r3, [r3]
 8006cd8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ce0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	330c      	adds	r3, #12
 8006cea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006cee:	647a      	str	r2, [r7, #68]	@ 0x44
 8006cf0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cf4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cf6:	e841 2300 	strex	r3, r2, [r1]
 8006cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1e3      	bne.n	8006cca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3314      	adds	r3, #20
 8006d08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0c:	e853 3f00 	ldrex	r3, [r3]
 8006d10:	623b      	str	r3, [r7, #32]
   return(result);
 8006d12:	6a3b      	ldr	r3, [r7, #32]
 8006d14:	f023 0301 	bic.w	r3, r3, #1
 8006d18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	3314      	adds	r3, #20
 8006d22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006d26:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d2e:	e841 2300 	strex	r3, r2, [r1]
 8006d32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d1e3      	bne.n	8006d02 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2220      	movs	r2, #32
 8006d3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	330c      	adds	r3, #12
 8006d4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	e853 3f00 	ldrex	r3, [r3]
 8006d56:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f023 0310 	bic.w	r3, r3, #16
 8006d5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	330c      	adds	r3, #12
 8006d68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006d6c:	61fa      	str	r2, [r7, #28]
 8006d6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d70:	69b9      	ldr	r1, [r7, #24]
 8006d72:	69fa      	ldr	r2, [r7, #28]
 8006d74:	e841 2300 	strex	r3, r2, [r1]
 8006d78:	617b      	str	r3, [r7, #20]
   return(result);
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d1e3      	bne.n	8006d48 <HAL_UART_IRQHandler+0x488>
=======
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 808e 	beq.w	8003528 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800340c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 8089 	beq.w	8003528 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	330c      	adds	r3, #12
 800341c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003420:	e853 3f00 	ldrex	r3, [r3]
 8003424:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003428:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800342c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	330c      	adds	r3, #12
 8003436:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800343a:	647a      	str	r2, [r7, #68]	@ 0x44
 800343c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800343e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003440:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003442:	e841 2300 	strex	r3, r2, [r1]
 8003446:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1e3      	bne.n	8003416 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	3314      	adds	r3, #20
 8003454:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003458:	e853 3f00 	ldrex	r3, [r3]
 800345c:	623b      	str	r3, [r7, #32]
   return(result);
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	f023 0301 	bic.w	r3, r3, #1
 8003464:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	3314      	adds	r3, #20
 800346e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003472:	633a      	str	r2, [r7, #48]	@ 0x30
 8003474:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003476:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003478:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800347a:	e841 2300 	strex	r3, r2, [r1]
 800347e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1e3      	bne.n	800344e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2220      	movs	r2, #32
 800348a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2200      	movs	r2, #0
 8003492:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	330c      	adds	r3, #12
 800349a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	e853 3f00 	ldrex	r3, [r3]
 80034a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0310 	bic.w	r3, r3, #16
 80034aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	330c      	adds	r3, #12
 80034b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80034b8:	61fa      	str	r2, [r7, #28]
 80034ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034bc:	69b9      	ldr	r1, [r7, #24]
 80034be:	69fa      	ldr	r2, [r7, #28]
 80034c0:	e841 2300 	strex	r3, r2, [r1]
 80034c4:	617b      	str	r3, [r7, #20]
   return(result);
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1e3      	bne.n	8003494 <HAL_UART_IRQHandler+0x488>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< HEAD
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2202      	movs	r2, #2
 8006d84:	635a      	str	r2, [r3, #52]	@ 0x34
=======
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	635a      	str	r2, [r3, #52]	@ 0x34
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< HEAD
 8006d86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f83d 	bl	8006e0c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d92:	e023      	b.n	8006ddc <HAL_UART_IRQHandler+0x51c>
=======
 80034d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80034d6:	4619      	mov	r1, r3
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f83d 	bl	8003558 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034de:	e023      	b.n	8003528 <HAL_UART_IRQHandler+0x51c>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
<<<<<<< HEAD
 8006d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d009      	beq.n	8006db4 <HAL_UART_IRQHandler+0x4f4>
 8006da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006da4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d003      	beq.n	8006db4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f943 	bl	8007038 <UART_Transmit_IT>
    return;
 8006db2:	e014      	b.n	8006dde <HAL_UART_IRQHandler+0x51e>
=======
 80034e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d009      	beq.n	8003500 <HAL_UART_IRQHandler+0x4f4>
 80034ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d003      	beq.n	8003500 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f943 	bl	8003784 <UART_Transmit_IT>
    return;
 80034fe:	e014      	b.n	800352a <HAL_UART_IRQHandler+0x51e>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
<<<<<<< HEAD
 8006db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00e      	beq.n	8006dde <HAL_UART_IRQHandler+0x51e>
 8006dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d008      	beq.n	8006dde <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 f983 	bl	80070d8 <UART_EndTransmit_IT>
    return;
 8006dd2:	e004      	b.n	8006dde <HAL_UART_IRQHandler+0x51e>
    return;
 8006dd4:	bf00      	nop
 8006dd6:	e002      	b.n	8006dde <HAL_UART_IRQHandler+0x51e>
      return;
 8006dd8:	bf00      	nop
 8006dda:	e000      	b.n	8006dde <HAL_UART_IRQHandler+0x51e>
      return;
 8006ddc:	bf00      	nop
  }
}
 8006dde:	37e8      	adds	r7, #232	@ 0xe8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <HAL_UART_TxCpltCallback>:
=======
 8003500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00e      	beq.n	800352a <HAL_UART_IRQHandler+0x51e>
 800350c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003514:	2b00      	cmp	r3, #0
 8003516:	d008      	beq.n	800352a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 f983 	bl	8003824 <UART_EndTransmit_IT>
    return;
 800351e:	e004      	b.n	800352a <HAL_UART_IRQHandler+0x51e>
    return;
 8003520:	bf00      	nop
 8003522:	e002      	b.n	800352a <HAL_UART_IRQHandler+0x51e>
      return;
 8003524:	bf00      	nop
 8003526:	e000      	b.n	800352a <HAL_UART_IRQHandler+0x51e>
      return;
 8003528:	bf00      	nop
  }
}
 800352a:	37e8      	adds	r7, #232	@ 0xe8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_UART_TxCpltCallback>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
=======
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <HAL_UART_ErrorCallback>:
=======
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_UART_ErrorCallback>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
=======
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_UARTEx_RxEventCallback>:
=======
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_UARTEx_RxEventCallback>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< HEAD
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	460b      	mov	r3, r1
 8006e16:	807b      	strh	r3, [r7, #2]
=======
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	460b      	mov	r3, r1
 8003562:	807b      	strh	r3, [r7, #2]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <UART_WaitOnFlagUntilTimeout>:
=======
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b086      	sub	sp, #24
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	603b      	str	r3, [r7, #0]
 8006e30:	4613      	mov	r3, r2
 8006e32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e34:	e03b      	b.n	8006eae <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e36:	6a3b      	ldr	r3, [r7, #32]
 8006e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e3c:	d037      	beq.n	8006eae <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e3e:	f7fc faad 	bl	800339c <HAL_GetTick>
 8006e42:	4602      	mov	r2, r0
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	6a3a      	ldr	r2, [r7, #32]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d302      	bcc.n	8006e54 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e4e:	6a3b      	ldr	r3, [r7, #32]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e03a      	b.n	8006ece <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	f003 0304 	and.w	r3, r3, #4
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d023      	beq.n	8006eae <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2b80      	cmp	r3, #128	@ 0x80
 8006e6a:	d020      	beq.n	8006eae <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	2b40      	cmp	r3, #64	@ 0x40
 8006e70:	d01d      	beq.n	8006eae <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 0308 	and.w	r3, r3, #8
 8006e7c:	2b08      	cmp	r3, #8
 8006e7e:	d116      	bne.n	8006eae <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006e80:	2300      	movs	r3, #0
 8006e82:	617b      	str	r3, [r7, #20]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	617b      	str	r3, [r7, #20]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	617b      	str	r3, [r7, #20]
 8006e94:	697b      	ldr	r3, [r7, #20]
=======
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	603b      	str	r3, [r7, #0]
 800357c:	4613      	mov	r3, r2
 800357e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003580:	e03b      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003588:	d037      	beq.n	80035fa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800358a:	f7fd ff41 	bl	8001410 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	6a3a      	ldr	r2, [r7, #32]
 8003596:	429a      	cmp	r2, r3
 8003598:	d302      	bcc.n	80035a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e03a      	b.n	800361a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d023      	beq.n	80035fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	2b80      	cmp	r3, #128	@ 0x80
 80035b6:	d020      	beq.n	80035fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b40      	cmp	r3, #64	@ 0x40
 80035bc:	d01d      	beq.n	80035fa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0308 	and.w	r3, r3, #8
 80035c8:	2b08      	cmp	r3, #8
 80035ca:	d116      	bne.n	80035fa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	617b      	str	r3, [r7, #20]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	617b      	str	r3, [r7, #20]
 80035e0:	697b      	ldr	r3, [r7, #20]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f000 f857 	bl	8006f4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2208      	movs	r2, #8
 8006ea0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e00f      	b.n	8006ece <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	bf0c      	ite	eq
 8006ebe:	2301      	moveq	r3, #1
 8006ec0:	2300      	movne	r3, #0
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	79fb      	ldrb	r3, [r7, #7]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d0b4      	beq.n	8006e36 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 f857 	bl	8003696 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2208      	movs	r2, #8
 80035ec:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e00f      	b.n	800361a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	4013      	ands	r3, r2
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	429a      	cmp	r2, r3
 8003608:	bf0c      	ite	eq
 800360a:	2301      	moveq	r3, #1
 800360c:	2300      	movne	r3, #0
 800360e:	b2db      	uxtb	r3, r3
 8003610:	461a      	mov	r2, r3
 8003612:	79fb      	ldrb	r3, [r7, #7]
 8003614:	429a      	cmp	r2, r3
 8003616:	d0b4      	beq.n	8003582 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3718      	adds	r7, #24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <UART_Start_Receive_IT>:
=======
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <UART_Start_Receive_IT>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 8006ed6:	b480      	push	{r7}
 8006ed8:	b085      	sub	sp, #20
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	60f8      	str	r0, [r7, #12]
 8006ede:	60b9      	str	r1, [r7, #8]
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	88fa      	ldrh	r2, [r7, #6]
 8006eee:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	88fa      	ldrh	r2, [r7, #6]
 8006ef4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2222      	movs	r2, #34	@ 0x22
 8006f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d007      	beq.n	8006f1c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68da      	ldr	r2, [r3, #12]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006f1a:	60da      	str	r2, [r3, #12]
=======
 8003622:	b480      	push	{r7}
 8003624:	b085      	sub	sp, #20
 8003626:	af00      	add	r7, sp, #0
 8003628:	60f8      	str	r0, [r7, #12]
 800362a:	60b9      	str	r1, [r7, #8]
 800362c:	4613      	mov	r3, r2
 800362e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	88fa      	ldrh	r2, [r7, #6]
 800363a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	88fa      	ldrh	r2, [r7, #6]
 8003640:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2222      	movs	r2, #34	@ 0x22
 800364c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d007      	beq.n	8003668 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003666:	60da      	str	r2, [r3, #12]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
<<<<<<< HEAD
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	695a      	ldr	r2, [r3, #20]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f042 0201 	orr.w	r2, r2, #1
 8006f2a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68da      	ldr	r2, [r3, #12]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f042 0220 	orr.w	r2, r2, #32
 8006f3a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3714      	adds	r7, #20
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr

08006f4a <UART_EndRxTransfer>:
=======
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695a      	ldr	r2, [r3, #20]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0201 	orr.w	r2, r2, #1
 8003676:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0220 	orr.w	r2, r2, #32
 8003686:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <UART_EndRxTransfer>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8006f4a:	b480      	push	{r7}
 8006f4c:	b095      	sub	sp, #84	@ 0x54
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	330c      	adds	r3, #12
 8006f58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f5c:	e853 3f00 	ldrex	r3, [r3]
 8006f60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	330c      	adds	r3, #12
 8006f70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f72:	643a      	str	r2, [r7, #64]	@ 0x40
 8006f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f7a:	e841 2300 	strex	r3, r2, [r1]
 8006f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1e5      	bne.n	8006f52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3314      	adds	r3, #20
 8006f8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8e:	6a3b      	ldr	r3, [r7, #32]
 8006f90:	e853 3f00 	ldrex	r3, [r3]
 8006f94:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	f023 0301 	bic.w	r3, r3, #1
 8006f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	3314      	adds	r3, #20
 8006fa4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fa6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006faa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006fac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fae:	e841 2300 	strex	r3, r2, [r1]
 8006fb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1e5      	bne.n	8006f86 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d119      	bne.n	8006ff6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	330c      	adds	r3, #12
 8006fc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	e853 3f00 	ldrex	r3, [r3]
 8006fd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	f023 0310 	bic.w	r3, r3, #16
 8006fd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	330c      	adds	r3, #12
 8006fe0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006fe2:	61ba      	str	r2, [r7, #24]
 8006fe4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe6:	6979      	ldr	r1, [r7, #20]
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	e841 2300 	strex	r3, r2, [r1]
 8006fee:	613b      	str	r3, [r7, #16]
   return(result);
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1e5      	bne.n	8006fc2 <UART_EndRxTransfer+0x78>
=======
 8003696:	b480      	push	{r7}
 8003698:	b095      	sub	sp, #84	@ 0x54
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	330c      	adds	r3, #12
 80036a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036a8:	e853 3f00 	ldrex	r3, [r3]
 80036ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	330c      	adds	r3, #12
 80036bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036be:	643a      	str	r2, [r7, #64]	@ 0x40
 80036c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036c6:	e841 2300 	strex	r3, r2, [r1]
 80036ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1e5      	bne.n	800369e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	3314      	adds	r3, #20
 80036d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	e853 3f00 	ldrex	r3, [r3]
 80036e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	f023 0301 	bic.w	r3, r3, #1
 80036e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3314      	adds	r3, #20
 80036f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036fa:	e841 2300 	strex	r3, r2, [r1]
 80036fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1e5      	bne.n	80036d2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370a:	2b01      	cmp	r3, #1
 800370c:	d119      	bne.n	8003742 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	330c      	adds	r3, #12
 8003714:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	e853 3f00 	ldrex	r3, [r3]
 800371c:	60bb      	str	r3, [r7, #8]
   return(result);
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	f023 0310 	bic.w	r3, r3, #16
 8003724:	647b      	str	r3, [r7, #68]	@ 0x44
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	330c      	adds	r3, #12
 800372c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800372e:	61ba      	str	r2, [r7, #24]
 8003730:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003732:	6979      	ldr	r1, [r7, #20]
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	e841 2300 	strex	r3, r2, [r1]
 800373a:	613b      	str	r3, [r7, #16]
   return(result);
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1e5      	bne.n	800370e <UART_EndRxTransfer+0x78>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007004:	bf00      	nop
 8007006:	3754      	adds	r7, #84	@ 0x54
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <UART_DMAAbortOnError>:
=======
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2220      	movs	r2, #32
 8003746:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003750:	bf00      	nop
 8003752:	3754      	adds	r7, #84	@ 0x54
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr

0800375c <UART_DMAAbortOnError>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800701c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	84da      	strh	r2, [r3, #38]	@ 0x26
=======
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003768:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	84da      	strh	r2, [r3, #38]	@ 0x26
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f7ff fee4 	bl	8006df8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007030:	bf00      	nop
 8007032:	3710      	adds	r7, #16
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <UART_Transmit_IT>:
=======
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f7ff fee4 	bl	8003544 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800377c:	bf00      	nop
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <UART_Transmit_IT>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007038:	b480      	push	{r7}
 800703a:	b085      	sub	sp, #20
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
=======
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< HEAD
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007046:	b2db      	uxtb	r3, r3
 8007048:	2b21      	cmp	r3, #33	@ 0x21
 800704a:	d13e      	bne.n	80070ca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007054:	d114      	bne.n	8007080 <UART_Transmit_IT+0x48>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d110      	bne.n	8007080 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a1b      	ldr	r3, [r3, #32]
 8007062:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	461a      	mov	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007072:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	1c9a      	adds	r2, r3, #2
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	621a      	str	r2, [r3, #32]
 800707e:	e008      	b.n	8007092 <UART_Transmit_IT+0x5a>
=======
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b21      	cmp	r3, #33	@ 0x21
 8003796:	d13e      	bne.n	8003816 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037a0:	d114      	bne.n	80037cc <UART_Transmit_IT+0x48>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d110      	bne.n	80037cc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	881b      	ldrh	r3, [r3, #0]
 80037b4:	461a      	mov	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037be:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	1c9a      	adds	r2, r3, #2
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	621a      	str	r2, [r3, #32]
 80037ca:	e008      	b.n	80037de <UART_Transmit_IT+0x5a>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
<<<<<<< HEAD
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	1c59      	adds	r1, r3, #1
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	6211      	str	r1, [r2, #32]
 800708a:	781a      	ldrb	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007096:	b29b      	uxth	r3, r3
 8007098:	3b01      	subs	r3, #1
 800709a:	b29b      	uxth	r3, r3
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	4619      	mov	r1, r3
 80070a0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10f      	bne.n	80070c6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68da      	ldr	r2, [r3, #12]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80070b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	68da      	ldr	r2, [r3, #12]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80070c6:	2300      	movs	r3, #0
 80070c8:	e000      	b.n	80070cc <UART_Transmit_IT+0x94>
=======
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	1c59      	adds	r1, r3, #1
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6211      	str	r1, [r2, #32]
 80037d6:	781a      	ldrb	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	4619      	mov	r1, r3
 80037ec:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10f      	bne.n	8003812 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003800:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003810:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	e000      	b.n	8003818 <UART_Transmit_IT+0x94>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80070ca:	2302      	movs	r3, #2
  }
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3714      	adds	r7, #20
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr

080070d8 <UART_EndTransmit_IT>:
=======
 8003816:	2302      	movs	r3, #2
  }
}
 8003818:	4618      	mov	r0, r3
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <UART_EndTransmit_IT>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68da      	ldr	r2, [r3, #12]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070ee:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2220      	movs	r2, #32
 80070f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
=======
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800383a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< HEAD
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f7ff fe73 	bl	8006de4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3708      	adds	r7, #8
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <UART_Receive_IT>:
=======
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7ff fe73 	bl	8003530 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <UART_Receive_IT>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007108:	b580      	push	{r7, lr}
 800710a:	b08c      	sub	sp, #48	@ 0x30
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
=======
 8003854:	b580      	push	{r7, lr}
 8003856:	b08c      	sub	sp, #48	@ 0x30
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< HEAD
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007116:	b2db      	uxtb	r3, r3
 8007118:	2b22      	cmp	r3, #34	@ 0x22
 800711a:	f040 80ae 	bne.w	800727a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007126:	d117      	bne.n	8007158 <UART_Receive_IT+0x50>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	691b      	ldr	r3, [r3, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d113      	bne.n	8007158 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007130:	2300      	movs	r3, #0
 8007132:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007138:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	b29b      	uxth	r3, r3
 8007142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007146:	b29a      	uxth	r2, r3
 8007148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800714a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007150:	1c9a      	adds	r2, r3, #2
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	629a      	str	r2, [r3, #40]	@ 0x28
 8007156:	e026      	b.n	80071a6 <UART_Receive_IT+0x9e>
=======
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b22      	cmp	r3, #34	@ 0x22
 8003866:	f040 80ae 	bne.w	80039c6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003872:	d117      	bne.n	80038a4 <UART_Receive_IT+0x50>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d113      	bne.n	80038a4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800387c:	2300      	movs	r3, #0
 800387e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003884:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	b29b      	uxth	r3, r3
 800388e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003892:	b29a      	uxth	r2, r3
 8003894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003896:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800389c:	1c9a      	adds	r2, r3, #2
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80038a2:	e026      	b.n	80038f2 <UART_Receive_IT+0x9e>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
<<<<<<< HEAD
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800715c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800715e:	2300      	movs	r3, #0
 8007160:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800716a:	d007      	beq.n	800717c <UART_Receive_IT+0x74>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10a      	bne.n	800718a <UART_Receive_IT+0x82>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d106      	bne.n	800718a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	b2da      	uxtb	r2, r3
 8007184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007186:	701a      	strb	r2, [r3, #0]
 8007188:	e008      	b.n	800719c <UART_Receive_IT+0x94>
=======
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038b6:	d007      	beq.n	80038c8 <UART_Receive_IT+0x74>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10a      	bne.n	80038d6 <UART_Receive_IT+0x82>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d106      	bne.n	80038d6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d2:	701a      	strb	r2, [r3, #0]
 80038d4:	e008      	b.n	80038e8 <UART_Receive_IT+0x94>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
<<<<<<< HEAD
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	b2db      	uxtb	r3, r3
 8007192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007196:	b2da      	uxtb	r2, r3
 8007198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800719a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a0:	1c5a      	adds	r2, r3, #1
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	3b01      	subs	r3, #1
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	4619      	mov	r1, r3
 80071b4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d15d      	bne.n	8007276 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68da      	ldr	r2, [r3, #12]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f022 0220 	bic.w	r2, r2, #32
 80071c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68da      	ldr	r2, [r3, #12]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80071d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	695a      	ldr	r2, [r3, #20]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f022 0201 	bic.w	r2, r2, #1
 80071e8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2220      	movs	r2, #32
 80071ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	635a      	str	r2, [r3, #52]	@ 0x34
=======
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038e6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	4619      	mov	r1, r3
 8003900:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003902:	2b00      	cmp	r3, #0
 8003904:	d15d      	bne.n	80039c2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0220 	bic.w	r2, r2, #32
 8003914:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003924:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695a      	ldr	r2, [r3, #20]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0201 	bic.w	r2, r2, #1
 8003934:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2220      	movs	r2, #32
 800393a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	635a      	str	r2, [r3, #52]	@ 0x34
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d135      	bne.n	800726c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2200      	movs	r2, #0
 8007204:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	330c      	adds	r3, #12
 800720c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	e853 3f00 	ldrex	r3, [r3]
 8007214:	613b      	str	r3, [r7, #16]
   return(result);
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	f023 0310 	bic.w	r3, r3, #16
 800721c:	627b      	str	r3, [r7, #36]	@ 0x24
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	330c      	adds	r3, #12
 8007224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007226:	623a      	str	r2, [r7, #32]
 8007228:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800722a:	69f9      	ldr	r1, [r7, #28]
 800722c:	6a3a      	ldr	r2, [r7, #32]
 800722e:	e841 2300 	strex	r3, r2, [r1]
 8007232:	61bb      	str	r3, [r7, #24]
   return(result);
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1e5      	bne.n	8007206 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0310 	and.w	r3, r3, #16
 8007244:	2b10      	cmp	r3, #16
 8007246:	d10a      	bne.n	800725e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007248:	2300      	movs	r3, #0
 800724a:	60fb      	str	r3, [r7, #12]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	60fb      	str	r3, [r7, #12]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	60fb      	str	r3, [r7, #12]
 800725c:	68fb      	ldr	r3, [r7, #12]
=======
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003948:	2b01      	cmp	r3, #1
 800394a:	d135      	bne.n	80039b8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	330c      	adds	r3, #12
 8003958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	e853 3f00 	ldrex	r3, [r3]
 8003960:	613b      	str	r3, [r7, #16]
   return(result);
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f023 0310 	bic.w	r3, r3, #16
 8003968:	627b      	str	r3, [r7, #36]	@ 0x24
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	330c      	adds	r3, #12
 8003970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003972:	623a      	str	r2, [r7, #32]
 8003974:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003976:	69f9      	ldr	r1, [r7, #28]
 8003978:	6a3a      	ldr	r2, [r7, #32]
 800397a:	e841 2300 	strex	r3, r2, [r1]
 800397e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1e5      	bne.n	8003952 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0310 	and.w	r3, r3, #16
 8003990:	2b10      	cmp	r3, #16
 8003992:	d10a      	bne.n	80039aa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003994:	2300      	movs	r3, #0
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007262:	4619      	mov	r1, r3
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f7ff fdd1 	bl	8006e0c <HAL_UARTEx_RxEventCallback>
 800726a:	e002      	b.n	8007272 <UART_Receive_IT+0x16a>
=======
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039ae:	4619      	mov	r1, r3
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7ff fdd1 	bl	8003558 <HAL_UARTEx_RxEventCallback>
 80039b6:	e002      	b.n	80039be <UART_Receive_IT+0x16a>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
<<<<<<< HEAD
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f7fb fd11 	bl	8002c94 <HAL_UART_RxCpltCallback>
=======
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7fd fa8b 	bl	8000ed4 <HAL_UART_RxCpltCallback>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
<<<<<<< HEAD
 8007272:	2300      	movs	r3, #0
 8007274:	e002      	b.n	800727c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007276:	2300      	movs	r3, #0
 8007278:	e000      	b.n	800727c <UART_Receive_IT+0x174>
=======
 80039be:	2300      	movs	r3, #0
 80039c0:	e002      	b.n	80039c8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80039c2:	2300      	movs	r3, #0
 80039c4:	e000      	b.n	80039c8 <UART_Receive_IT+0x174>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 800727a:	2302      	movs	r3, #2
  }
}
 800727c:	4618      	mov	r0, r3
 800727e:	3730      	adds	r7, #48	@ 0x30
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <UART_SetConfig>:
=======
 80039c6:	2302      	movs	r3, #2
  }
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3730      	adds	r7, #48	@ 0x30
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <UART_SetConfig>:
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8007284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007288:	b0c0      	sub	sp, #256	@ 0x100
 800728a:	af00      	add	r7, sp, #0
 800728c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
=======
 80039d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039d4:	b0c0      	sub	sp, #256	@ 0x100
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 8007290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800729c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072a0:	68d9      	ldr	r1, [r3, #12]
 80072a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	ea40 0301 	orr.w	r3, r0, r1
 80072ac:	6113      	str	r3, [r2, #16]
=======
 80039dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80039e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ec:	68d9      	ldr	r1, [r3, #12]
 80039ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	ea40 0301 	orr.w	r3, r0, r1
 80039f8:	6113      	str	r3, [r2, #16]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
<<<<<<< HEAD
 80072ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072b2:	689a      	ldr	r2, [r3, #8]
 80072b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	431a      	orrs	r2, r3
 80072bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	431a      	orrs	r2, r3
 80072c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072c8:	69db      	ldr	r3, [r3, #28]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80072d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80072dc:	f021 010c 	bic.w	r1, r1, #12
 80072e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80072ea:	430b      	orrs	r3, r1
 80072ec:	60d3      	str	r3, [r2, #12]
=======
 80039fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	431a      	orrs	r2, r3
 8003a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a28:	f021 010c 	bic.w	r1, r1, #12
 8003a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a36:	430b      	orrs	r3, r1
 8003a38:	60d3      	str	r3, [r2, #12]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
 80072ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80072fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072fe:	6999      	ldr	r1, [r3, #24]
 8007300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	ea40 0301 	orr.w	r3, r0, r1
 800730a:	6153      	str	r3, [r2, #20]
=======
 8003a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a4a:	6999      	ldr	r1, [r3, #24]
 8003a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	ea40 0301 	orr.w	r3, r0, r1
 8003a56:	6153      	str	r3, [r2, #20]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
<<<<<<< HEAD
 800730c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	4b8f      	ldr	r3, [pc, #572]	@ (8007550 <UART_SetConfig+0x2cc>)
 8007314:	429a      	cmp	r2, r3
 8007316:	d005      	beq.n	8007324 <UART_SetConfig+0xa0>
 8007318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	4b8d      	ldr	r3, [pc, #564]	@ (8007554 <UART_SetConfig+0x2d0>)
 8007320:	429a      	cmp	r2, r3
 8007322:	d104      	bne.n	800732e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007324:	f7fe f922 	bl	800556c <HAL_RCC_GetPCLK2Freq>
 8007328:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800732c:	e003      	b.n	8007336 <UART_SetConfig+0xb2>
=======
 8003a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	4b8f      	ldr	r3, [pc, #572]	@ (8003c9c <UART_SetConfig+0x2cc>)
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d005      	beq.n	8003a70 <UART_SetConfig+0xa0>
 8003a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	4b8d      	ldr	r3, [pc, #564]	@ (8003ca0 <UART_SetConfig+0x2d0>)
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d104      	bne.n	8003a7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a70:	f7fe fcdc 	bl	800242c <HAL_RCC_GetPCLK2Freq>
 8003a74:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003a78:	e003      	b.n	8003a82 <UART_SetConfig+0xb2>
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 800732e:	f7fe f909 	bl	8005544 <HAL_RCC_GetPCLK1Freq>
 8007332:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800733a:	69db      	ldr	r3, [r3, #28]
 800733c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007340:	f040 810c 	bne.w	800755c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007348:	2200      	movs	r2, #0
 800734a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800734e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007352:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007356:	4622      	mov	r2, r4
 8007358:	462b      	mov	r3, r5
 800735a:	1891      	adds	r1, r2, r2
 800735c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800735e:	415b      	adcs	r3, r3
 8007360:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007362:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007366:	4621      	mov	r1, r4
 8007368:	eb12 0801 	adds.w	r8, r2, r1
 800736c:	4629      	mov	r1, r5
 800736e:	eb43 0901 	adc.w	r9, r3, r1
 8007372:	f04f 0200 	mov.w	r2, #0
 8007376:	f04f 0300 	mov.w	r3, #0
 800737a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800737e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007382:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007386:	4690      	mov	r8, r2
 8007388:	4699      	mov	r9, r3
 800738a:	4623      	mov	r3, r4
 800738c:	eb18 0303 	adds.w	r3, r8, r3
 8007390:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007394:	462b      	mov	r3, r5
 8007396:	eb49 0303 	adc.w	r3, r9, r3
 800739a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800739e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80073aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80073ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80073b2:	460b      	mov	r3, r1
 80073b4:	18db      	adds	r3, r3, r3
 80073b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80073b8:	4613      	mov	r3, r2
 80073ba:	eb42 0303 	adc.w	r3, r2, r3
 80073be:	657b      	str	r3, [r7, #84]	@ 0x54
 80073c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80073c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80073c8:	f7f9 fbd0 	bl	8000b6c <__aeabi_uldivmod>
 80073cc:	4602      	mov	r2, r0
 80073ce:	460b      	mov	r3, r1
 80073d0:	4b61      	ldr	r3, [pc, #388]	@ (8007558 <UART_SetConfig+0x2d4>)
 80073d2:	fba3 2302 	umull	r2, r3, r3, r2
 80073d6:	095b      	lsrs	r3, r3, #5
 80073d8:	011c      	lsls	r4, r3, #4
 80073da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073de:	2200      	movs	r2, #0
 80073e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80073e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80073e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80073ec:	4642      	mov	r2, r8
 80073ee:	464b      	mov	r3, r9
 80073f0:	1891      	adds	r1, r2, r2
 80073f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80073f4:	415b      	adcs	r3, r3
 80073f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80073fc:	4641      	mov	r1, r8
 80073fe:	eb12 0a01 	adds.w	sl, r2, r1
 8007402:	4649      	mov	r1, r9
 8007404:	eb43 0b01 	adc.w	fp, r3, r1
 8007408:	f04f 0200 	mov.w	r2, #0
 800740c:	f04f 0300 	mov.w	r3, #0
 8007410:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007414:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007418:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800741c:	4692      	mov	sl, r2
 800741e:	469b      	mov	fp, r3
 8007420:	4643      	mov	r3, r8
 8007422:	eb1a 0303 	adds.w	r3, sl, r3
 8007426:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800742a:	464b      	mov	r3, r9
 800742c:	eb4b 0303 	adc.w	r3, fp, r3
 8007430:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007440:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007444:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007448:	460b      	mov	r3, r1
 800744a:	18db      	adds	r3, r3, r3
 800744c:	643b      	str	r3, [r7, #64]	@ 0x40
 800744e:	4613      	mov	r3, r2
 8007450:	eb42 0303 	adc.w	r3, r2, r3
 8007454:	647b      	str	r3, [r7, #68]	@ 0x44
 8007456:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800745a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800745e:	f7f9 fb85 	bl	8000b6c <__aeabi_uldivmod>
 8007462:	4602      	mov	r2, r0
 8007464:	460b      	mov	r3, r1
 8007466:	4611      	mov	r1, r2
 8007468:	4b3b      	ldr	r3, [pc, #236]	@ (8007558 <UART_SetConfig+0x2d4>)
 800746a:	fba3 2301 	umull	r2, r3, r3, r1
 800746e:	095b      	lsrs	r3, r3, #5
 8007470:	2264      	movs	r2, #100	@ 0x64
 8007472:	fb02 f303 	mul.w	r3, r2, r3
 8007476:	1acb      	subs	r3, r1, r3
 8007478:	00db      	lsls	r3, r3, #3
 800747a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800747e:	4b36      	ldr	r3, [pc, #216]	@ (8007558 <UART_SetConfig+0x2d4>)
 8007480:	fba3 2302 	umull	r2, r3, r3, r2
 8007484:	095b      	lsrs	r3, r3, #5
 8007486:	005b      	lsls	r3, r3, #1
 8007488:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800748c:	441c      	add	r4, r3
 800748e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007492:	2200      	movs	r2, #0
 8007494:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007498:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800749c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80074a0:	4642      	mov	r2, r8
 80074a2:	464b      	mov	r3, r9
 80074a4:	1891      	adds	r1, r2, r2
 80074a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80074a8:	415b      	adcs	r3, r3
 80074aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80074b0:	4641      	mov	r1, r8
 80074b2:	1851      	adds	r1, r2, r1
 80074b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80074b6:	4649      	mov	r1, r9
 80074b8:	414b      	adcs	r3, r1
 80074ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80074bc:	f04f 0200 	mov.w	r2, #0
 80074c0:	f04f 0300 	mov.w	r3, #0
 80074c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80074c8:	4659      	mov	r1, fp
 80074ca:	00cb      	lsls	r3, r1, #3
 80074cc:	4651      	mov	r1, sl
 80074ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074d2:	4651      	mov	r1, sl
 80074d4:	00ca      	lsls	r2, r1, #3
 80074d6:	4610      	mov	r0, r2
 80074d8:	4619      	mov	r1, r3
 80074da:	4603      	mov	r3, r0
 80074dc:	4642      	mov	r2, r8
 80074de:	189b      	adds	r3, r3, r2
 80074e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80074e4:	464b      	mov	r3, r9
 80074e6:	460a      	mov	r2, r1
 80074e8:	eb42 0303 	adc.w	r3, r2, r3
 80074ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80074f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80074fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007500:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007504:	460b      	mov	r3, r1
 8007506:	18db      	adds	r3, r3, r3
 8007508:	62bb      	str	r3, [r7, #40]	@ 0x28
 800750a:	4613      	mov	r3, r2
 800750c:	eb42 0303 	adc.w	r3, r2, r3
 8007510:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007512:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007516:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800751a:	f7f9 fb27 	bl	8000b6c <__aeabi_uldivmod>
 800751e:	4602      	mov	r2, r0
 8007520:	460b      	mov	r3, r1
 8007522:	4b0d      	ldr	r3, [pc, #52]	@ (8007558 <UART_SetConfig+0x2d4>)
 8007524:	fba3 1302 	umull	r1, r3, r3, r2
 8007528:	095b      	lsrs	r3, r3, #5
 800752a:	2164      	movs	r1, #100	@ 0x64
 800752c:	fb01 f303 	mul.w	r3, r1, r3
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	00db      	lsls	r3, r3, #3
 8007534:	3332      	adds	r3, #50	@ 0x32
 8007536:	4a08      	ldr	r2, [pc, #32]	@ (8007558 <UART_SetConfig+0x2d4>)
 8007538:	fba2 2303 	umull	r2, r3, r2, r3
 800753c:	095b      	lsrs	r3, r3, #5
 800753e:	f003 0207 	and.w	r2, r3, #7
 8007542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4422      	add	r2, r4
 800754a:	609a      	str	r2, [r3, #8]
=======
 8003a7a:	f7fe fcc3 	bl	8002404 <HAL_RCC_GetPCLK1Freq>
 8003a7e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a8c:	f040 810c 	bne.w	8003ca8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a94:	2200      	movs	r2, #0
 8003a96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a9a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003aa2:	4622      	mov	r2, r4
 8003aa4:	462b      	mov	r3, r5
 8003aa6:	1891      	adds	r1, r2, r2
 8003aa8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003aaa:	415b      	adcs	r3, r3
 8003aac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003aae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ab2:	4621      	mov	r1, r4
 8003ab4:	eb12 0801 	adds.w	r8, r2, r1
 8003ab8:	4629      	mov	r1, r5
 8003aba:	eb43 0901 	adc.w	r9, r3, r1
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ace:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ad2:	4690      	mov	r8, r2
 8003ad4:	4699      	mov	r9, r3
 8003ad6:	4623      	mov	r3, r4
 8003ad8:	eb18 0303 	adds.w	r3, r8, r3
 8003adc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ae0:	462b      	mov	r3, r5
 8003ae2:	eb49 0303 	adc.w	r3, r9, r3
 8003ae6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003af6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003afa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003afe:	460b      	mov	r3, r1
 8003b00:	18db      	adds	r3, r3, r3
 8003b02:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b04:	4613      	mov	r3, r2
 8003b06:	eb42 0303 	adc.w	r3, r2, r3
 8003b0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b14:	f7fc fbb4 	bl	8000280 <__aeabi_uldivmod>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4b61      	ldr	r3, [pc, #388]	@ (8003ca4 <UART_SetConfig+0x2d4>)
 8003b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	011c      	lsls	r4, r3, #4
 8003b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b30:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003b38:	4642      	mov	r2, r8
 8003b3a:	464b      	mov	r3, r9
 8003b3c:	1891      	adds	r1, r2, r2
 8003b3e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b40:	415b      	adcs	r3, r3
 8003b42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b48:	4641      	mov	r1, r8
 8003b4a:	eb12 0a01 	adds.w	sl, r2, r1
 8003b4e:	4649      	mov	r1, r9
 8003b50:	eb43 0b01 	adc.w	fp, r3, r1
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b68:	4692      	mov	sl, r2
 8003b6a:	469b      	mov	fp, r3
 8003b6c:	4643      	mov	r3, r8
 8003b6e:	eb1a 0303 	adds.w	r3, sl, r3
 8003b72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b76:	464b      	mov	r3, r9
 8003b78:	eb4b 0303 	adc.w	r3, fp, r3
 8003b7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b8c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b94:	460b      	mov	r3, r1
 8003b96:	18db      	adds	r3, r3, r3
 8003b98:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	eb42 0303 	adc.w	r3, r2, r3
 8003ba0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ba2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ba6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003baa:	f7fc fb69 	bl	8000280 <__aeabi_uldivmod>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ca4 <UART_SetConfig+0x2d4>)
 8003bb6:	fba3 2301 	umull	r2, r3, r3, r1
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	2264      	movs	r2, #100	@ 0x64
 8003bbe:	fb02 f303 	mul.w	r3, r2, r3
 8003bc2:	1acb      	subs	r3, r1, r3
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003bca:	4b36      	ldr	r3, [pc, #216]	@ (8003ca4 <UART_SetConfig+0x2d4>)
 8003bcc:	fba3 2302 	umull	r2, r3, r3, r2
 8003bd0:	095b      	lsrs	r3, r3, #5
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003bd8:	441c      	add	r4, r3
 8003bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bde:	2200      	movs	r2, #0
 8003be0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003be4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003be8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003bec:	4642      	mov	r2, r8
 8003bee:	464b      	mov	r3, r9
 8003bf0:	1891      	adds	r1, r2, r2
 8003bf2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003bf4:	415b      	adcs	r3, r3
 8003bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003bfc:	4641      	mov	r1, r8
 8003bfe:	1851      	adds	r1, r2, r1
 8003c00:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c02:	4649      	mov	r1, r9
 8003c04:	414b      	adcs	r3, r1
 8003c06:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c08:	f04f 0200 	mov.w	r2, #0
 8003c0c:	f04f 0300 	mov.w	r3, #0
 8003c10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003c14:	4659      	mov	r1, fp
 8003c16:	00cb      	lsls	r3, r1, #3
 8003c18:	4651      	mov	r1, sl
 8003c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c1e:	4651      	mov	r1, sl
 8003c20:	00ca      	lsls	r2, r1, #3
 8003c22:	4610      	mov	r0, r2
 8003c24:	4619      	mov	r1, r3
 8003c26:	4603      	mov	r3, r0
 8003c28:	4642      	mov	r2, r8
 8003c2a:	189b      	adds	r3, r3, r2
 8003c2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c30:	464b      	mov	r3, r9
 8003c32:	460a      	mov	r2, r1
 8003c34:	eb42 0303 	adc.w	r3, r2, r3
 8003c38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c48:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003c4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c50:	460b      	mov	r3, r1
 8003c52:	18db      	adds	r3, r3, r3
 8003c54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c56:	4613      	mov	r3, r2
 8003c58:	eb42 0303 	adc.w	r3, r2, r3
 8003c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003c66:	f7fc fb0b 	bl	8000280 <__aeabi_uldivmod>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca4 <UART_SetConfig+0x2d4>)
 8003c70:	fba3 1302 	umull	r1, r3, r3, r2
 8003c74:	095b      	lsrs	r3, r3, #5
 8003c76:	2164      	movs	r1, #100	@ 0x64
 8003c78:	fb01 f303 	mul.w	r3, r1, r3
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	3332      	adds	r3, #50	@ 0x32
 8003c82:	4a08      	ldr	r2, [pc, #32]	@ (8003ca4 <UART_SetConfig+0x2d4>)
 8003c84:	fba2 2303 	umull	r2, r3, r2, r3
 8003c88:	095b      	lsrs	r3, r3, #5
 8003c8a:	f003 0207 	and.w	r2, r3, #7
 8003c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4422      	add	r2, r4
 8003c96:	609a      	str	r2, [r3, #8]
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
<<<<<<< HEAD
 800754c:	e106      	b.n	800775c <UART_SetConfig+0x4d8>
 800754e:	bf00      	nop
 8007550:	40011000 	.word	0x40011000
 8007554:	40011400 	.word	0x40011400
 8007558:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800755c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007560:	2200      	movs	r2, #0
 8007562:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007566:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800756a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800756e:	4642      	mov	r2, r8
 8007570:	464b      	mov	r3, r9
 8007572:	1891      	adds	r1, r2, r2
 8007574:	6239      	str	r1, [r7, #32]
 8007576:	415b      	adcs	r3, r3
 8007578:	627b      	str	r3, [r7, #36]	@ 0x24
 800757a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800757e:	4641      	mov	r1, r8
 8007580:	1854      	adds	r4, r2, r1
 8007582:	4649      	mov	r1, r9
 8007584:	eb43 0501 	adc.w	r5, r3, r1
 8007588:	f04f 0200 	mov.w	r2, #0
 800758c:	f04f 0300 	mov.w	r3, #0
 8007590:	00eb      	lsls	r3, r5, #3
 8007592:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007596:	00e2      	lsls	r2, r4, #3
 8007598:	4614      	mov	r4, r2
 800759a:	461d      	mov	r5, r3
 800759c:	4643      	mov	r3, r8
 800759e:	18e3      	adds	r3, r4, r3
 80075a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80075a4:	464b      	mov	r3, r9
 80075a6:	eb45 0303 	adc.w	r3, r5, r3
 80075aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80075ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80075ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80075be:	f04f 0200 	mov.w	r2, #0
 80075c2:	f04f 0300 	mov.w	r3, #0
 80075c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80075ca:	4629      	mov	r1, r5
 80075cc:	008b      	lsls	r3, r1, #2
 80075ce:	4621      	mov	r1, r4
 80075d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075d4:	4621      	mov	r1, r4
 80075d6:	008a      	lsls	r2, r1, #2
 80075d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80075dc:	f7f9 fac6 	bl	8000b6c <__aeabi_uldivmod>
 80075e0:	4602      	mov	r2, r0
 80075e2:	460b      	mov	r3, r1
 80075e4:	4b60      	ldr	r3, [pc, #384]	@ (8007768 <UART_SetConfig+0x4e4>)
 80075e6:	fba3 2302 	umull	r2, r3, r3, r2
 80075ea:	095b      	lsrs	r3, r3, #5
 80075ec:	011c      	lsls	r4, r3, #4
 80075ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075f2:	2200      	movs	r2, #0
 80075f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80075f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80075fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007600:	4642      	mov	r2, r8
 8007602:	464b      	mov	r3, r9
 8007604:	1891      	adds	r1, r2, r2
 8007606:	61b9      	str	r1, [r7, #24]
 8007608:	415b      	adcs	r3, r3
 800760a:	61fb      	str	r3, [r7, #28]
 800760c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007610:	4641      	mov	r1, r8
 8007612:	1851      	adds	r1, r2, r1
 8007614:	6139      	str	r1, [r7, #16]
 8007616:	4649      	mov	r1, r9
 8007618:	414b      	adcs	r3, r1
 800761a:	617b      	str	r3, [r7, #20]
 800761c:	f04f 0200 	mov.w	r2, #0
 8007620:	f04f 0300 	mov.w	r3, #0
 8007624:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007628:	4659      	mov	r1, fp
 800762a:	00cb      	lsls	r3, r1, #3
 800762c:	4651      	mov	r1, sl
 800762e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007632:	4651      	mov	r1, sl
 8007634:	00ca      	lsls	r2, r1, #3
 8007636:	4610      	mov	r0, r2
 8007638:	4619      	mov	r1, r3
 800763a:	4603      	mov	r3, r0
 800763c:	4642      	mov	r2, r8
 800763e:	189b      	adds	r3, r3, r2
 8007640:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007644:	464b      	mov	r3, r9
 8007646:	460a      	mov	r2, r1
 8007648:	eb42 0303 	adc.w	r3, r2, r3
 800764c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	67bb      	str	r3, [r7, #120]	@ 0x78
 800765a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800765c:	f04f 0200 	mov.w	r2, #0
 8007660:	f04f 0300 	mov.w	r3, #0
 8007664:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007668:	4649      	mov	r1, r9
 800766a:	008b      	lsls	r3, r1, #2
 800766c:	4641      	mov	r1, r8
 800766e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007672:	4641      	mov	r1, r8
 8007674:	008a      	lsls	r2, r1, #2
 8007676:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800767a:	f7f9 fa77 	bl	8000b6c <__aeabi_uldivmod>
 800767e:	4602      	mov	r2, r0
 8007680:	460b      	mov	r3, r1
 8007682:	4611      	mov	r1, r2
 8007684:	4b38      	ldr	r3, [pc, #224]	@ (8007768 <UART_SetConfig+0x4e4>)
 8007686:	fba3 2301 	umull	r2, r3, r3, r1
 800768a:	095b      	lsrs	r3, r3, #5
 800768c:	2264      	movs	r2, #100	@ 0x64
 800768e:	fb02 f303 	mul.w	r3, r2, r3
 8007692:	1acb      	subs	r3, r1, r3
 8007694:	011b      	lsls	r3, r3, #4
 8007696:	3332      	adds	r3, #50	@ 0x32
 8007698:	4a33      	ldr	r2, [pc, #204]	@ (8007768 <UART_SetConfig+0x4e4>)
 800769a:	fba2 2303 	umull	r2, r3, r2, r3
 800769e:	095b      	lsrs	r3, r3, #5
 80076a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80076a4:	441c      	add	r4, r3
 80076a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076aa:	2200      	movs	r2, #0
 80076ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80076ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80076b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80076b4:	4642      	mov	r2, r8
 80076b6:	464b      	mov	r3, r9
 80076b8:	1891      	adds	r1, r2, r2
 80076ba:	60b9      	str	r1, [r7, #8]
 80076bc:	415b      	adcs	r3, r3
 80076be:	60fb      	str	r3, [r7, #12]
 80076c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80076c4:	4641      	mov	r1, r8
 80076c6:	1851      	adds	r1, r2, r1
 80076c8:	6039      	str	r1, [r7, #0]
 80076ca:	4649      	mov	r1, r9
 80076cc:	414b      	adcs	r3, r1
 80076ce:	607b      	str	r3, [r7, #4]
 80076d0:	f04f 0200 	mov.w	r2, #0
 80076d4:	f04f 0300 	mov.w	r3, #0
 80076d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80076dc:	4659      	mov	r1, fp
 80076de:	00cb      	lsls	r3, r1, #3
 80076e0:	4651      	mov	r1, sl
 80076e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076e6:	4651      	mov	r1, sl
 80076e8:	00ca      	lsls	r2, r1, #3
 80076ea:	4610      	mov	r0, r2
 80076ec:	4619      	mov	r1, r3
 80076ee:	4603      	mov	r3, r0
 80076f0:	4642      	mov	r2, r8
 80076f2:	189b      	adds	r3, r3, r2
 80076f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80076f6:	464b      	mov	r3, r9
 80076f8:	460a      	mov	r2, r1
 80076fa:	eb42 0303 	adc.w	r3, r2, r3
 80076fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	663b      	str	r3, [r7, #96]	@ 0x60
 800770a:	667a      	str	r2, [r7, #100]	@ 0x64
 800770c:	f04f 0200 	mov.w	r2, #0
 8007710:	f04f 0300 	mov.w	r3, #0
 8007714:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007718:	4649      	mov	r1, r9
 800771a:	008b      	lsls	r3, r1, #2
 800771c:	4641      	mov	r1, r8
 800771e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007722:	4641      	mov	r1, r8
 8007724:	008a      	lsls	r2, r1, #2
 8007726:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800772a:	f7f9 fa1f 	bl	8000b6c <__aeabi_uldivmod>
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	4b0d      	ldr	r3, [pc, #52]	@ (8007768 <UART_SetConfig+0x4e4>)
 8007734:	fba3 1302 	umull	r1, r3, r3, r2
 8007738:	095b      	lsrs	r3, r3, #5
 800773a:	2164      	movs	r1, #100	@ 0x64
 800773c:	fb01 f303 	mul.w	r3, r1, r3
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	011b      	lsls	r3, r3, #4
 8007744:	3332      	adds	r3, #50	@ 0x32
 8007746:	4a08      	ldr	r2, [pc, #32]	@ (8007768 <UART_SetConfig+0x4e4>)
 8007748:	fba2 2303 	umull	r2, r3, r2, r3
 800774c:	095b      	lsrs	r3, r3, #5
 800774e:	f003 020f 	and.w	r2, r3, #15
 8007752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4422      	add	r2, r4
 800775a:	609a      	str	r2, [r3, #8]
}
 800775c:	bf00      	nop
 800775e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007762:	46bd      	mov	sp, r7
 8007764:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007768:	51eb851f 	.word	0x51eb851f

0800776c <std>:
 800776c:	2300      	movs	r3, #0
 800776e:	b510      	push	{r4, lr}
 8007770:	4604      	mov	r4, r0
 8007772:	e9c0 3300 	strd	r3, r3, [r0]
 8007776:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800777a:	6083      	str	r3, [r0, #8]
 800777c:	8181      	strh	r1, [r0, #12]
 800777e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007780:	81c2      	strh	r2, [r0, #14]
 8007782:	6183      	str	r3, [r0, #24]
 8007784:	4619      	mov	r1, r3
 8007786:	2208      	movs	r2, #8
 8007788:	305c      	adds	r0, #92	@ 0x5c
 800778a:	f000 fa19 	bl	8007bc0 <memset>
 800778e:	4b0d      	ldr	r3, [pc, #52]	@ (80077c4 <std+0x58>)
 8007790:	6263      	str	r3, [r4, #36]	@ 0x24
 8007792:	4b0d      	ldr	r3, [pc, #52]	@ (80077c8 <std+0x5c>)
 8007794:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007796:	4b0d      	ldr	r3, [pc, #52]	@ (80077cc <std+0x60>)
 8007798:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800779a:	4b0d      	ldr	r3, [pc, #52]	@ (80077d0 <std+0x64>)
 800779c:	6323      	str	r3, [r4, #48]	@ 0x30
 800779e:	4b0d      	ldr	r3, [pc, #52]	@ (80077d4 <std+0x68>)
 80077a0:	6224      	str	r4, [r4, #32]
 80077a2:	429c      	cmp	r4, r3
 80077a4:	d006      	beq.n	80077b4 <std+0x48>
 80077a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80077aa:	4294      	cmp	r4, r2
 80077ac:	d002      	beq.n	80077b4 <std+0x48>
 80077ae:	33d0      	adds	r3, #208	@ 0xd0
 80077b0:	429c      	cmp	r4, r3
 80077b2:	d105      	bne.n	80077c0 <std+0x54>
 80077b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80077b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077bc:	f000 ba78 	b.w	8007cb0 <__retarget_lock_init_recursive>
 80077c0:	bd10      	pop	{r4, pc}
 80077c2:	bf00      	nop
 80077c4:	08007a11 	.word	0x08007a11
 80077c8:	08007a33 	.word	0x08007a33
 80077cc:	08007a6b 	.word	0x08007a6b
 80077d0:	08007a8f 	.word	0x08007a8f
 80077d4:	20000288 	.word	0x20000288

080077d8 <stdio_exit_handler>:
 80077d8:	4a02      	ldr	r2, [pc, #8]	@ (80077e4 <stdio_exit_handler+0xc>)
 80077da:	4903      	ldr	r1, [pc, #12]	@ (80077e8 <stdio_exit_handler+0x10>)
 80077dc:	4803      	ldr	r0, [pc, #12]	@ (80077ec <stdio_exit_handler+0x14>)
 80077de:	f000 b869 	b.w	80078b4 <_fwalk_sglue>
 80077e2:	bf00      	nop
 80077e4:	20000040 	.word	0x20000040
 80077e8:	08008811 	.word	0x08008811
 80077ec:	20000050 	.word	0x20000050

080077f0 <cleanup_stdio>:
 80077f0:	6841      	ldr	r1, [r0, #4]
 80077f2:	4b0c      	ldr	r3, [pc, #48]	@ (8007824 <cleanup_stdio+0x34>)
 80077f4:	4299      	cmp	r1, r3
 80077f6:	b510      	push	{r4, lr}
 80077f8:	4604      	mov	r4, r0
 80077fa:	d001      	beq.n	8007800 <cleanup_stdio+0x10>
 80077fc:	f001 f808 	bl	8008810 <_fflush_r>
 8007800:	68a1      	ldr	r1, [r4, #8]
 8007802:	4b09      	ldr	r3, [pc, #36]	@ (8007828 <cleanup_stdio+0x38>)
 8007804:	4299      	cmp	r1, r3
 8007806:	d002      	beq.n	800780e <cleanup_stdio+0x1e>
 8007808:	4620      	mov	r0, r4
 800780a:	f001 f801 	bl	8008810 <_fflush_r>
 800780e:	68e1      	ldr	r1, [r4, #12]
 8007810:	4b06      	ldr	r3, [pc, #24]	@ (800782c <cleanup_stdio+0x3c>)
 8007812:	4299      	cmp	r1, r3
 8007814:	d004      	beq.n	8007820 <cleanup_stdio+0x30>
 8007816:	4620      	mov	r0, r4
 8007818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800781c:	f000 bff8 	b.w	8008810 <_fflush_r>
 8007820:	bd10      	pop	{r4, pc}
 8007822:	bf00      	nop
 8007824:	20000288 	.word	0x20000288
 8007828:	200002f0 	.word	0x200002f0
 800782c:	20000358 	.word	0x20000358

08007830 <global_stdio_init.part.0>:
 8007830:	b510      	push	{r4, lr}
 8007832:	4b0b      	ldr	r3, [pc, #44]	@ (8007860 <global_stdio_init.part.0+0x30>)
 8007834:	4c0b      	ldr	r4, [pc, #44]	@ (8007864 <global_stdio_init.part.0+0x34>)
 8007836:	4a0c      	ldr	r2, [pc, #48]	@ (8007868 <global_stdio_init.part.0+0x38>)
 8007838:	601a      	str	r2, [r3, #0]
 800783a:	4620      	mov	r0, r4
 800783c:	2200      	movs	r2, #0
 800783e:	2104      	movs	r1, #4
 8007840:	f7ff ff94 	bl	800776c <std>
 8007844:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007848:	2201      	movs	r2, #1
 800784a:	2109      	movs	r1, #9
 800784c:	f7ff ff8e 	bl	800776c <std>
 8007850:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007854:	2202      	movs	r2, #2
 8007856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800785a:	2112      	movs	r1, #18
 800785c:	f7ff bf86 	b.w	800776c <std>
 8007860:	200003c0 	.word	0x200003c0
 8007864:	20000288 	.word	0x20000288
 8007868:	080077d9 	.word	0x080077d9

0800786c <__sfp_lock_acquire>:
 800786c:	4801      	ldr	r0, [pc, #4]	@ (8007874 <__sfp_lock_acquire+0x8>)
 800786e:	f000 ba20 	b.w	8007cb2 <__retarget_lock_acquire_recursive>
 8007872:	bf00      	nop
 8007874:	200003c9 	.word	0x200003c9

08007878 <__sfp_lock_release>:
 8007878:	4801      	ldr	r0, [pc, #4]	@ (8007880 <__sfp_lock_release+0x8>)
 800787a:	f000 ba1b 	b.w	8007cb4 <__retarget_lock_release_recursive>
 800787e:	bf00      	nop
 8007880:	200003c9 	.word	0x200003c9

08007884 <__sinit>:
 8007884:	b510      	push	{r4, lr}
 8007886:	4604      	mov	r4, r0
 8007888:	f7ff fff0 	bl	800786c <__sfp_lock_acquire>
 800788c:	6a23      	ldr	r3, [r4, #32]
 800788e:	b11b      	cbz	r3, 8007898 <__sinit+0x14>
 8007890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007894:	f7ff bff0 	b.w	8007878 <__sfp_lock_release>
 8007898:	4b04      	ldr	r3, [pc, #16]	@ (80078ac <__sinit+0x28>)
 800789a:	6223      	str	r3, [r4, #32]
 800789c:	4b04      	ldr	r3, [pc, #16]	@ (80078b0 <__sinit+0x2c>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1f5      	bne.n	8007890 <__sinit+0xc>
 80078a4:	f7ff ffc4 	bl	8007830 <global_stdio_init.part.0>
 80078a8:	e7f2      	b.n	8007890 <__sinit+0xc>
 80078aa:	bf00      	nop
 80078ac:	080077f1 	.word	0x080077f1
 80078b0:	200003c0 	.word	0x200003c0

080078b4 <_fwalk_sglue>:
 80078b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078b8:	4607      	mov	r7, r0
 80078ba:	4688      	mov	r8, r1
 80078bc:	4614      	mov	r4, r2
 80078be:	2600      	movs	r6, #0
 80078c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078c4:	f1b9 0901 	subs.w	r9, r9, #1
 80078c8:	d505      	bpl.n	80078d6 <_fwalk_sglue+0x22>
 80078ca:	6824      	ldr	r4, [r4, #0]
 80078cc:	2c00      	cmp	r4, #0
 80078ce:	d1f7      	bne.n	80078c0 <_fwalk_sglue+0xc>
 80078d0:	4630      	mov	r0, r6
 80078d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078d6:	89ab      	ldrh	r3, [r5, #12]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d907      	bls.n	80078ec <_fwalk_sglue+0x38>
 80078dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078e0:	3301      	adds	r3, #1
 80078e2:	d003      	beq.n	80078ec <_fwalk_sglue+0x38>
 80078e4:	4629      	mov	r1, r5
 80078e6:	4638      	mov	r0, r7
 80078e8:	47c0      	blx	r8
 80078ea:	4306      	orrs	r6, r0
 80078ec:	3568      	adds	r5, #104	@ 0x68
 80078ee:	e7e9      	b.n	80078c4 <_fwalk_sglue+0x10>

080078f0 <iprintf>:
 80078f0:	b40f      	push	{r0, r1, r2, r3}
 80078f2:	b507      	push	{r0, r1, r2, lr}
 80078f4:	4906      	ldr	r1, [pc, #24]	@ (8007910 <iprintf+0x20>)
 80078f6:	ab04      	add	r3, sp, #16
 80078f8:	6808      	ldr	r0, [r1, #0]
 80078fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80078fe:	6881      	ldr	r1, [r0, #8]
 8007900:	9301      	str	r3, [sp, #4]
 8007902:	f000 fc5b 	bl	80081bc <_vfiprintf_r>
 8007906:	b003      	add	sp, #12
 8007908:	f85d eb04 	ldr.w	lr, [sp], #4
 800790c:	b004      	add	sp, #16
 800790e:	4770      	bx	lr
 8007910:	2000004c 	.word	0x2000004c

08007914 <_puts_r>:
 8007914:	6a03      	ldr	r3, [r0, #32]
 8007916:	b570      	push	{r4, r5, r6, lr}
 8007918:	6884      	ldr	r4, [r0, #8]
 800791a:	4605      	mov	r5, r0
 800791c:	460e      	mov	r6, r1
 800791e:	b90b      	cbnz	r3, 8007924 <_puts_r+0x10>
 8007920:	f7ff ffb0 	bl	8007884 <__sinit>
 8007924:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007926:	07db      	lsls	r3, r3, #31
 8007928:	d405      	bmi.n	8007936 <_puts_r+0x22>
 800792a:	89a3      	ldrh	r3, [r4, #12]
 800792c:	0598      	lsls	r0, r3, #22
 800792e:	d402      	bmi.n	8007936 <_puts_r+0x22>
 8007930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007932:	f000 f9be 	bl	8007cb2 <__retarget_lock_acquire_recursive>
 8007936:	89a3      	ldrh	r3, [r4, #12]
 8007938:	0719      	lsls	r1, r3, #28
 800793a:	d502      	bpl.n	8007942 <_puts_r+0x2e>
 800793c:	6923      	ldr	r3, [r4, #16]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d135      	bne.n	80079ae <_puts_r+0x9a>
 8007942:	4621      	mov	r1, r4
 8007944:	4628      	mov	r0, r5
 8007946:	f000 f8e5 	bl	8007b14 <__swsetup_r>
 800794a:	b380      	cbz	r0, 80079ae <_puts_r+0x9a>
 800794c:	f04f 35ff 	mov.w	r5, #4294967295
 8007950:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007952:	07da      	lsls	r2, r3, #31
 8007954:	d405      	bmi.n	8007962 <_puts_r+0x4e>
 8007956:	89a3      	ldrh	r3, [r4, #12]
 8007958:	059b      	lsls	r3, r3, #22
 800795a:	d402      	bmi.n	8007962 <_puts_r+0x4e>
 800795c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800795e:	f000 f9a9 	bl	8007cb4 <__retarget_lock_release_recursive>
 8007962:	4628      	mov	r0, r5
 8007964:	bd70      	pop	{r4, r5, r6, pc}
 8007966:	2b00      	cmp	r3, #0
 8007968:	da04      	bge.n	8007974 <_puts_r+0x60>
 800796a:	69a2      	ldr	r2, [r4, #24]
 800796c:	429a      	cmp	r2, r3
 800796e:	dc17      	bgt.n	80079a0 <_puts_r+0x8c>
 8007970:	290a      	cmp	r1, #10
 8007972:	d015      	beq.n	80079a0 <_puts_r+0x8c>
 8007974:	6823      	ldr	r3, [r4, #0]
 8007976:	1c5a      	adds	r2, r3, #1
 8007978:	6022      	str	r2, [r4, #0]
 800797a:	7019      	strb	r1, [r3, #0]
 800797c:	68a3      	ldr	r3, [r4, #8]
 800797e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007982:	3b01      	subs	r3, #1
 8007984:	60a3      	str	r3, [r4, #8]
 8007986:	2900      	cmp	r1, #0
 8007988:	d1ed      	bne.n	8007966 <_puts_r+0x52>
 800798a:	2b00      	cmp	r3, #0
 800798c:	da11      	bge.n	80079b2 <_puts_r+0x9e>
 800798e:	4622      	mov	r2, r4
 8007990:	210a      	movs	r1, #10
 8007992:	4628      	mov	r0, r5
 8007994:	f000 f87f 	bl	8007a96 <__swbuf_r>
 8007998:	3001      	adds	r0, #1
 800799a:	d0d7      	beq.n	800794c <_puts_r+0x38>
 800799c:	250a      	movs	r5, #10
 800799e:	e7d7      	b.n	8007950 <_puts_r+0x3c>
 80079a0:	4622      	mov	r2, r4
 80079a2:	4628      	mov	r0, r5
 80079a4:	f000 f877 	bl	8007a96 <__swbuf_r>
 80079a8:	3001      	adds	r0, #1
 80079aa:	d1e7      	bne.n	800797c <_puts_r+0x68>
 80079ac:	e7ce      	b.n	800794c <_puts_r+0x38>
 80079ae:	3e01      	subs	r6, #1
 80079b0:	e7e4      	b.n	800797c <_puts_r+0x68>
 80079b2:	6823      	ldr	r3, [r4, #0]
 80079b4:	1c5a      	adds	r2, r3, #1
 80079b6:	6022      	str	r2, [r4, #0]
 80079b8:	220a      	movs	r2, #10
 80079ba:	701a      	strb	r2, [r3, #0]
 80079bc:	e7ee      	b.n	800799c <_puts_r+0x88>
	...

080079c0 <puts>:
 80079c0:	4b02      	ldr	r3, [pc, #8]	@ (80079cc <puts+0xc>)
 80079c2:	4601      	mov	r1, r0
 80079c4:	6818      	ldr	r0, [r3, #0]
 80079c6:	f7ff bfa5 	b.w	8007914 <_puts_r>
 80079ca:	bf00      	nop
 80079cc:	2000004c 	.word	0x2000004c

080079d0 <siprintf>:
 80079d0:	b40e      	push	{r1, r2, r3}
 80079d2:	b500      	push	{lr}
 80079d4:	b09c      	sub	sp, #112	@ 0x70
 80079d6:	ab1d      	add	r3, sp, #116	@ 0x74
 80079d8:	9002      	str	r0, [sp, #8]
 80079da:	9006      	str	r0, [sp, #24]
 80079dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80079e0:	4809      	ldr	r0, [pc, #36]	@ (8007a08 <siprintf+0x38>)
 80079e2:	9107      	str	r1, [sp, #28]
 80079e4:	9104      	str	r1, [sp, #16]
 80079e6:	4909      	ldr	r1, [pc, #36]	@ (8007a0c <siprintf+0x3c>)
 80079e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80079ec:	9105      	str	r1, [sp, #20]
 80079ee:	6800      	ldr	r0, [r0, #0]
 80079f0:	9301      	str	r3, [sp, #4]
 80079f2:	a902      	add	r1, sp, #8
 80079f4:	f000 fabc 	bl	8007f70 <_svfiprintf_r>
 80079f8:	9b02      	ldr	r3, [sp, #8]
 80079fa:	2200      	movs	r2, #0
 80079fc:	701a      	strb	r2, [r3, #0]
 80079fe:	b01c      	add	sp, #112	@ 0x70
 8007a00:	f85d eb04 	ldr.w	lr, [sp], #4
 8007a04:	b003      	add	sp, #12
 8007a06:	4770      	bx	lr
 8007a08:	2000004c 	.word	0x2000004c
 8007a0c:	ffff0208 	.word	0xffff0208

08007a10 <__sread>:
 8007a10:	b510      	push	{r4, lr}
 8007a12:	460c      	mov	r4, r1
 8007a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a18:	f000 f8fc 	bl	8007c14 <_read_r>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	bfab      	itete	ge
 8007a20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007a22:	89a3      	ldrhlt	r3, [r4, #12]
 8007a24:	181b      	addge	r3, r3, r0
 8007a26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007a2a:	bfac      	ite	ge
 8007a2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007a2e:	81a3      	strhlt	r3, [r4, #12]
 8007a30:	bd10      	pop	{r4, pc}

08007a32 <__swrite>:
 8007a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a36:	461f      	mov	r7, r3
 8007a38:	898b      	ldrh	r3, [r1, #12]
 8007a3a:	05db      	lsls	r3, r3, #23
 8007a3c:	4605      	mov	r5, r0
 8007a3e:	460c      	mov	r4, r1
 8007a40:	4616      	mov	r6, r2
 8007a42:	d505      	bpl.n	8007a50 <__swrite+0x1e>
 8007a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a48:	2302      	movs	r3, #2
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f000 f8d0 	bl	8007bf0 <_lseek_r>
 8007a50:	89a3      	ldrh	r3, [r4, #12]
 8007a52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a5a:	81a3      	strh	r3, [r4, #12]
 8007a5c:	4632      	mov	r2, r6
 8007a5e:	463b      	mov	r3, r7
 8007a60:	4628      	mov	r0, r5
 8007a62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a66:	f000 b8e7 	b.w	8007c38 <_write_r>

08007a6a <__sseek>:
 8007a6a:	b510      	push	{r4, lr}
 8007a6c:	460c      	mov	r4, r1
 8007a6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a72:	f000 f8bd 	bl	8007bf0 <_lseek_r>
 8007a76:	1c43      	adds	r3, r0, #1
 8007a78:	89a3      	ldrh	r3, [r4, #12]
 8007a7a:	bf15      	itete	ne
 8007a7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007a7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007a82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007a86:	81a3      	strheq	r3, [r4, #12]
 8007a88:	bf18      	it	ne
 8007a8a:	81a3      	strhne	r3, [r4, #12]
 8007a8c:	bd10      	pop	{r4, pc}

08007a8e <__sclose>:
 8007a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a92:	f000 b89d 	b.w	8007bd0 <_close_r>

08007a96 <__swbuf_r>:
 8007a96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a98:	460e      	mov	r6, r1
 8007a9a:	4614      	mov	r4, r2
 8007a9c:	4605      	mov	r5, r0
 8007a9e:	b118      	cbz	r0, 8007aa8 <__swbuf_r+0x12>
 8007aa0:	6a03      	ldr	r3, [r0, #32]
 8007aa2:	b90b      	cbnz	r3, 8007aa8 <__swbuf_r+0x12>
 8007aa4:	f7ff feee 	bl	8007884 <__sinit>
 8007aa8:	69a3      	ldr	r3, [r4, #24]
 8007aaa:	60a3      	str	r3, [r4, #8]
 8007aac:	89a3      	ldrh	r3, [r4, #12]
 8007aae:	071a      	lsls	r2, r3, #28
 8007ab0:	d501      	bpl.n	8007ab6 <__swbuf_r+0x20>
 8007ab2:	6923      	ldr	r3, [r4, #16]
 8007ab4:	b943      	cbnz	r3, 8007ac8 <__swbuf_r+0x32>
 8007ab6:	4621      	mov	r1, r4
 8007ab8:	4628      	mov	r0, r5
 8007aba:	f000 f82b 	bl	8007b14 <__swsetup_r>
 8007abe:	b118      	cbz	r0, 8007ac8 <__swbuf_r+0x32>
 8007ac0:	f04f 37ff 	mov.w	r7, #4294967295
 8007ac4:	4638      	mov	r0, r7
 8007ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ac8:	6823      	ldr	r3, [r4, #0]
 8007aca:	6922      	ldr	r2, [r4, #16]
 8007acc:	1a98      	subs	r0, r3, r2
 8007ace:	6963      	ldr	r3, [r4, #20]
 8007ad0:	b2f6      	uxtb	r6, r6
 8007ad2:	4283      	cmp	r3, r0
 8007ad4:	4637      	mov	r7, r6
 8007ad6:	dc05      	bgt.n	8007ae4 <__swbuf_r+0x4e>
 8007ad8:	4621      	mov	r1, r4
 8007ada:	4628      	mov	r0, r5
 8007adc:	f000 fe98 	bl	8008810 <_fflush_r>
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	d1ed      	bne.n	8007ac0 <__swbuf_r+0x2a>
 8007ae4:	68a3      	ldr	r3, [r4, #8]
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	60a3      	str	r3, [r4, #8]
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	1c5a      	adds	r2, r3, #1
 8007aee:	6022      	str	r2, [r4, #0]
 8007af0:	701e      	strb	r6, [r3, #0]
 8007af2:	6962      	ldr	r2, [r4, #20]
 8007af4:	1c43      	adds	r3, r0, #1
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d004      	beq.n	8007b04 <__swbuf_r+0x6e>
 8007afa:	89a3      	ldrh	r3, [r4, #12]
 8007afc:	07db      	lsls	r3, r3, #31
 8007afe:	d5e1      	bpl.n	8007ac4 <__swbuf_r+0x2e>
 8007b00:	2e0a      	cmp	r6, #10
 8007b02:	d1df      	bne.n	8007ac4 <__swbuf_r+0x2e>
 8007b04:	4621      	mov	r1, r4
 8007b06:	4628      	mov	r0, r5
 8007b08:	f000 fe82 	bl	8008810 <_fflush_r>
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	d0d9      	beq.n	8007ac4 <__swbuf_r+0x2e>
 8007b10:	e7d6      	b.n	8007ac0 <__swbuf_r+0x2a>
	...

08007b14 <__swsetup_r>:
 8007b14:	b538      	push	{r3, r4, r5, lr}
 8007b16:	4b29      	ldr	r3, [pc, #164]	@ (8007bbc <__swsetup_r+0xa8>)
 8007b18:	4605      	mov	r5, r0
 8007b1a:	6818      	ldr	r0, [r3, #0]
 8007b1c:	460c      	mov	r4, r1
 8007b1e:	b118      	cbz	r0, 8007b28 <__swsetup_r+0x14>
 8007b20:	6a03      	ldr	r3, [r0, #32]
 8007b22:	b90b      	cbnz	r3, 8007b28 <__swsetup_r+0x14>
 8007b24:	f7ff feae 	bl	8007884 <__sinit>
 8007b28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b2c:	0719      	lsls	r1, r3, #28
 8007b2e:	d422      	bmi.n	8007b76 <__swsetup_r+0x62>
 8007b30:	06da      	lsls	r2, r3, #27
 8007b32:	d407      	bmi.n	8007b44 <__swsetup_r+0x30>
 8007b34:	2209      	movs	r2, #9
 8007b36:	602a      	str	r2, [r5, #0]
 8007b38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b3c:	81a3      	strh	r3, [r4, #12]
 8007b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b42:	e033      	b.n	8007bac <__swsetup_r+0x98>
 8007b44:	0758      	lsls	r0, r3, #29
 8007b46:	d512      	bpl.n	8007b6e <__swsetup_r+0x5a>
 8007b48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b4a:	b141      	cbz	r1, 8007b5e <__swsetup_r+0x4a>
 8007b4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b50:	4299      	cmp	r1, r3
 8007b52:	d002      	beq.n	8007b5a <__swsetup_r+0x46>
 8007b54:	4628      	mov	r0, r5
 8007b56:	f000 f8b7 	bl	8007cc8 <_free_r>
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b5e:	89a3      	ldrh	r3, [r4, #12]
 8007b60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007b64:	81a3      	strh	r3, [r4, #12]
 8007b66:	2300      	movs	r3, #0
 8007b68:	6063      	str	r3, [r4, #4]
 8007b6a:	6923      	ldr	r3, [r4, #16]
 8007b6c:	6023      	str	r3, [r4, #0]
 8007b6e:	89a3      	ldrh	r3, [r4, #12]
 8007b70:	f043 0308 	orr.w	r3, r3, #8
 8007b74:	81a3      	strh	r3, [r4, #12]
 8007b76:	6923      	ldr	r3, [r4, #16]
 8007b78:	b94b      	cbnz	r3, 8007b8e <__swsetup_r+0x7a>
 8007b7a:	89a3      	ldrh	r3, [r4, #12]
 8007b7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007b80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b84:	d003      	beq.n	8007b8e <__swsetup_r+0x7a>
 8007b86:	4621      	mov	r1, r4
 8007b88:	4628      	mov	r0, r5
 8007b8a:	f000 fe8f 	bl	80088ac <__smakebuf_r>
 8007b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b92:	f013 0201 	ands.w	r2, r3, #1
 8007b96:	d00a      	beq.n	8007bae <__swsetup_r+0x9a>
 8007b98:	2200      	movs	r2, #0
 8007b9a:	60a2      	str	r2, [r4, #8]
 8007b9c:	6962      	ldr	r2, [r4, #20]
 8007b9e:	4252      	negs	r2, r2
 8007ba0:	61a2      	str	r2, [r4, #24]
 8007ba2:	6922      	ldr	r2, [r4, #16]
 8007ba4:	b942      	cbnz	r2, 8007bb8 <__swsetup_r+0xa4>
 8007ba6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007baa:	d1c5      	bne.n	8007b38 <__swsetup_r+0x24>
 8007bac:	bd38      	pop	{r3, r4, r5, pc}
 8007bae:	0799      	lsls	r1, r3, #30
 8007bb0:	bf58      	it	pl
 8007bb2:	6962      	ldrpl	r2, [r4, #20]
 8007bb4:	60a2      	str	r2, [r4, #8]
 8007bb6:	e7f4      	b.n	8007ba2 <__swsetup_r+0x8e>
 8007bb8:	2000      	movs	r0, #0
 8007bba:	e7f7      	b.n	8007bac <__swsetup_r+0x98>
 8007bbc:	2000004c 	.word	0x2000004c

08007bc0 <memset>:
 8007bc0:	4402      	add	r2, r0
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d100      	bne.n	8007bca <memset+0xa>
 8007bc8:	4770      	bx	lr
 8007bca:	f803 1b01 	strb.w	r1, [r3], #1
 8007bce:	e7f9      	b.n	8007bc4 <memset+0x4>

08007bd0 <_close_r>:
 8007bd0:	b538      	push	{r3, r4, r5, lr}
 8007bd2:	4d06      	ldr	r5, [pc, #24]	@ (8007bec <_close_r+0x1c>)
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	4604      	mov	r4, r0
 8007bd8:	4608      	mov	r0, r1
 8007bda:	602b      	str	r3, [r5, #0]
 8007bdc:	f7fb fad1 	bl	8003182 <_close>
 8007be0:	1c43      	adds	r3, r0, #1
 8007be2:	d102      	bne.n	8007bea <_close_r+0x1a>
 8007be4:	682b      	ldr	r3, [r5, #0]
 8007be6:	b103      	cbz	r3, 8007bea <_close_r+0x1a>
 8007be8:	6023      	str	r3, [r4, #0]
 8007bea:	bd38      	pop	{r3, r4, r5, pc}
 8007bec:	200003c4 	.word	0x200003c4

08007bf0 <_lseek_r>:
 8007bf0:	b538      	push	{r3, r4, r5, lr}
 8007bf2:	4d07      	ldr	r5, [pc, #28]	@ (8007c10 <_lseek_r+0x20>)
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	4608      	mov	r0, r1
 8007bf8:	4611      	mov	r1, r2
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	602a      	str	r2, [r5, #0]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	f7fb fae6 	bl	80031d0 <_lseek>
 8007c04:	1c43      	adds	r3, r0, #1
 8007c06:	d102      	bne.n	8007c0e <_lseek_r+0x1e>
 8007c08:	682b      	ldr	r3, [r5, #0]
 8007c0a:	b103      	cbz	r3, 8007c0e <_lseek_r+0x1e>
 8007c0c:	6023      	str	r3, [r4, #0]
 8007c0e:	bd38      	pop	{r3, r4, r5, pc}
 8007c10:	200003c4 	.word	0x200003c4

08007c14 <_read_r>:
 8007c14:	b538      	push	{r3, r4, r5, lr}
 8007c16:	4d07      	ldr	r5, [pc, #28]	@ (8007c34 <_read_r+0x20>)
 8007c18:	4604      	mov	r4, r0
 8007c1a:	4608      	mov	r0, r1
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	2200      	movs	r2, #0
 8007c20:	602a      	str	r2, [r5, #0]
 8007c22:	461a      	mov	r2, r3
 8007c24:	f7fb fa74 	bl	8003110 <_read>
 8007c28:	1c43      	adds	r3, r0, #1
 8007c2a:	d102      	bne.n	8007c32 <_read_r+0x1e>
 8007c2c:	682b      	ldr	r3, [r5, #0]
 8007c2e:	b103      	cbz	r3, 8007c32 <_read_r+0x1e>
 8007c30:	6023      	str	r3, [r4, #0]
 8007c32:	bd38      	pop	{r3, r4, r5, pc}
 8007c34:	200003c4 	.word	0x200003c4

08007c38 <_write_r>:
 8007c38:	b538      	push	{r3, r4, r5, lr}
 8007c3a:	4d07      	ldr	r5, [pc, #28]	@ (8007c58 <_write_r+0x20>)
 8007c3c:	4604      	mov	r4, r0
 8007c3e:	4608      	mov	r0, r1
 8007c40:	4611      	mov	r1, r2
 8007c42:	2200      	movs	r2, #0
 8007c44:	602a      	str	r2, [r5, #0]
 8007c46:	461a      	mov	r2, r3
 8007c48:	f7fb fa7f 	bl	800314a <_write>
 8007c4c:	1c43      	adds	r3, r0, #1
 8007c4e:	d102      	bne.n	8007c56 <_write_r+0x1e>
 8007c50:	682b      	ldr	r3, [r5, #0]
 8007c52:	b103      	cbz	r3, 8007c56 <_write_r+0x1e>
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	bd38      	pop	{r3, r4, r5, pc}
 8007c58:	200003c4 	.word	0x200003c4

08007c5c <__errno>:
 8007c5c:	4b01      	ldr	r3, [pc, #4]	@ (8007c64 <__errno+0x8>)
 8007c5e:	6818      	ldr	r0, [r3, #0]
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	2000004c 	.word	0x2000004c

08007c68 <__libc_init_array>:
 8007c68:	b570      	push	{r4, r5, r6, lr}
 8007c6a:	4d0d      	ldr	r5, [pc, #52]	@ (8007ca0 <__libc_init_array+0x38>)
 8007c6c:	4c0d      	ldr	r4, [pc, #52]	@ (8007ca4 <__libc_init_array+0x3c>)
 8007c6e:	1b64      	subs	r4, r4, r5
 8007c70:	10a4      	asrs	r4, r4, #2
 8007c72:	2600      	movs	r6, #0
 8007c74:	42a6      	cmp	r6, r4
 8007c76:	d109      	bne.n	8007c8c <__libc_init_array+0x24>
 8007c78:	4d0b      	ldr	r5, [pc, #44]	@ (8007ca8 <__libc_init_array+0x40>)
 8007c7a:	4c0c      	ldr	r4, [pc, #48]	@ (8007cac <__libc_init_array+0x44>)
 8007c7c:	f000 fee2 	bl	8008a44 <_init>
 8007c80:	1b64      	subs	r4, r4, r5
 8007c82:	10a4      	asrs	r4, r4, #2
 8007c84:	2600      	movs	r6, #0
 8007c86:	42a6      	cmp	r6, r4
 8007c88:	d105      	bne.n	8007c96 <__libc_init_array+0x2e>
 8007c8a:	bd70      	pop	{r4, r5, r6, pc}
 8007c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c90:	4798      	blx	r3
 8007c92:	3601      	adds	r6, #1
 8007c94:	e7ee      	b.n	8007c74 <__libc_init_array+0xc>
 8007c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c9a:	4798      	blx	r3
 8007c9c:	3601      	adds	r6, #1
 8007c9e:	e7f2      	b.n	8007c86 <__libc_init_array+0x1e>
 8007ca0:	08008cf4 	.word	0x08008cf4
 8007ca4:	08008cf4 	.word	0x08008cf4
 8007ca8:	08008cf4 	.word	0x08008cf4
 8007cac:	08008cf8 	.word	0x08008cf8

08007cb0 <__retarget_lock_init_recursive>:
 8007cb0:	4770      	bx	lr

08007cb2 <__retarget_lock_acquire_recursive>:
 8007cb2:	4770      	bx	lr

08007cb4 <__retarget_lock_release_recursive>:
 8007cb4:	4770      	bx	lr

08007cb6 <strcpy>:
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007cbc:	f803 2b01 	strb.w	r2, [r3], #1
 8007cc0:	2a00      	cmp	r2, #0
 8007cc2:	d1f9      	bne.n	8007cb8 <strcpy+0x2>
 8007cc4:	4770      	bx	lr
	...

08007cc8 <_free_r>:
 8007cc8:	b538      	push	{r3, r4, r5, lr}
 8007cca:	4605      	mov	r5, r0
 8007ccc:	2900      	cmp	r1, #0
 8007cce:	d041      	beq.n	8007d54 <_free_r+0x8c>
 8007cd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cd4:	1f0c      	subs	r4, r1, #4
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	bfb8      	it	lt
 8007cda:	18e4      	addlt	r4, r4, r3
 8007cdc:	f000 f8e0 	bl	8007ea0 <__malloc_lock>
 8007ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8007d58 <_free_r+0x90>)
 8007ce2:	6813      	ldr	r3, [r2, #0]
 8007ce4:	b933      	cbnz	r3, 8007cf4 <_free_r+0x2c>
 8007ce6:	6063      	str	r3, [r4, #4]
 8007ce8:	6014      	str	r4, [r2, #0]
 8007cea:	4628      	mov	r0, r5
 8007cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cf0:	f000 b8dc 	b.w	8007eac <__malloc_unlock>
 8007cf4:	42a3      	cmp	r3, r4
 8007cf6:	d908      	bls.n	8007d0a <_free_r+0x42>
 8007cf8:	6820      	ldr	r0, [r4, #0]
 8007cfa:	1821      	adds	r1, r4, r0
 8007cfc:	428b      	cmp	r3, r1
 8007cfe:	bf01      	itttt	eq
 8007d00:	6819      	ldreq	r1, [r3, #0]
 8007d02:	685b      	ldreq	r3, [r3, #4]
 8007d04:	1809      	addeq	r1, r1, r0
 8007d06:	6021      	streq	r1, [r4, #0]
 8007d08:	e7ed      	b.n	8007ce6 <_free_r+0x1e>
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	b10b      	cbz	r3, 8007d14 <_free_r+0x4c>
 8007d10:	42a3      	cmp	r3, r4
 8007d12:	d9fa      	bls.n	8007d0a <_free_r+0x42>
 8007d14:	6811      	ldr	r1, [r2, #0]
 8007d16:	1850      	adds	r0, r2, r1
 8007d18:	42a0      	cmp	r0, r4
 8007d1a:	d10b      	bne.n	8007d34 <_free_r+0x6c>
 8007d1c:	6820      	ldr	r0, [r4, #0]
 8007d1e:	4401      	add	r1, r0
 8007d20:	1850      	adds	r0, r2, r1
 8007d22:	4283      	cmp	r3, r0
 8007d24:	6011      	str	r1, [r2, #0]
 8007d26:	d1e0      	bne.n	8007cea <_free_r+0x22>
 8007d28:	6818      	ldr	r0, [r3, #0]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	6053      	str	r3, [r2, #4]
 8007d2e:	4408      	add	r0, r1
 8007d30:	6010      	str	r0, [r2, #0]
 8007d32:	e7da      	b.n	8007cea <_free_r+0x22>
 8007d34:	d902      	bls.n	8007d3c <_free_r+0x74>
 8007d36:	230c      	movs	r3, #12
 8007d38:	602b      	str	r3, [r5, #0]
 8007d3a:	e7d6      	b.n	8007cea <_free_r+0x22>
 8007d3c:	6820      	ldr	r0, [r4, #0]
 8007d3e:	1821      	adds	r1, r4, r0
 8007d40:	428b      	cmp	r3, r1
 8007d42:	bf04      	itt	eq
 8007d44:	6819      	ldreq	r1, [r3, #0]
 8007d46:	685b      	ldreq	r3, [r3, #4]
 8007d48:	6063      	str	r3, [r4, #4]
 8007d4a:	bf04      	itt	eq
 8007d4c:	1809      	addeq	r1, r1, r0
 8007d4e:	6021      	streq	r1, [r4, #0]
 8007d50:	6054      	str	r4, [r2, #4]
 8007d52:	e7ca      	b.n	8007cea <_free_r+0x22>
 8007d54:	bd38      	pop	{r3, r4, r5, pc}
 8007d56:	bf00      	nop
 8007d58:	200003d0 	.word	0x200003d0

08007d5c <sbrk_aligned>:
 8007d5c:	b570      	push	{r4, r5, r6, lr}
 8007d5e:	4e0f      	ldr	r6, [pc, #60]	@ (8007d9c <sbrk_aligned+0x40>)
 8007d60:	460c      	mov	r4, r1
 8007d62:	6831      	ldr	r1, [r6, #0]
 8007d64:	4605      	mov	r5, r0
 8007d66:	b911      	cbnz	r1, 8007d6e <sbrk_aligned+0x12>
 8007d68:	f000 fe18 	bl	800899c <_sbrk_r>
 8007d6c:	6030      	str	r0, [r6, #0]
 8007d6e:	4621      	mov	r1, r4
 8007d70:	4628      	mov	r0, r5
 8007d72:	f000 fe13 	bl	800899c <_sbrk_r>
 8007d76:	1c43      	adds	r3, r0, #1
 8007d78:	d103      	bne.n	8007d82 <sbrk_aligned+0x26>
 8007d7a:	f04f 34ff 	mov.w	r4, #4294967295
 8007d7e:	4620      	mov	r0, r4
 8007d80:	bd70      	pop	{r4, r5, r6, pc}
 8007d82:	1cc4      	adds	r4, r0, #3
 8007d84:	f024 0403 	bic.w	r4, r4, #3
 8007d88:	42a0      	cmp	r0, r4
 8007d8a:	d0f8      	beq.n	8007d7e <sbrk_aligned+0x22>
 8007d8c:	1a21      	subs	r1, r4, r0
 8007d8e:	4628      	mov	r0, r5
 8007d90:	f000 fe04 	bl	800899c <_sbrk_r>
 8007d94:	3001      	adds	r0, #1
 8007d96:	d1f2      	bne.n	8007d7e <sbrk_aligned+0x22>
 8007d98:	e7ef      	b.n	8007d7a <sbrk_aligned+0x1e>
 8007d9a:	bf00      	nop
 8007d9c:	200003cc 	.word	0x200003cc

08007da0 <_malloc_r>:
 8007da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007da4:	1ccd      	adds	r5, r1, #3
 8007da6:	f025 0503 	bic.w	r5, r5, #3
 8007daa:	3508      	adds	r5, #8
 8007dac:	2d0c      	cmp	r5, #12
 8007dae:	bf38      	it	cc
 8007db0:	250c      	movcc	r5, #12
 8007db2:	2d00      	cmp	r5, #0
 8007db4:	4606      	mov	r6, r0
 8007db6:	db01      	blt.n	8007dbc <_malloc_r+0x1c>
 8007db8:	42a9      	cmp	r1, r5
 8007dba:	d904      	bls.n	8007dc6 <_malloc_r+0x26>
 8007dbc:	230c      	movs	r3, #12
 8007dbe:	6033      	str	r3, [r6, #0]
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e9c <_malloc_r+0xfc>
 8007dca:	f000 f869 	bl	8007ea0 <__malloc_lock>
 8007dce:	f8d8 3000 	ldr.w	r3, [r8]
 8007dd2:	461c      	mov	r4, r3
 8007dd4:	bb44      	cbnz	r4, 8007e28 <_malloc_r+0x88>
 8007dd6:	4629      	mov	r1, r5
 8007dd8:	4630      	mov	r0, r6
 8007dda:	f7ff ffbf 	bl	8007d5c <sbrk_aligned>
 8007dde:	1c43      	adds	r3, r0, #1
 8007de0:	4604      	mov	r4, r0
 8007de2:	d158      	bne.n	8007e96 <_malloc_r+0xf6>
 8007de4:	f8d8 4000 	ldr.w	r4, [r8]
 8007de8:	4627      	mov	r7, r4
 8007dea:	2f00      	cmp	r7, #0
 8007dec:	d143      	bne.n	8007e76 <_malloc_r+0xd6>
 8007dee:	2c00      	cmp	r4, #0
 8007df0:	d04b      	beq.n	8007e8a <_malloc_r+0xea>
 8007df2:	6823      	ldr	r3, [r4, #0]
 8007df4:	4639      	mov	r1, r7
 8007df6:	4630      	mov	r0, r6
 8007df8:	eb04 0903 	add.w	r9, r4, r3
 8007dfc:	f000 fdce 	bl	800899c <_sbrk_r>
 8007e00:	4581      	cmp	r9, r0
 8007e02:	d142      	bne.n	8007e8a <_malloc_r+0xea>
 8007e04:	6821      	ldr	r1, [r4, #0]
 8007e06:	1a6d      	subs	r5, r5, r1
 8007e08:	4629      	mov	r1, r5
 8007e0a:	4630      	mov	r0, r6
 8007e0c:	f7ff ffa6 	bl	8007d5c <sbrk_aligned>
 8007e10:	3001      	adds	r0, #1
 8007e12:	d03a      	beq.n	8007e8a <_malloc_r+0xea>
 8007e14:	6823      	ldr	r3, [r4, #0]
 8007e16:	442b      	add	r3, r5
 8007e18:	6023      	str	r3, [r4, #0]
 8007e1a:	f8d8 3000 	ldr.w	r3, [r8]
 8007e1e:	685a      	ldr	r2, [r3, #4]
 8007e20:	bb62      	cbnz	r2, 8007e7c <_malloc_r+0xdc>
 8007e22:	f8c8 7000 	str.w	r7, [r8]
 8007e26:	e00f      	b.n	8007e48 <_malloc_r+0xa8>
 8007e28:	6822      	ldr	r2, [r4, #0]
 8007e2a:	1b52      	subs	r2, r2, r5
 8007e2c:	d420      	bmi.n	8007e70 <_malloc_r+0xd0>
 8007e2e:	2a0b      	cmp	r2, #11
 8007e30:	d917      	bls.n	8007e62 <_malloc_r+0xc2>
 8007e32:	1961      	adds	r1, r4, r5
 8007e34:	42a3      	cmp	r3, r4
 8007e36:	6025      	str	r5, [r4, #0]
 8007e38:	bf18      	it	ne
 8007e3a:	6059      	strne	r1, [r3, #4]
 8007e3c:	6863      	ldr	r3, [r4, #4]
 8007e3e:	bf08      	it	eq
 8007e40:	f8c8 1000 	streq.w	r1, [r8]
 8007e44:	5162      	str	r2, [r4, r5]
 8007e46:	604b      	str	r3, [r1, #4]
 8007e48:	4630      	mov	r0, r6
 8007e4a:	f000 f82f 	bl	8007eac <__malloc_unlock>
 8007e4e:	f104 000b 	add.w	r0, r4, #11
 8007e52:	1d23      	adds	r3, r4, #4
 8007e54:	f020 0007 	bic.w	r0, r0, #7
 8007e58:	1ac2      	subs	r2, r0, r3
 8007e5a:	bf1c      	itt	ne
 8007e5c:	1a1b      	subne	r3, r3, r0
 8007e5e:	50a3      	strne	r3, [r4, r2]
 8007e60:	e7af      	b.n	8007dc2 <_malloc_r+0x22>
 8007e62:	6862      	ldr	r2, [r4, #4]
 8007e64:	42a3      	cmp	r3, r4
 8007e66:	bf0c      	ite	eq
 8007e68:	f8c8 2000 	streq.w	r2, [r8]
 8007e6c:	605a      	strne	r2, [r3, #4]
 8007e6e:	e7eb      	b.n	8007e48 <_malloc_r+0xa8>
 8007e70:	4623      	mov	r3, r4
 8007e72:	6864      	ldr	r4, [r4, #4]
 8007e74:	e7ae      	b.n	8007dd4 <_malloc_r+0x34>
 8007e76:	463c      	mov	r4, r7
 8007e78:	687f      	ldr	r7, [r7, #4]
 8007e7a:	e7b6      	b.n	8007dea <_malloc_r+0x4a>
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	42a3      	cmp	r3, r4
 8007e82:	d1fb      	bne.n	8007e7c <_malloc_r+0xdc>
 8007e84:	2300      	movs	r3, #0
 8007e86:	6053      	str	r3, [r2, #4]
 8007e88:	e7de      	b.n	8007e48 <_malloc_r+0xa8>
 8007e8a:	230c      	movs	r3, #12
 8007e8c:	6033      	str	r3, [r6, #0]
 8007e8e:	4630      	mov	r0, r6
 8007e90:	f000 f80c 	bl	8007eac <__malloc_unlock>
 8007e94:	e794      	b.n	8007dc0 <_malloc_r+0x20>
 8007e96:	6005      	str	r5, [r0, #0]
 8007e98:	e7d6      	b.n	8007e48 <_malloc_r+0xa8>
 8007e9a:	bf00      	nop
 8007e9c:	200003d0 	.word	0x200003d0

08007ea0 <__malloc_lock>:
 8007ea0:	4801      	ldr	r0, [pc, #4]	@ (8007ea8 <__malloc_lock+0x8>)
 8007ea2:	f7ff bf06 	b.w	8007cb2 <__retarget_lock_acquire_recursive>
 8007ea6:	bf00      	nop
 8007ea8:	200003c8 	.word	0x200003c8

08007eac <__malloc_unlock>:
 8007eac:	4801      	ldr	r0, [pc, #4]	@ (8007eb4 <__malloc_unlock+0x8>)
 8007eae:	f7ff bf01 	b.w	8007cb4 <__retarget_lock_release_recursive>
 8007eb2:	bf00      	nop
 8007eb4:	200003c8 	.word	0x200003c8

08007eb8 <__ssputs_r>:
 8007eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ebc:	688e      	ldr	r6, [r1, #8]
 8007ebe:	461f      	mov	r7, r3
 8007ec0:	42be      	cmp	r6, r7
 8007ec2:	680b      	ldr	r3, [r1, #0]
 8007ec4:	4682      	mov	sl, r0
 8007ec6:	460c      	mov	r4, r1
 8007ec8:	4690      	mov	r8, r2
 8007eca:	d82d      	bhi.n	8007f28 <__ssputs_r+0x70>
 8007ecc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ed0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007ed4:	d026      	beq.n	8007f24 <__ssputs_r+0x6c>
 8007ed6:	6965      	ldr	r5, [r4, #20]
 8007ed8:	6909      	ldr	r1, [r1, #16]
 8007eda:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ede:	eba3 0901 	sub.w	r9, r3, r1
 8007ee2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ee6:	1c7b      	adds	r3, r7, #1
 8007ee8:	444b      	add	r3, r9
 8007eea:	106d      	asrs	r5, r5, #1
 8007eec:	429d      	cmp	r5, r3
 8007eee:	bf38      	it	cc
 8007ef0:	461d      	movcc	r5, r3
 8007ef2:	0553      	lsls	r3, r2, #21
 8007ef4:	d527      	bpl.n	8007f46 <__ssputs_r+0x8e>
 8007ef6:	4629      	mov	r1, r5
 8007ef8:	f7ff ff52 	bl	8007da0 <_malloc_r>
 8007efc:	4606      	mov	r6, r0
 8007efe:	b360      	cbz	r0, 8007f5a <__ssputs_r+0xa2>
 8007f00:	6921      	ldr	r1, [r4, #16]
 8007f02:	464a      	mov	r2, r9
 8007f04:	f000 fd5a 	bl	80089bc <memcpy>
 8007f08:	89a3      	ldrh	r3, [r4, #12]
 8007f0a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007f0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f12:	81a3      	strh	r3, [r4, #12]
 8007f14:	6126      	str	r6, [r4, #16]
 8007f16:	6165      	str	r5, [r4, #20]
 8007f18:	444e      	add	r6, r9
 8007f1a:	eba5 0509 	sub.w	r5, r5, r9
 8007f1e:	6026      	str	r6, [r4, #0]
 8007f20:	60a5      	str	r5, [r4, #8]
 8007f22:	463e      	mov	r6, r7
 8007f24:	42be      	cmp	r6, r7
 8007f26:	d900      	bls.n	8007f2a <__ssputs_r+0x72>
 8007f28:	463e      	mov	r6, r7
 8007f2a:	6820      	ldr	r0, [r4, #0]
 8007f2c:	4632      	mov	r2, r6
 8007f2e:	4641      	mov	r1, r8
 8007f30:	f000 fcf8 	bl	8008924 <memmove>
 8007f34:	68a3      	ldr	r3, [r4, #8]
 8007f36:	1b9b      	subs	r3, r3, r6
 8007f38:	60a3      	str	r3, [r4, #8]
 8007f3a:	6823      	ldr	r3, [r4, #0]
 8007f3c:	4433      	add	r3, r6
 8007f3e:	6023      	str	r3, [r4, #0]
 8007f40:	2000      	movs	r0, #0
 8007f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f46:	462a      	mov	r2, r5
 8007f48:	f000 fd46 	bl	80089d8 <_realloc_r>
 8007f4c:	4606      	mov	r6, r0
 8007f4e:	2800      	cmp	r0, #0
 8007f50:	d1e0      	bne.n	8007f14 <__ssputs_r+0x5c>
 8007f52:	6921      	ldr	r1, [r4, #16]
 8007f54:	4650      	mov	r0, sl
 8007f56:	f7ff feb7 	bl	8007cc8 <_free_r>
 8007f5a:	230c      	movs	r3, #12
 8007f5c:	f8ca 3000 	str.w	r3, [sl]
 8007f60:	89a3      	ldrh	r3, [r4, #12]
 8007f62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f66:	81a3      	strh	r3, [r4, #12]
 8007f68:	f04f 30ff 	mov.w	r0, #4294967295
 8007f6c:	e7e9      	b.n	8007f42 <__ssputs_r+0x8a>
	...

08007f70 <_svfiprintf_r>:
 8007f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f74:	4698      	mov	r8, r3
 8007f76:	898b      	ldrh	r3, [r1, #12]
 8007f78:	061b      	lsls	r3, r3, #24
 8007f7a:	b09d      	sub	sp, #116	@ 0x74
 8007f7c:	4607      	mov	r7, r0
 8007f7e:	460d      	mov	r5, r1
 8007f80:	4614      	mov	r4, r2
 8007f82:	d510      	bpl.n	8007fa6 <_svfiprintf_r+0x36>
 8007f84:	690b      	ldr	r3, [r1, #16]
 8007f86:	b973      	cbnz	r3, 8007fa6 <_svfiprintf_r+0x36>
 8007f88:	2140      	movs	r1, #64	@ 0x40
 8007f8a:	f7ff ff09 	bl	8007da0 <_malloc_r>
 8007f8e:	6028      	str	r0, [r5, #0]
 8007f90:	6128      	str	r0, [r5, #16]
 8007f92:	b930      	cbnz	r0, 8007fa2 <_svfiprintf_r+0x32>
 8007f94:	230c      	movs	r3, #12
 8007f96:	603b      	str	r3, [r7, #0]
 8007f98:	f04f 30ff 	mov.w	r0, #4294967295
 8007f9c:	b01d      	add	sp, #116	@ 0x74
 8007f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa2:	2340      	movs	r3, #64	@ 0x40
 8007fa4:	616b      	str	r3, [r5, #20]
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007faa:	2320      	movs	r3, #32
 8007fac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007fb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fb4:	2330      	movs	r3, #48	@ 0x30
 8007fb6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008154 <_svfiprintf_r+0x1e4>
 8007fba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007fbe:	f04f 0901 	mov.w	r9, #1
 8007fc2:	4623      	mov	r3, r4
 8007fc4:	469a      	mov	sl, r3
 8007fc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fca:	b10a      	cbz	r2, 8007fd0 <_svfiprintf_r+0x60>
 8007fcc:	2a25      	cmp	r2, #37	@ 0x25
 8007fce:	d1f9      	bne.n	8007fc4 <_svfiprintf_r+0x54>
 8007fd0:	ebba 0b04 	subs.w	fp, sl, r4
 8007fd4:	d00b      	beq.n	8007fee <_svfiprintf_r+0x7e>
 8007fd6:	465b      	mov	r3, fp
 8007fd8:	4622      	mov	r2, r4
 8007fda:	4629      	mov	r1, r5
 8007fdc:	4638      	mov	r0, r7
 8007fde:	f7ff ff6b 	bl	8007eb8 <__ssputs_r>
 8007fe2:	3001      	adds	r0, #1
 8007fe4:	f000 80a7 	beq.w	8008136 <_svfiprintf_r+0x1c6>
 8007fe8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fea:	445a      	add	r2, fp
 8007fec:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fee:	f89a 3000 	ldrb.w	r3, [sl]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f000 809f 	beq.w	8008136 <_svfiprintf_r+0x1c6>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8007ffe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008002:	f10a 0a01 	add.w	sl, sl, #1
 8008006:	9304      	str	r3, [sp, #16]
 8008008:	9307      	str	r3, [sp, #28]
 800800a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800800e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008010:	4654      	mov	r4, sl
 8008012:	2205      	movs	r2, #5
 8008014:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008018:	484e      	ldr	r0, [pc, #312]	@ (8008154 <_svfiprintf_r+0x1e4>)
 800801a:	f7f8 f8e1 	bl	80001e0 <memchr>
 800801e:	9a04      	ldr	r2, [sp, #16]
 8008020:	b9d8      	cbnz	r0, 800805a <_svfiprintf_r+0xea>
 8008022:	06d0      	lsls	r0, r2, #27
 8008024:	bf44      	itt	mi
 8008026:	2320      	movmi	r3, #32
 8008028:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800802c:	0711      	lsls	r1, r2, #28
 800802e:	bf44      	itt	mi
 8008030:	232b      	movmi	r3, #43	@ 0x2b
 8008032:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008036:	f89a 3000 	ldrb.w	r3, [sl]
 800803a:	2b2a      	cmp	r3, #42	@ 0x2a
 800803c:	d015      	beq.n	800806a <_svfiprintf_r+0xfa>
 800803e:	9a07      	ldr	r2, [sp, #28]
 8008040:	4654      	mov	r4, sl
 8008042:	2000      	movs	r0, #0
 8008044:	f04f 0c0a 	mov.w	ip, #10
 8008048:	4621      	mov	r1, r4
 800804a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800804e:	3b30      	subs	r3, #48	@ 0x30
 8008050:	2b09      	cmp	r3, #9
 8008052:	d94b      	bls.n	80080ec <_svfiprintf_r+0x17c>
 8008054:	b1b0      	cbz	r0, 8008084 <_svfiprintf_r+0x114>
 8008056:	9207      	str	r2, [sp, #28]
 8008058:	e014      	b.n	8008084 <_svfiprintf_r+0x114>
 800805a:	eba0 0308 	sub.w	r3, r0, r8
 800805e:	fa09 f303 	lsl.w	r3, r9, r3
 8008062:	4313      	orrs	r3, r2
 8008064:	9304      	str	r3, [sp, #16]
 8008066:	46a2      	mov	sl, r4
 8008068:	e7d2      	b.n	8008010 <_svfiprintf_r+0xa0>
 800806a:	9b03      	ldr	r3, [sp, #12]
 800806c:	1d19      	adds	r1, r3, #4
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	9103      	str	r1, [sp, #12]
 8008072:	2b00      	cmp	r3, #0
 8008074:	bfbb      	ittet	lt
 8008076:	425b      	neglt	r3, r3
 8008078:	f042 0202 	orrlt.w	r2, r2, #2
 800807c:	9307      	strge	r3, [sp, #28]
 800807e:	9307      	strlt	r3, [sp, #28]
 8008080:	bfb8      	it	lt
 8008082:	9204      	strlt	r2, [sp, #16]
 8008084:	7823      	ldrb	r3, [r4, #0]
 8008086:	2b2e      	cmp	r3, #46	@ 0x2e
 8008088:	d10a      	bne.n	80080a0 <_svfiprintf_r+0x130>
 800808a:	7863      	ldrb	r3, [r4, #1]
 800808c:	2b2a      	cmp	r3, #42	@ 0x2a
 800808e:	d132      	bne.n	80080f6 <_svfiprintf_r+0x186>
 8008090:	9b03      	ldr	r3, [sp, #12]
 8008092:	1d1a      	adds	r2, r3, #4
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	9203      	str	r2, [sp, #12]
 8008098:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800809c:	3402      	adds	r4, #2
 800809e:	9305      	str	r3, [sp, #20]
 80080a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008164 <_svfiprintf_r+0x1f4>
 80080a4:	7821      	ldrb	r1, [r4, #0]
 80080a6:	2203      	movs	r2, #3
 80080a8:	4650      	mov	r0, sl
 80080aa:	f7f8 f899 	bl	80001e0 <memchr>
 80080ae:	b138      	cbz	r0, 80080c0 <_svfiprintf_r+0x150>
 80080b0:	9b04      	ldr	r3, [sp, #16]
 80080b2:	eba0 000a 	sub.w	r0, r0, sl
 80080b6:	2240      	movs	r2, #64	@ 0x40
 80080b8:	4082      	lsls	r2, r0
 80080ba:	4313      	orrs	r3, r2
 80080bc:	3401      	adds	r4, #1
 80080be:	9304      	str	r3, [sp, #16]
 80080c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080c4:	4824      	ldr	r0, [pc, #144]	@ (8008158 <_svfiprintf_r+0x1e8>)
 80080c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80080ca:	2206      	movs	r2, #6
 80080cc:	f7f8 f888 	bl	80001e0 <memchr>
 80080d0:	2800      	cmp	r0, #0
 80080d2:	d036      	beq.n	8008142 <_svfiprintf_r+0x1d2>
 80080d4:	4b21      	ldr	r3, [pc, #132]	@ (800815c <_svfiprintf_r+0x1ec>)
 80080d6:	bb1b      	cbnz	r3, 8008120 <_svfiprintf_r+0x1b0>
 80080d8:	9b03      	ldr	r3, [sp, #12]
 80080da:	3307      	adds	r3, #7
 80080dc:	f023 0307 	bic.w	r3, r3, #7
 80080e0:	3308      	adds	r3, #8
 80080e2:	9303      	str	r3, [sp, #12]
 80080e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080e6:	4433      	add	r3, r6
 80080e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80080ea:	e76a      	b.n	8007fc2 <_svfiprintf_r+0x52>
 80080ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80080f0:	460c      	mov	r4, r1
 80080f2:	2001      	movs	r0, #1
 80080f4:	e7a8      	b.n	8008048 <_svfiprintf_r+0xd8>
 80080f6:	2300      	movs	r3, #0
 80080f8:	3401      	adds	r4, #1
 80080fa:	9305      	str	r3, [sp, #20]
 80080fc:	4619      	mov	r1, r3
 80080fe:	f04f 0c0a 	mov.w	ip, #10
 8008102:	4620      	mov	r0, r4
 8008104:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008108:	3a30      	subs	r2, #48	@ 0x30
 800810a:	2a09      	cmp	r2, #9
 800810c:	d903      	bls.n	8008116 <_svfiprintf_r+0x1a6>
 800810e:	2b00      	cmp	r3, #0
 8008110:	d0c6      	beq.n	80080a0 <_svfiprintf_r+0x130>
 8008112:	9105      	str	r1, [sp, #20]
 8008114:	e7c4      	b.n	80080a0 <_svfiprintf_r+0x130>
 8008116:	fb0c 2101 	mla	r1, ip, r1, r2
 800811a:	4604      	mov	r4, r0
 800811c:	2301      	movs	r3, #1
 800811e:	e7f0      	b.n	8008102 <_svfiprintf_r+0x192>
 8008120:	ab03      	add	r3, sp, #12
 8008122:	9300      	str	r3, [sp, #0]
 8008124:	462a      	mov	r2, r5
 8008126:	4b0e      	ldr	r3, [pc, #56]	@ (8008160 <_svfiprintf_r+0x1f0>)
 8008128:	a904      	add	r1, sp, #16
 800812a:	4638      	mov	r0, r7
 800812c:	f3af 8000 	nop.w
 8008130:	1c42      	adds	r2, r0, #1
 8008132:	4606      	mov	r6, r0
 8008134:	d1d6      	bne.n	80080e4 <_svfiprintf_r+0x174>
 8008136:	89ab      	ldrh	r3, [r5, #12]
 8008138:	065b      	lsls	r3, r3, #25
 800813a:	f53f af2d 	bmi.w	8007f98 <_svfiprintf_r+0x28>
 800813e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008140:	e72c      	b.n	8007f9c <_svfiprintf_r+0x2c>
 8008142:	ab03      	add	r3, sp, #12
 8008144:	9300      	str	r3, [sp, #0]
 8008146:	462a      	mov	r2, r5
 8008148:	4b05      	ldr	r3, [pc, #20]	@ (8008160 <_svfiprintf_r+0x1f0>)
 800814a:	a904      	add	r1, sp, #16
 800814c:	4638      	mov	r0, r7
 800814e:	f000 f9bb 	bl	80084c8 <_printf_i>
 8008152:	e7ed      	b.n	8008130 <_svfiprintf_r+0x1c0>
 8008154:	08008cb8 	.word	0x08008cb8
 8008158:	08008cc2 	.word	0x08008cc2
 800815c:	00000000 	.word	0x00000000
 8008160:	08007eb9 	.word	0x08007eb9
 8008164:	08008cbe 	.word	0x08008cbe

08008168 <__sfputc_r>:
 8008168:	6893      	ldr	r3, [r2, #8]
 800816a:	3b01      	subs	r3, #1
 800816c:	2b00      	cmp	r3, #0
 800816e:	b410      	push	{r4}
 8008170:	6093      	str	r3, [r2, #8]
 8008172:	da08      	bge.n	8008186 <__sfputc_r+0x1e>
 8008174:	6994      	ldr	r4, [r2, #24]
 8008176:	42a3      	cmp	r3, r4
 8008178:	db01      	blt.n	800817e <__sfputc_r+0x16>
 800817a:	290a      	cmp	r1, #10
 800817c:	d103      	bne.n	8008186 <__sfputc_r+0x1e>
 800817e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008182:	f7ff bc88 	b.w	8007a96 <__swbuf_r>
 8008186:	6813      	ldr	r3, [r2, #0]
 8008188:	1c58      	adds	r0, r3, #1
 800818a:	6010      	str	r0, [r2, #0]
 800818c:	7019      	strb	r1, [r3, #0]
 800818e:	4608      	mov	r0, r1
 8008190:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008194:	4770      	bx	lr

08008196 <__sfputs_r>:
 8008196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008198:	4606      	mov	r6, r0
 800819a:	460f      	mov	r7, r1
 800819c:	4614      	mov	r4, r2
 800819e:	18d5      	adds	r5, r2, r3
 80081a0:	42ac      	cmp	r4, r5
 80081a2:	d101      	bne.n	80081a8 <__sfputs_r+0x12>
 80081a4:	2000      	movs	r0, #0
 80081a6:	e007      	b.n	80081b8 <__sfputs_r+0x22>
 80081a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081ac:	463a      	mov	r2, r7
 80081ae:	4630      	mov	r0, r6
 80081b0:	f7ff ffda 	bl	8008168 <__sfputc_r>
 80081b4:	1c43      	adds	r3, r0, #1
 80081b6:	d1f3      	bne.n	80081a0 <__sfputs_r+0xa>
 80081b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081bc <_vfiprintf_r>:
 80081bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c0:	460d      	mov	r5, r1
 80081c2:	b09d      	sub	sp, #116	@ 0x74
 80081c4:	4614      	mov	r4, r2
 80081c6:	4698      	mov	r8, r3
 80081c8:	4606      	mov	r6, r0
 80081ca:	b118      	cbz	r0, 80081d4 <_vfiprintf_r+0x18>
 80081cc:	6a03      	ldr	r3, [r0, #32]
 80081ce:	b90b      	cbnz	r3, 80081d4 <_vfiprintf_r+0x18>
 80081d0:	f7ff fb58 	bl	8007884 <__sinit>
 80081d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081d6:	07d9      	lsls	r1, r3, #31
 80081d8:	d405      	bmi.n	80081e6 <_vfiprintf_r+0x2a>
 80081da:	89ab      	ldrh	r3, [r5, #12]
 80081dc:	059a      	lsls	r2, r3, #22
 80081de:	d402      	bmi.n	80081e6 <_vfiprintf_r+0x2a>
 80081e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081e2:	f7ff fd66 	bl	8007cb2 <__retarget_lock_acquire_recursive>
 80081e6:	89ab      	ldrh	r3, [r5, #12]
 80081e8:	071b      	lsls	r3, r3, #28
 80081ea:	d501      	bpl.n	80081f0 <_vfiprintf_r+0x34>
 80081ec:	692b      	ldr	r3, [r5, #16]
 80081ee:	b99b      	cbnz	r3, 8008218 <_vfiprintf_r+0x5c>
 80081f0:	4629      	mov	r1, r5
 80081f2:	4630      	mov	r0, r6
 80081f4:	f7ff fc8e 	bl	8007b14 <__swsetup_r>
 80081f8:	b170      	cbz	r0, 8008218 <_vfiprintf_r+0x5c>
 80081fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081fc:	07dc      	lsls	r4, r3, #31
 80081fe:	d504      	bpl.n	800820a <_vfiprintf_r+0x4e>
 8008200:	f04f 30ff 	mov.w	r0, #4294967295
 8008204:	b01d      	add	sp, #116	@ 0x74
 8008206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800820a:	89ab      	ldrh	r3, [r5, #12]
 800820c:	0598      	lsls	r0, r3, #22
 800820e:	d4f7      	bmi.n	8008200 <_vfiprintf_r+0x44>
 8008210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008212:	f7ff fd4f 	bl	8007cb4 <__retarget_lock_release_recursive>
 8008216:	e7f3      	b.n	8008200 <_vfiprintf_r+0x44>
 8008218:	2300      	movs	r3, #0
 800821a:	9309      	str	r3, [sp, #36]	@ 0x24
 800821c:	2320      	movs	r3, #32
 800821e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008222:	f8cd 800c 	str.w	r8, [sp, #12]
 8008226:	2330      	movs	r3, #48	@ 0x30
 8008228:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80083d8 <_vfiprintf_r+0x21c>
 800822c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008230:	f04f 0901 	mov.w	r9, #1
 8008234:	4623      	mov	r3, r4
 8008236:	469a      	mov	sl, r3
 8008238:	f813 2b01 	ldrb.w	r2, [r3], #1
 800823c:	b10a      	cbz	r2, 8008242 <_vfiprintf_r+0x86>
 800823e:	2a25      	cmp	r2, #37	@ 0x25
 8008240:	d1f9      	bne.n	8008236 <_vfiprintf_r+0x7a>
 8008242:	ebba 0b04 	subs.w	fp, sl, r4
 8008246:	d00b      	beq.n	8008260 <_vfiprintf_r+0xa4>
 8008248:	465b      	mov	r3, fp
 800824a:	4622      	mov	r2, r4
 800824c:	4629      	mov	r1, r5
 800824e:	4630      	mov	r0, r6
 8008250:	f7ff ffa1 	bl	8008196 <__sfputs_r>
 8008254:	3001      	adds	r0, #1
 8008256:	f000 80a7 	beq.w	80083a8 <_vfiprintf_r+0x1ec>
 800825a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800825c:	445a      	add	r2, fp
 800825e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008260:	f89a 3000 	ldrb.w	r3, [sl]
 8008264:	2b00      	cmp	r3, #0
 8008266:	f000 809f 	beq.w	80083a8 <_vfiprintf_r+0x1ec>
 800826a:	2300      	movs	r3, #0
 800826c:	f04f 32ff 	mov.w	r2, #4294967295
 8008270:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008274:	f10a 0a01 	add.w	sl, sl, #1
 8008278:	9304      	str	r3, [sp, #16]
 800827a:	9307      	str	r3, [sp, #28]
 800827c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008280:	931a      	str	r3, [sp, #104]	@ 0x68
 8008282:	4654      	mov	r4, sl
 8008284:	2205      	movs	r2, #5
 8008286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800828a:	4853      	ldr	r0, [pc, #332]	@ (80083d8 <_vfiprintf_r+0x21c>)
 800828c:	f7f7 ffa8 	bl	80001e0 <memchr>
 8008290:	9a04      	ldr	r2, [sp, #16]
 8008292:	b9d8      	cbnz	r0, 80082cc <_vfiprintf_r+0x110>
 8008294:	06d1      	lsls	r1, r2, #27
 8008296:	bf44      	itt	mi
 8008298:	2320      	movmi	r3, #32
 800829a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800829e:	0713      	lsls	r3, r2, #28
 80082a0:	bf44      	itt	mi
 80082a2:	232b      	movmi	r3, #43	@ 0x2b
 80082a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082a8:	f89a 3000 	ldrb.w	r3, [sl]
 80082ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80082ae:	d015      	beq.n	80082dc <_vfiprintf_r+0x120>
 80082b0:	9a07      	ldr	r2, [sp, #28]
 80082b2:	4654      	mov	r4, sl
 80082b4:	2000      	movs	r0, #0
 80082b6:	f04f 0c0a 	mov.w	ip, #10
 80082ba:	4621      	mov	r1, r4
 80082bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082c0:	3b30      	subs	r3, #48	@ 0x30
 80082c2:	2b09      	cmp	r3, #9
 80082c4:	d94b      	bls.n	800835e <_vfiprintf_r+0x1a2>
 80082c6:	b1b0      	cbz	r0, 80082f6 <_vfiprintf_r+0x13a>
 80082c8:	9207      	str	r2, [sp, #28]
 80082ca:	e014      	b.n	80082f6 <_vfiprintf_r+0x13a>
 80082cc:	eba0 0308 	sub.w	r3, r0, r8
 80082d0:	fa09 f303 	lsl.w	r3, r9, r3
 80082d4:	4313      	orrs	r3, r2
 80082d6:	9304      	str	r3, [sp, #16]
 80082d8:	46a2      	mov	sl, r4
 80082da:	e7d2      	b.n	8008282 <_vfiprintf_r+0xc6>
 80082dc:	9b03      	ldr	r3, [sp, #12]
 80082de:	1d19      	adds	r1, r3, #4
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	9103      	str	r1, [sp, #12]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	bfbb      	ittet	lt
 80082e8:	425b      	neglt	r3, r3
 80082ea:	f042 0202 	orrlt.w	r2, r2, #2
 80082ee:	9307      	strge	r3, [sp, #28]
 80082f0:	9307      	strlt	r3, [sp, #28]
 80082f2:	bfb8      	it	lt
 80082f4:	9204      	strlt	r2, [sp, #16]
 80082f6:	7823      	ldrb	r3, [r4, #0]
 80082f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80082fa:	d10a      	bne.n	8008312 <_vfiprintf_r+0x156>
 80082fc:	7863      	ldrb	r3, [r4, #1]
 80082fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008300:	d132      	bne.n	8008368 <_vfiprintf_r+0x1ac>
 8008302:	9b03      	ldr	r3, [sp, #12]
 8008304:	1d1a      	adds	r2, r3, #4
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	9203      	str	r2, [sp, #12]
 800830a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800830e:	3402      	adds	r4, #2
 8008310:	9305      	str	r3, [sp, #20]
 8008312:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80083e8 <_vfiprintf_r+0x22c>
 8008316:	7821      	ldrb	r1, [r4, #0]
 8008318:	2203      	movs	r2, #3
 800831a:	4650      	mov	r0, sl
 800831c:	f7f7 ff60 	bl	80001e0 <memchr>
 8008320:	b138      	cbz	r0, 8008332 <_vfiprintf_r+0x176>
 8008322:	9b04      	ldr	r3, [sp, #16]
 8008324:	eba0 000a 	sub.w	r0, r0, sl
 8008328:	2240      	movs	r2, #64	@ 0x40
 800832a:	4082      	lsls	r2, r0
 800832c:	4313      	orrs	r3, r2
 800832e:	3401      	adds	r4, #1
 8008330:	9304      	str	r3, [sp, #16]
 8008332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008336:	4829      	ldr	r0, [pc, #164]	@ (80083dc <_vfiprintf_r+0x220>)
 8008338:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800833c:	2206      	movs	r2, #6
 800833e:	f7f7 ff4f 	bl	80001e0 <memchr>
 8008342:	2800      	cmp	r0, #0
 8008344:	d03f      	beq.n	80083c6 <_vfiprintf_r+0x20a>
 8008346:	4b26      	ldr	r3, [pc, #152]	@ (80083e0 <_vfiprintf_r+0x224>)
 8008348:	bb1b      	cbnz	r3, 8008392 <_vfiprintf_r+0x1d6>
 800834a:	9b03      	ldr	r3, [sp, #12]
 800834c:	3307      	adds	r3, #7
 800834e:	f023 0307 	bic.w	r3, r3, #7
 8008352:	3308      	adds	r3, #8
 8008354:	9303      	str	r3, [sp, #12]
 8008356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008358:	443b      	add	r3, r7
 800835a:	9309      	str	r3, [sp, #36]	@ 0x24
 800835c:	e76a      	b.n	8008234 <_vfiprintf_r+0x78>
 800835e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008362:	460c      	mov	r4, r1
 8008364:	2001      	movs	r0, #1
 8008366:	e7a8      	b.n	80082ba <_vfiprintf_r+0xfe>
 8008368:	2300      	movs	r3, #0
 800836a:	3401      	adds	r4, #1
 800836c:	9305      	str	r3, [sp, #20]
 800836e:	4619      	mov	r1, r3
 8008370:	f04f 0c0a 	mov.w	ip, #10
 8008374:	4620      	mov	r0, r4
 8008376:	f810 2b01 	ldrb.w	r2, [r0], #1
 800837a:	3a30      	subs	r2, #48	@ 0x30
 800837c:	2a09      	cmp	r2, #9
 800837e:	d903      	bls.n	8008388 <_vfiprintf_r+0x1cc>
 8008380:	2b00      	cmp	r3, #0
 8008382:	d0c6      	beq.n	8008312 <_vfiprintf_r+0x156>
 8008384:	9105      	str	r1, [sp, #20]
 8008386:	e7c4      	b.n	8008312 <_vfiprintf_r+0x156>
 8008388:	fb0c 2101 	mla	r1, ip, r1, r2
 800838c:	4604      	mov	r4, r0
 800838e:	2301      	movs	r3, #1
 8008390:	e7f0      	b.n	8008374 <_vfiprintf_r+0x1b8>
 8008392:	ab03      	add	r3, sp, #12
 8008394:	9300      	str	r3, [sp, #0]
 8008396:	462a      	mov	r2, r5
 8008398:	4b12      	ldr	r3, [pc, #72]	@ (80083e4 <_vfiprintf_r+0x228>)
 800839a:	a904      	add	r1, sp, #16
 800839c:	4630      	mov	r0, r6
 800839e:	f3af 8000 	nop.w
 80083a2:	4607      	mov	r7, r0
 80083a4:	1c78      	adds	r0, r7, #1
 80083a6:	d1d6      	bne.n	8008356 <_vfiprintf_r+0x19a>
 80083a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083aa:	07d9      	lsls	r1, r3, #31
 80083ac:	d405      	bmi.n	80083ba <_vfiprintf_r+0x1fe>
 80083ae:	89ab      	ldrh	r3, [r5, #12]
 80083b0:	059a      	lsls	r2, r3, #22
 80083b2:	d402      	bmi.n	80083ba <_vfiprintf_r+0x1fe>
 80083b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083b6:	f7ff fc7d 	bl	8007cb4 <__retarget_lock_release_recursive>
 80083ba:	89ab      	ldrh	r3, [r5, #12]
 80083bc:	065b      	lsls	r3, r3, #25
 80083be:	f53f af1f 	bmi.w	8008200 <_vfiprintf_r+0x44>
 80083c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083c4:	e71e      	b.n	8008204 <_vfiprintf_r+0x48>
 80083c6:	ab03      	add	r3, sp, #12
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	462a      	mov	r2, r5
 80083cc:	4b05      	ldr	r3, [pc, #20]	@ (80083e4 <_vfiprintf_r+0x228>)
 80083ce:	a904      	add	r1, sp, #16
 80083d0:	4630      	mov	r0, r6
 80083d2:	f000 f879 	bl	80084c8 <_printf_i>
 80083d6:	e7e4      	b.n	80083a2 <_vfiprintf_r+0x1e6>
 80083d8:	08008cb8 	.word	0x08008cb8
 80083dc:	08008cc2 	.word	0x08008cc2
 80083e0:	00000000 	.word	0x00000000
 80083e4:	08008197 	.word	0x08008197
 80083e8:	08008cbe 	.word	0x08008cbe

080083ec <_printf_common>:
 80083ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f0:	4616      	mov	r6, r2
 80083f2:	4698      	mov	r8, r3
 80083f4:	688a      	ldr	r2, [r1, #8]
 80083f6:	690b      	ldr	r3, [r1, #16]
 80083f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80083fc:	4293      	cmp	r3, r2
 80083fe:	bfb8      	it	lt
 8008400:	4613      	movlt	r3, r2
 8008402:	6033      	str	r3, [r6, #0]
 8008404:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008408:	4607      	mov	r7, r0
 800840a:	460c      	mov	r4, r1
 800840c:	b10a      	cbz	r2, 8008412 <_printf_common+0x26>
 800840e:	3301      	adds	r3, #1
 8008410:	6033      	str	r3, [r6, #0]
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	0699      	lsls	r1, r3, #26
 8008416:	bf42      	ittt	mi
 8008418:	6833      	ldrmi	r3, [r6, #0]
 800841a:	3302      	addmi	r3, #2
 800841c:	6033      	strmi	r3, [r6, #0]
 800841e:	6825      	ldr	r5, [r4, #0]
 8008420:	f015 0506 	ands.w	r5, r5, #6
 8008424:	d106      	bne.n	8008434 <_printf_common+0x48>
 8008426:	f104 0a19 	add.w	sl, r4, #25
 800842a:	68e3      	ldr	r3, [r4, #12]
 800842c:	6832      	ldr	r2, [r6, #0]
 800842e:	1a9b      	subs	r3, r3, r2
 8008430:	42ab      	cmp	r3, r5
 8008432:	dc26      	bgt.n	8008482 <_printf_common+0x96>
 8008434:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008438:	6822      	ldr	r2, [r4, #0]
 800843a:	3b00      	subs	r3, #0
 800843c:	bf18      	it	ne
 800843e:	2301      	movne	r3, #1
 8008440:	0692      	lsls	r2, r2, #26
 8008442:	d42b      	bmi.n	800849c <_printf_common+0xb0>
 8008444:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008448:	4641      	mov	r1, r8
 800844a:	4638      	mov	r0, r7
 800844c:	47c8      	blx	r9
 800844e:	3001      	adds	r0, #1
 8008450:	d01e      	beq.n	8008490 <_printf_common+0xa4>
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	6922      	ldr	r2, [r4, #16]
 8008456:	f003 0306 	and.w	r3, r3, #6
 800845a:	2b04      	cmp	r3, #4
 800845c:	bf02      	ittt	eq
 800845e:	68e5      	ldreq	r5, [r4, #12]
 8008460:	6833      	ldreq	r3, [r6, #0]
 8008462:	1aed      	subeq	r5, r5, r3
 8008464:	68a3      	ldr	r3, [r4, #8]
 8008466:	bf0c      	ite	eq
 8008468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800846c:	2500      	movne	r5, #0
 800846e:	4293      	cmp	r3, r2
 8008470:	bfc4      	itt	gt
 8008472:	1a9b      	subgt	r3, r3, r2
 8008474:	18ed      	addgt	r5, r5, r3
 8008476:	2600      	movs	r6, #0
 8008478:	341a      	adds	r4, #26
 800847a:	42b5      	cmp	r5, r6
 800847c:	d11a      	bne.n	80084b4 <_printf_common+0xc8>
 800847e:	2000      	movs	r0, #0
 8008480:	e008      	b.n	8008494 <_printf_common+0xa8>
 8008482:	2301      	movs	r3, #1
 8008484:	4652      	mov	r2, sl
 8008486:	4641      	mov	r1, r8
 8008488:	4638      	mov	r0, r7
 800848a:	47c8      	blx	r9
 800848c:	3001      	adds	r0, #1
 800848e:	d103      	bne.n	8008498 <_printf_common+0xac>
 8008490:	f04f 30ff 	mov.w	r0, #4294967295
 8008494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008498:	3501      	adds	r5, #1
 800849a:	e7c6      	b.n	800842a <_printf_common+0x3e>
 800849c:	18e1      	adds	r1, r4, r3
 800849e:	1c5a      	adds	r2, r3, #1
 80084a0:	2030      	movs	r0, #48	@ 0x30
 80084a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80084a6:	4422      	add	r2, r4
 80084a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80084ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80084b0:	3302      	adds	r3, #2
 80084b2:	e7c7      	b.n	8008444 <_printf_common+0x58>
 80084b4:	2301      	movs	r3, #1
 80084b6:	4622      	mov	r2, r4
 80084b8:	4641      	mov	r1, r8
 80084ba:	4638      	mov	r0, r7
 80084bc:	47c8      	blx	r9
 80084be:	3001      	adds	r0, #1
 80084c0:	d0e6      	beq.n	8008490 <_printf_common+0xa4>
 80084c2:	3601      	adds	r6, #1
 80084c4:	e7d9      	b.n	800847a <_printf_common+0x8e>
	...

080084c8 <_printf_i>:
 80084c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084cc:	7e0f      	ldrb	r7, [r1, #24]
 80084ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80084d0:	2f78      	cmp	r7, #120	@ 0x78
 80084d2:	4691      	mov	r9, r2
 80084d4:	4680      	mov	r8, r0
 80084d6:	460c      	mov	r4, r1
 80084d8:	469a      	mov	sl, r3
 80084da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80084de:	d807      	bhi.n	80084f0 <_printf_i+0x28>
 80084e0:	2f62      	cmp	r7, #98	@ 0x62
 80084e2:	d80a      	bhi.n	80084fa <_printf_i+0x32>
 80084e4:	2f00      	cmp	r7, #0
 80084e6:	f000 80d2 	beq.w	800868e <_printf_i+0x1c6>
 80084ea:	2f58      	cmp	r7, #88	@ 0x58
 80084ec:	f000 80b9 	beq.w	8008662 <_printf_i+0x19a>
 80084f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80084f8:	e03a      	b.n	8008570 <_printf_i+0xa8>
 80084fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80084fe:	2b15      	cmp	r3, #21
 8008500:	d8f6      	bhi.n	80084f0 <_printf_i+0x28>
 8008502:	a101      	add	r1, pc, #4	@ (adr r1, 8008508 <_printf_i+0x40>)
 8008504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008508:	08008561 	.word	0x08008561
 800850c:	08008575 	.word	0x08008575
 8008510:	080084f1 	.word	0x080084f1
 8008514:	080084f1 	.word	0x080084f1
 8008518:	080084f1 	.word	0x080084f1
 800851c:	080084f1 	.word	0x080084f1
 8008520:	08008575 	.word	0x08008575
 8008524:	080084f1 	.word	0x080084f1
 8008528:	080084f1 	.word	0x080084f1
 800852c:	080084f1 	.word	0x080084f1
 8008530:	080084f1 	.word	0x080084f1
 8008534:	08008675 	.word	0x08008675
 8008538:	0800859f 	.word	0x0800859f
 800853c:	0800862f 	.word	0x0800862f
 8008540:	080084f1 	.word	0x080084f1
 8008544:	080084f1 	.word	0x080084f1
 8008548:	08008697 	.word	0x08008697
 800854c:	080084f1 	.word	0x080084f1
 8008550:	0800859f 	.word	0x0800859f
 8008554:	080084f1 	.word	0x080084f1
 8008558:	080084f1 	.word	0x080084f1
 800855c:	08008637 	.word	0x08008637
 8008560:	6833      	ldr	r3, [r6, #0]
 8008562:	1d1a      	adds	r2, r3, #4
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	6032      	str	r2, [r6, #0]
 8008568:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800856c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008570:	2301      	movs	r3, #1
 8008572:	e09d      	b.n	80086b0 <_printf_i+0x1e8>
 8008574:	6833      	ldr	r3, [r6, #0]
 8008576:	6820      	ldr	r0, [r4, #0]
 8008578:	1d19      	adds	r1, r3, #4
 800857a:	6031      	str	r1, [r6, #0]
 800857c:	0606      	lsls	r6, r0, #24
 800857e:	d501      	bpl.n	8008584 <_printf_i+0xbc>
 8008580:	681d      	ldr	r5, [r3, #0]
 8008582:	e003      	b.n	800858c <_printf_i+0xc4>
 8008584:	0645      	lsls	r5, r0, #25
 8008586:	d5fb      	bpl.n	8008580 <_printf_i+0xb8>
 8008588:	f9b3 5000 	ldrsh.w	r5, [r3]
 800858c:	2d00      	cmp	r5, #0
 800858e:	da03      	bge.n	8008598 <_printf_i+0xd0>
 8008590:	232d      	movs	r3, #45	@ 0x2d
 8008592:	426d      	negs	r5, r5
 8008594:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008598:	4859      	ldr	r0, [pc, #356]	@ (8008700 <_printf_i+0x238>)
 800859a:	230a      	movs	r3, #10
 800859c:	e011      	b.n	80085c2 <_printf_i+0xfa>
 800859e:	6821      	ldr	r1, [r4, #0]
 80085a0:	6833      	ldr	r3, [r6, #0]
 80085a2:	0608      	lsls	r0, r1, #24
 80085a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80085a8:	d402      	bmi.n	80085b0 <_printf_i+0xe8>
 80085aa:	0649      	lsls	r1, r1, #25
 80085ac:	bf48      	it	mi
 80085ae:	b2ad      	uxthmi	r5, r5
 80085b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80085b2:	4853      	ldr	r0, [pc, #332]	@ (8008700 <_printf_i+0x238>)
 80085b4:	6033      	str	r3, [r6, #0]
 80085b6:	bf14      	ite	ne
 80085b8:	230a      	movne	r3, #10
 80085ba:	2308      	moveq	r3, #8
 80085bc:	2100      	movs	r1, #0
 80085be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80085c2:	6866      	ldr	r6, [r4, #4]
 80085c4:	60a6      	str	r6, [r4, #8]
 80085c6:	2e00      	cmp	r6, #0
 80085c8:	bfa2      	ittt	ge
 80085ca:	6821      	ldrge	r1, [r4, #0]
 80085cc:	f021 0104 	bicge.w	r1, r1, #4
 80085d0:	6021      	strge	r1, [r4, #0]
 80085d2:	b90d      	cbnz	r5, 80085d8 <_printf_i+0x110>
 80085d4:	2e00      	cmp	r6, #0
 80085d6:	d04b      	beq.n	8008670 <_printf_i+0x1a8>
 80085d8:	4616      	mov	r6, r2
 80085da:	fbb5 f1f3 	udiv	r1, r5, r3
 80085de:	fb03 5711 	mls	r7, r3, r1, r5
 80085e2:	5dc7      	ldrb	r7, [r0, r7]
 80085e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80085e8:	462f      	mov	r7, r5
 80085ea:	42bb      	cmp	r3, r7
 80085ec:	460d      	mov	r5, r1
 80085ee:	d9f4      	bls.n	80085da <_printf_i+0x112>
 80085f0:	2b08      	cmp	r3, #8
 80085f2:	d10b      	bne.n	800860c <_printf_i+0x144>
 80085f4:	6823      	ldr	r3, [r4, #0]
 80085f6:	07df      	lsls	r7, r3, #31
 80085f8:	d508      	bpl.n	800860c <_printf_i+0x144>
 80085fa:	6923      	ldr	r3, [r4, #16]
 80085fc:	6861      	ldr	r1, [r4, #4]
 80085fe:	4299      	cmp	r1, r3
 8008600:	bfde      	ittt	le
 8008602:	2330      	movle	r3, #48	@ 0x30
 8008604:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008608:	f106 36ff 	addle.w	r6, r6, #4294967295
 800860c:	1b92      	subs	r2, r2, r6
 800860e:	6122      	str	r2, [r4, #16]
 8008610:	f8cd a000 	str.w	sl, [sp]
 8008614:	464b      	mov	r3, r9
 8008616:	aa03      	add	r2, sp, #12
 8008618:	4621      	mov	r1, r4
 800861a:	4640      	mov	r0, r8
 800861c:	f7ff fee6 	bl	80083ec <_printf_common>
 8008620:	3001      	adds	r0, #1
 8008622:	d14a      	bne.n	80086ba <_printf_i+0x1f2>
 8008624:	f04f 30ff 	mov.w	r0, #4294967295
 8008628:	b004      	add	sp, #16
 800862a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800862e:	6823      	ldr	r3, [r4, #0]
 8008630:	f043 0320 	orr.w	r3, r3, #32
 8008634:	6023      	str	r3, [r4, #0]
 8008636:	4833      	ldr	r0, [pc, #204]	@ (8008704 <_printf_i+0x23c>)
 8008638:	2778      	movs	r7, #120	@ 0x78
 800863a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800863e:	6823      	ldr	r3, [r4, #0]
 8008640:	6831      	ldr	r1, [r6, #0]
 8008642:	061f      	lsls	r7, r3, #24
 8008644:	f851 5b04 	ldr.w	r5, [r1], #4
 8008648:	d402      	bmi.n	8008650 <_printf_i+0x188>
 800864a:	065f      	lsls	r7, r3, #25
 800864c:	bf48      	it	mi
 800864e:	b2ad      	uxthmi	r5, r5
 8008650:	6031      	str	r1, [r6, #0]
 8008652:	07d9      	lsls	r1, r3, #31
 8008654:	bf44      	itt	mi
 8008656:	f043 0320 	orrmi.w	r3, r3, #32
 800865a:	6023      	strmi	r3, [r4, #0]
 800865c:	b11d      	cbz	r5, 8008666 <_printf_i+0x19e>
 800865e:	2310      	movs	r3, #16
 8008660:	e7ac      	b.n	80085bc <_printf_i+0xf4>
 8008662:	4827      	ldr	r0, [pc, #156]	@ (8008700 <_printf_i+0x238>)
 8008664:	e7e9      	b.n	800863a <_printf_i+0x172>
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	f023 0320 	bic.w	r3, r3, #32
 800866c:	6023      	str	r3, [r4, #0]
 800866e:	e7f6      	b.n	800865e <_printf_i+0x196>
 8008670:	4616      	mov	r6, r2
 8008672:	e7bd      	b.n	80085f0 <_printf_i+0x128>
 8008674:	6833      	ldr	r3, [r6, #0]
 8008676:	6825      	ldr	r5, [r4, #0]
 8008678:	6961      	ldr	r1, [r4, #20]
 800867a:	1d18      	adds	r0, r3, #4
 800867c:	6030      	str	r0, [r6, #0]
 800867e:	062e      	lsls	r6, r5, #24
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	d501      	bpl.n	8008688 <_printf_i+0x1c0>
 8008684:	6019      	str	r1, [r3, #0]
 8008686:	e002      	b.n	800868e <_printf_i+0x1c6>
 8008688:	0668      	lsls	r0, r5, #25
 800868a:	d5fb      	bpl.n	8008684 <_printf_i+0x1bc>
 800868c:	8019      	strh	r1, [r3, #0]
 800868e:	2300      	movs	r3, #0
 8008690:	6123      	str	r3, [r4, #16]
 8008692:	4616      	mov	r6, r2
 8008694:	e7bc      	b.n	8008610 <_printf_i+0x148>
 8008696:	6833      	ldr	r3, [r6, #0]
 8008698:	1d1a      	adds	r2, r3, #4
 800869a:	6032      	str	r2, [r6, #0]
 800869c:	681e      	ldr	r6, [r3, #0]
 800869e:	6862      	ldr	r2, [r4, #4]
 80086a0:	2100      	movs	r1, #0
 80086a2:	4630      	mov	r0, r6
 80086a4:	f7f7 fd9c 	bl	80001e0 <memchr>
 80086a8:	b108      	cbz	r0, 80086ae <_printf_i+0x1e6>
 80086aa:	1b80      	subs	r0, r0, r6
 80086ac:	6060      	str	r0, [r4, #4]
 80086ae:	6863      	ldr	r3, [r4, #4]
 80086b0:	6123      	str	r3, [r4, #16]
 80086b2:	2300      	movs	r3, #0
 80086b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086b8:	e7aa      	b.n	8008610 <_printf_i+0x148>
 80086ba:	6923      	ldr	r3, [r4, #16]
 80086bc:	4632      	mov	r2, r6
 80086be:	4649      	mov	r1, r9
 80086c0:	4640      	mov	r0, r8
 80086c2:	47d0      	blx	sl
 80086c4:	3001      	adds	r0, #1
 80086c6:	d0ad      	beq.n	8008624 <_printf_i+0x15c>
 80086c8:	6823      	ldr	r3, [r4, #0]
 80086ca:	079b      	lsls	r3, r3, #30
 80086cc:	d413      	bmi.n	80086f6 <_printf_i+0x22e>
 80086ce:	68e0      	ldr	r0, [r4, #12]
 80086d0:	9b03      	ldr	r3, [sp, #12]
 80086d2:	4298      	cmp	r0, r3
 80086d4:	bfb8      	it	lt
 80086d6:	4618      	movlt	r0, r3
 80086d8:	e7a6      	b.n	8008628 <_printf_i+0x160>
 80086da:	2301      	movs	r3, #1
 80086dc:	4632      	mov	r2, r6
 80086de:	4649      	mov	r1, r9
 80086e0:	4640      	mov	r0, r8
 80086e2:	47d0      	blx	sl
 80086e4:	3001      	adds	r0, #1
 80086e6:	d09d      	beq.n	8008624 <_printf_i+0x15c>
 80086e8:	3501      	adds	r5, #1
 80086ea:	68e3      	ldr	r3, [r4, #12]
 80086ec:	9903      	ldr	r1, [sp, #12]
 80086ee:	1a5b      	subs	r3, r3, r1
 80086f0:	42ab      	cmp	r3, r5
 80086f2:	dcf2      	bgt.n	80086da <_printf_i+0x212>
 80086f4:	e7eb      	b.n	80086ce <_printf_i+0x206>
 80086f6:	2500      	movs	r5, #0
 80086f8:	f104 0619 	add.w	r6, r4, #25
 80086fc:	e7f5      	b.n	80086ea <_printf_i+0x222>
 80086fe:	bf00      	nop
 8008700:	08008cc9 	.word	0x08008cc9
 8008704:	08008cda 	.word	0x08008cda

08008708 <__sflush_r>:
 8008708:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800870c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008710:	0716      	lsls	r6, r2, #28
 8008712:	4605      	mov	r5, r0
 8008714:	460c      	mov	r4, r1
 8008716:	d454      	bmi.n	80087c2 <__sflush_r+0xba>
 8008718:	684b      	ldr	r3, [r1, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	dc02      	bgt.n	8008724 <__sflush_r+0x1c>
 800871e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008720:	2b00      	cmp	r3, #0
 8008722:	dd48      	ble.n	80087b6 <__sflush_r+0xae>
 8008724:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008726:	2e00      	cmp	r6, #0
 8008728:	d045      	beq.n	80087b6 <__sflush_r+0xae>
 800872a:	2300      	movs	r3, #0
 800872c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008730:	682f      	ldr	r7, [r5, #0]
 8008732:	6a21      	ldr	r1, [r4, #32]
 8008734:	602b      	str	r3, [r5, #0]
 8008736:	d030      	beq.n	800879a <__sflush_r+0x92>
 8008738:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800873a:	89a3      	ldrh	r3, [r4, #12]
 800873c:	0759      	lsls	r1, r3, #29
 800873e:	d505      	bpl.n	800874c <__sflush_r+0x44>
 8008740:	6863      	ldr	r3, [r4, #4]
 8008742:	1ad2      	subs	r2, r2, r3
 8008744:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008746:	b10b      	cbz	r3, 800874c <__sflush_r+0x44>
 8008748:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800874a:	1ad2      	subs	r2, r2, r3
 800874c:	2300      	movs	r3, #0
 800874e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008750:	6a21      	ldr	r1, [r4, #32]
 8008752:	4628      	mov	r0, r5
 8008754:	47b0      	blx	r6
 8008756:	1c43      	adds	r3, r0, #1
 8008758:	89a3      	ldrh	r3, [r4, #12]
 800875a:	d106      	bne.n	800876a <__sflush_r+0x62>
 800875c:	6829      	ldr	r1, [r5, #0]
 800875e:	291d      	cmp	r1, #29
 8008760:	d82b      	bhi.n	80087ba <__sflush_r+0xb2>
 8008762:	4a2a      	ldr	r2, [pc, #168]	@ (800880c <__sflush_r+0x104>)
 8008764:	410a      	asrs	r2, r1
 8008766:	07d6      	lsls	r6, r2, #31
 8008768:	d427      	bmi.n	80087ba <__sflush_r+0xb2>
 800876a:	2200      	movs	r2, #0
 800876c:	6062      	str	r2, [r4, #4]
 800876e:	04d9      	lsls	r1, r3, #19
 8008770:	6922      	ldr	r2, [r4, #16]
 8008772:	6022      	str	r2, [r4, #0]
 8008774:	d504      	bpl.n	8008780 <__sflush_r+0x78>
 8008776:	1c42      	adds	r2, r0, #1
 8008778:	d101      	bne.n	800877e <__sflush_r+0x76>
 800877a:	682b      	ldr	r3, [r5, #0]
 800877c:	b903      	cbnz	r3, 8008780 <__sflush_r+0x78>
 800877e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008780:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008782:	602f      	str	r7, [r5, #0]
 8008784:	b1b9      	cbz	r1, 80087b6 <__sflush_r+0xae>
 8008786:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800878a:	4299      	cmp	r1, r3
 800878c:	d002      	beq.n	8008794 <__sflush_r+0x8c>
 800878e:	4628      	mov	r0, r5
 8008790:	f7ff fa9a 	bl	8007cc8 <_free_r>
 8008794:	2300      	movs	r3, #0
 8008796:	6363      	str	r3, [r4, #52]	@ 0x34
 8008798:	e00d      	b.n	80087b6 <__sflush_r+0xae>
 800879a:	2301      	movs	r3, #1
 800879c:	4628      	mov	r0, r5
 800879e:	47b0      	blx	r6
 80087a0:	4602      	mov	r2, r0
 80087a2:	1c50      	adds	r0, r2, #1
 80087a4:	d1c9      	bne.n	800873a <__sflush_r+0x32>
 80087a6:	682b      	ldr	r3, [r5, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d0c6      	beq.n	800873a <__sflush_r+0x32>
 80087ac:	2b1d      	cmp	r3, #29
 80087ae:	d001      	beq.n	80087b4 <__sflush_r+0xac>
 80087b0:	2b16      	cmp	r3, #22
 80087b2:	d11e      	bne.n	80087f2 <__sflush_r+0xea>
 80087b4:	602f      	str	r7, [r5, #0]
 80087b6:	2000      	movs	r0, #0
 80087b8:	e022      	b.n	8008800 <__sflush_r+0xf8>
 80087ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087be:	b21b      	sxth	r3, r3
 80087c0:	e01b      	b.n	80087fa <__sflush_r+0xf2>
 80087c2:	690f      	ldr	r7, [r1, #16]
 80087c4:	2f00      	cmp	r7, #0
 80087c6:	d0f6      	beq.n	80087b6 <__sflush_r+0xae>
 80087c8:	0793      	lsls	r3, r2, #30
 80087ca:	680e      	ldr	r6, [r1, #0]
 80087cc:	bf08      	it	eq
 80087ce:	694b      	ldreq	r3, [r1, #20]
 80087d0:	600f      	str	r7, [r1, #0]
 80087d2:	bf18      	it	ne
 80087d4:	2300      	movne	r3, #0
 80087d6:	eba6 0807 	sub.w	r8, r6, r7
 80087da:	608b      	str	r3, [r1, #8]
 80087dc:	f1b8 0f00 	cmp.w	r8, #0
 80087e0:	dde9      	ble.n	80087b6 <__sflush_r+0xae>
 80087e2:	6a21      	ldr	r1, [r4, #32]
 80087e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80087e6:	4643      	mov	r3, r8
 80087e8:	463a      	mov	r2, r7
 80087ea:	4628      	mov	r0, r5
 80087ec:	47b0      	blx	r6
 80087ee:	2800      	cmp	r0, #0
 80087f0:	dc08      	bgt.n	8008804 <__sflush_r+0xfc>
 80087f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087fa:	81a3      	strh	r3, [r4, #12]
 80087fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008804:	4407      	add	r7, r0
 8008806:	eba8 0800 	sub.w	r8, r8, r0
 800880a:	e7e7      	b.n	80087dc <__sflush_r+0xd4>
 800880c:	dfbffffe 	.word	0xdfbffffe

08008810 <_fflush_r>:
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	690b      	ldr	r3, [r1, #16]
 8008814:	4605      	mov	r5, r0
 8008816:	460c      	mov	r4, r1
 8008818:	b913      	cbnz	r3, 8008820 <_fflush_r+0x10>
 800881a:	2500      	movs	r5, #0
 800881c:	4628      	mov	r0, r5
 800881e:	bd38      	pop	{r3, r4, r5, pc}
 8008820:	b118      	cbz	r0, 800882a <_fflush_r+0x1a>
 8008822:	6a03      	ldr	r3, [r0, #32]
 8008824:	b90b      	cbnz	r3, 800882a <_fflush_r+0x1a>
 8008826:	f7ff f82d 	bl	8007884 <__sinit>
 800882a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d0f3      	beq.n	800881a <_fflush_r+0xa>
 8008832:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008834:	07d0      	lsls	r0, r2, #31
 8008836:	d404      	bmi.n	8008842 <_fflush_r+0x32>
 8008838:	0599      	lsls	r1, r3, #22
 800883a:	d402      	bmi.n	8008842 <_fflush_r+0x32>
 800883c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800883e:	f7ff fa38 	bl	8007cb2 <__retarget_lock_acquire_recursive>
 8008842:	4628      	mov	r0, r5
 8008844:	4621      	mov	r1, r4
 8008846:	f7ff ff5f 	bl	8008708 <__sflush_r>
 800884a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800884c:	07da      	lsls	r2, r3, #31
 800884e:	4605      	mov	r5, r0
 8008850:	d4e4      	bmi.n	800881c <_fflush_r+0xc>
 8008852:	89a3      	ldrh	r3, [r4, #12]
 8008854:	059b      	lsls	r3, r3, #22
 8008856:	d4e1      	bmi.n	800881c <_fflush_r+0xc>
 8008858:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800885a:	f7ff fa2b 	bl	8007cb4 <__retarget_lock_release_recursive>
 800885e:	e7dd      	b.n	800881c <_fflush_r+0xc>

08008860 <__swhatbuf_r>:
 8008860:	b570      	push	{r4, r5, r6, lr}
 8008862:	460c      	mov	r4, r1
 8008864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008868:	2900      	cmp	r1, #0
 800886a:	b096      	sub	sp, #88	@ 0x58
 800886c:	4615      	mov	r5, r2
 800886e:	461e      	mov	r6, r3
 8008870:	da0d      	bge.n	800888e <__swhatbuf_r+0x2e>
 8008872:	89a3      	ldrh	r3, [r4, #12]
 8008874:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008878:	f04f 0100 	mov.w	r1, #0
 800887c:	bf14      	ite	ne
 800887e:	2340      	movne	r3, #64	@ 0x40
 8008880:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008884:	2000      	movs	r0, #0
 8008886:	6031      	str	r1, [r6, #0]
 8008888:	602b      	str	r3, [r5, #0]
 800888a:	b016      	add	sp, #88	@ 0x58
 800888c:	bd70      	pop	{r4, r5, r6, pc}
 800888e:	466a      	mov	r2, sp
 8008890:	f000 f862 	bl	8008958 <_fstat_r>
 8008894:	2800      	cmp	r0, #0
 8008896:	dbec      	blt.n	8008872 <__swhatbuf_r+0x12>
 8008898:	9901      	ldr	r1, [sp, #4]
 800889a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800889e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80088a2:	4259      	negs	r1, r3
 80088a4:	4159      	adcs	r1, r3
 80088a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80088aa:	e7eb      	b.n	8008884 <__swhatbuf_r+0x24>

080088ac <__smakebuf_r>:
 80088ac:	898b      	ldrh	r3, [r1, #12]
 80088ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088b0:	079d      	lsls	r5, r3, #30
 80088b2:	4606      	mov	r6, r0
 80088b4:	460c      	mov	r4, r1
 80088b6:	d507      	bpl.n	80088c8 <__smakebuf_r+0x1c>
 80088b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80088bc:	6023      	str	r3, [r4, #0]
 80088be:	6123      	str	r3, [r4, #16]
 80088c0:	2301      	movs	r3, #1
 80088c2:	6163      	str	r3, [r4, #20]
 80088c4:	b003      	add	sp, #12
 80088c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088c8:	ab01      	add	r3, sp, #4
 80088ca:	466a      	mov	r2, sp
 80088cc:	f7ff ffc8 	bl	8008860 <__swhatbuf_r>
 80088d0:	9f00      	ldr	r7, [sp, #0]
 80088d2:	4605      	mov	r5, r0
 80088d4:	4639      	mov	r1, r7
 80088d6:	4630      	mov	r0, r6
 80088d8:	f7ff fa62 	bl	8007da0 <_malloc_r>
 80088dc:	b948      	cbnz	r0, 80088f2 <__smakebuf_r+0x46>
 80088de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088e2:	059a      	lsls	r2, r3, #22
 80088e4:	d4ee      	bmi.n	80088c4 <__smakebuf_r+0x18>
 80088e6:	f023 0303 	bic.w	r3, r3, #3
 80088ea:	f043 0302 	orr.w	r3, r3, #2
 80088ee:	81a3      	strh	r3, [r4, #12]
 80088f0:	e7e2      	b.n	80088b8 <__smakebuf_r+0xc>
 80088f2:	89a3      	ldrh	r3, [r4, #12]
 80088f4:	6020      	str	r0, [r4, #0]
 80088f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088fa:	81a3      	strh	r3, [r4, #12]
 80088fc:	9b01      	ldr	r3, [sp, #4]
 80088fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008902:	b15b      	cbz	r3, 800891c <__smakebuf_r+0x70>
 8008904:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008908:	4630      	mov	r0, r6
 800890a:	f000 f837 	bl	800897c <_isatty_r>
 800890e:	b128      	cbz	r0, 800891c <__smakebuf_r+0x70>
 8008910:	89a3      	ldrh	r3, [r4, #12]
 8008912:	f023 0303 	bic.w	r3, r3, #3
 8008916:	f043 0301 	orr.w	r3, r3, #1
 800891a:	81a3      	strh	r3, [r4, #12]
 800891c:	89a3      	ldrh	r3, [r4, #12]
 800891e:	431d      	orrs	r5, r3
 8008920:	81a5      	strh	r5, [r4, #12]
 8008922:	e7cf      	b.n	80088c4 <__smakebuf_r+0x18>

08008924 <memmove>:
 8008924:	4288      	cmp	r0, r1
 8008926:	b510      	push	{r4, lr}
 8008928:	eb01 0402 	add.w	r4, r1, r2
 800892c:	d902      	bls.n	8008934 <memmove+0x10>
 800892e:	4284      	cmp	r4, r0
 8008930:	4623      	mov	r3, r4
 8008932:	d807      	bhi.n	8008944 <memmove+0x20>
 8008934:	1e43      	subs	r3, r0, #1
 8008936:	42a1      	cmp	r1, r4
 8008938:	d008      	beq.n	800894c <memmove+0x28>
 800893a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800893e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008942:	e7f8      	b.n	8008936 <memmove+0x12>
 8008944:	4402      	add	r2, r0
 8008946:	4601      	mov	r1, r0
 8008948:	428a      	cmp	r2, r1
 800894a:	d100      	bne.n	800894e <memmove+0x2a>
 800894c:	bd10      	pop	{r4, pc}
 800894e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008952:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008956:	e7f7      	b.n	8008948 <memmove+0x24>

08008958 <_fstat_r>:
 8008958:	b538      	push	{r3, r4, r5, lr}
 800895a:	4d07      	ldr	r5, [pc, #28]	@ (8008978 <_fstat_r+0x20>)
 800895c:	2300      	movs	r3, #0
 800895e:	4604      	mov	r4, r0
 8008960:	4608      	mov	r0, r1
 8008962:	4611      	mov	r1, r2
 8008964:	602b      	str	r3, [r5, #0]
 8008966:	f7fa fc18 	bl	800319a <_fstat>
 800896a:	1c43      	adds	r3, r0, #1
 800896c:	d102      	bne.n	8008974 <_fstat_r+0x1c>
 800896e:	682b      	ldr	r3, [r5, #0]
 8008970:	b103      	cbz	r3, 8008974 <_fstat_r+0x1c>
 8008972:	6023      	str	r3, [r4, #0]
 8008974:	bd38      	pop	{r3, r4, r5, pc}
 8008976:	bf00      	nop
 8008978:	200003c4 	.word	0x200003c4

0800897c <_isatty_r>:
 800897c:	b538      	push	{r3, r4, r5, lr}
 800897e:	4d06      	ldr	r5, [pc, #24]	@ (8008998 <_isatty_r+0x1c>)
 8008980:	2300      	movs	r3, #0
 8008982:	4604      	mov	r4, r0
 8008984:	4608      	mov	r0, r1
 8008986:	602b      	str	r3, [r5, #0]
 8008988:	f7fa fc17 	bl	80031ba <_isatty>
 800898c:	1c43      	adds	r3, r0, #1
 800898e:	d102      	bne.n	8008996 <_isatty_r+0x1a>
 8008990:	682b      	ldr	r3, [r5, #0]
 8008992:	b103      	cbz	r3, 8008996 <_isatty_r+0x1a>
 8008994:	6023      	str	r3, [r4, #0]
 8008996:	bd38      	pop	{r3, r4, r5, pc}
 8008998:	200003c4 	.word	0x200003c4

0800899c <_sbrk_r>:
 800899c:	b538      	push	{r3, r4, r5, lr}
 800899e:	4d06      	ldr	r5, [pc, #24]	@ (80089b8 <_sbrk_r+0x1c>)
 80089a0:	2300      	movs	r3, #0
 80089a2:	4604      	mov	r4, r0
 80089a4:	4608      	mov	r0, r1
 80089a6:	602b      	str	r3, [r5, #0]
 80089a8:	f7fa fc20 	bl	80031ec <_sbrk>
 80089ac:	1c43      	adds	r3, r0, #1
 80089ae:	d102      	bne.n	80089b6 <_sbrk_r+0x1a>
 80089b0:	682b      	ldr	r3, [r5, #0]
 80089b2:	b103      	cbz	r3, 80089b6 <_sbrk_r+0x1a>
 80089b4:	6023      	str	r3, [r4, #0]
 80089b6:	bd38      	pop	{r3, r4, r5, pc}
 80089b8:	200003c4 	.word	0x200003c4

080089bc <memcpy>:
 80089bc:	440a      	add	r2, r1
 80089be:	4291      	cmp	r1, r2
 80089c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80089c4:	d100      	bne.n	80089c8 <memcpy+0xc>
 80089c6:	4770      	bx	lr
 80089c8:	b510      	push	{r4, lr}
 80089ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089d2:	4291      	cmp	r1, r2
 80089d4:	d1f9      	bne.n	80089ca <memcpy+0xe>
 80089d6:	bd10      	pop	{r4, pc}

080089d8 <_realloc_r>:
 80089d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089dc:	4680      	mov	r8, r0
 80089de:	4615      	mov	r5, r2
 80089e0:	460c      	mov	r4, r1
 80089e2:	b921      	cbnz	r1, 80089ee <_realloc_r+0x16>
 80089e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089e8:	4611      	mov	r1, r2
 80089ea:	f7ff b9d9 	b.w	8007da0 <_malloc_r>
 80089ee:	b92a      	cbnz	r2, 80089fc <_realloc_r+0x24>
 80089f0:	f7ff f96a 	bl	8007cc8 <_free_r>
 80089f4:	2400      	movs	r4, #0
 80089f6:	4620      	mov	r0, r4
 80089f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089fc:	f000 f81a 	bl	8008a34 <_malloc_usable_size_r>
 8008a00:	4285      	cmp	r5, r0
 8008a02:	4606      	mov	r6, r0
 8008a04:	d802      	bhi.n	8008a0c <_realloc_r+0x34>
 8008a06:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008a0a:	d8f4      	bhi.n	80089f6 <_realloc_r+0x1e>
 8008a0c:	4629      	mov	r1, r5
 8008a0e:	4640      	mov	r0, r8
 8008a10:	f7ff f9c6 	bl	8007da0 <_malloc_r>
 8008a14:	4607      	mov	r7, r0
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d0ec      	beq.n	80089f4 <_realloc_r+0x1c>
 8008a1a:	42b5      	cmp	r5, r6
 8008a1c:	462a      	mov	r2, r5
 8008a1e:	4621      	mov	r1, r4
 8008a20:	bf28      	it	cs
 8008a22:	4632      	movcs	r2, r6
 8008a24:	f7ff ffca 	bl	80089bc <memcpy>
 8008a28:	4621      	mov	r1, r4
 8008a2a:	4640      	mov	r0, r8
 8008a2c:	f7ff f94c 	bl	8007cc8 <_free_r>
 8008a30:	463c      	mov	r4, r7
 8008a32:	e7e0      	b.n	80089f6 <_realloc_r+0x1e>

08008a34 <_malloc_usable_size_r>:
 8008a34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a38:	1f18      	subs	r0, r3, #4
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	bfbc      	itt	lt
 8008a3e:	580b      	ldrlt	r3, [r1, r0]
 8008a40:	18c0      	addlt	r0, r0, r3
 8008a42:	4770      	bx	lr

08008a44 <_init>:
 8008a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a46:	bf00      	nop
 8008a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a4a:	bc08      	pop	{r3}
 8008a4c:	469e      	mov	lr, r3
 8008a4e:	4770      	bx	lr

08008a50 <_fini>:
 8008a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a52:	bf00      	nop
 8008a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a56:	bc08      	pop	{r3}
 8008a58:	469e      	mov	lr, r3
 8008a5a:	4770      	bx	lr
=======
 8003c98:	e106      	b.n	8003ea8 <UART_SetConfig+0x4d8>
 8003c9a:	bf00      	nop
 8003c9c:	40011000 	.word	0x40011000
 8003ca0:	40011400 	.word	0x40011400
 8003ca4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cac:	2200      	movs	r2, #0
 8003cae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003cb2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003cb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003cba:	4642      	mov	r2, r8
 8003cbc:	464b      	mov	r3, r9
 8003cbe:	1891      	adds	r1, r2, r2
 8003cc0:	6239      	str	r1, [r7, #32]
 8003cc2:	415b      	adcs	r3, r3
 8003cc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cca:	4641      	mov	r1, r8
 8003ccc:	1854      	adds	r4, r2, r1
 8003cce:	4649      	mov	r1, r9
 8003cd0:	eb43 0501 	adc.w	r5, r3, r1
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	00eb      	lsls	r3, r5, #3
 8003cde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ce2:	00e2      	lsls	r2, r4, #3
 8003ce4:	4614      	mov	r4, r2
 8003ce6:	461d      	mov	r5, r3
 8003ce8:	4643      	mov	r3, r8
 8003cea:	18e3      	adds	r3, r4, r3
 8003cec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003cf0:	464b      	mov	r3, r9
 8003cf2:	eb45 0303 	adc.w	r3, r5, r3
 8003cf6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d16:	4629      	mov	r1, r5
 8003d18:	008b      	lsls	r3, r1, #2
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d20:	4621      	mov	r1, r4
 8003d22:	008a      	lsls	r2, r1, #2
 8003d24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d28:	f7fc faaa 	bl	8000280 <__aeabi_uldivmod>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4b60      	ldr	r3, [pc, #384]	@ (8003eb4 <UART_SetConfig+0x4e4>)
 8003d32:	fba3 2302 	umull	r2, r3, r3, r2
 8003d36:	095b      	lsrs	r3, r3, #5
 8003d38:	011c      	lsls	r4, r3, #4
 8003d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003d4c:	4642      	mov	r2, r8
 8003d4e:	464b      	mov	r3, r9
 8003d50:	1891      	adds	r1, r2, r2
 8003d52:	61b9      	str	r1, [r7, #24]
 8003d54:	415b      	adcs	r3, r3
 8003d56:	61fb      	str	r3, [r7, #28]
 8003d58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d5c:	4641      	mov	r1, r8
 8003d5e:	1851      	adds	r1, r2, r1
 8003d60:	6139      	str	r1, [r7, #16]
 8003d62:	4649      	mov	r1, r9
 8003d64:	414b      	adcs	r3, r1
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	f04f 0200 	mov.w	r2, #0
 8003d6c:	f04f 0300 	mov.w	r3, #0
 8003d70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d74:	4659      	mov	r1, fp
 8003d76:	00cb      	lsls	r3, r1, #3
 8003d78:	4651      	mov	r1, sl
 8003d7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d7e:	4651      	mov	r1, sl
 8003d80:	00ca      	lsls	r2, r1, #3
 8003d82:	4610      	mov	r0, r2
 8003d84:	4619      	mov	r1, r3
 8003d86:	4603      	mov	r3, r0
 8003d88:	4642      	mov	r2, r8
 8003d8a:	189b      	adds	r3, r3, r2
 8003d8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d90:	464b      	mov	r3, r9
 8003d92:	460a      	mov	r2, r1
 8003d94:	eb42 0303 	adc.w	r3, r2, r3
 8003d98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003da6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003db4:	4649      	mov	r1, r9
 8003db6:	008b      	lsls	r3, r1, #2
 8003db8:	4641      	mov	r1, r8
 8003dba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dbe:	4641      	mov	r1, r8
 8003dc0:	008a      	lsls	r2, r1, #2
 8003dc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003dc6:	f7fc fa5b 	bl	8000280 <__aeabi_uldivmod>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4611      	mov	r1, r2
 8003dd0:	4b38      	ldr	r3, [pc, #224]	@ (8003eb4 <UART_SetConfig+0x4e4>)
 8003dd2:	fba3 2301 	umull	r2, r3, r3, r1
 8003dd6:	095b      	lsrs	r3, r3, #5
 8003dd8:	2264      	movs	r2, #100	@ 0x64
 8003dda:	fb02 f303 	mul.w	r3, r2, r3
 8003dde:	1acb      	subs	r3, r1, r3
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	3332      	adds	r3, #50	@ 0x32
 8003de4:	4a33      	ldr	r2, [pc, #204]	@ (8003eb4 <UART_SetConfig+0x4e4>)
 8003de6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003df0:	441c      	add	r4, r3
 8003df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003df6:	2200      	movs	r2, #0
 8003df8:	673b      	str	r3, [r7, #112]	@ 0x70
 8003dfa:	677a      	str	r2, [r7, #116]	@ 0x74
 8003dfc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003e00:	4642      	mov	r2, r8
 8003e02:	464b      	mov	r3, r9
 8003e04:	1891      	adds	r1, r2, r2
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	415b      	adcs	r3, r3
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e10:	4641      	mov	r1, r8
 8003e12:	1851      	adds	r1, r2, r1
 8003e14:	6039      	str	r1, [r7, #0]
 8003e16:	4649      	mov	r1, r9
 8003e18:	414b      	adcs	r3, r1
 8003e1a:	607b      	str	r3, [r7, #4]
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e28:	4659      	mov	r1, fp
 8003e2a:	00cb      	lsls	r3, r1, #3
 8003e2c:	4651      	mov	r1, sl
 8003e2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e32:	4651      	mov	r1, sl
 8003e34:	00ca      	lsls	r2, r1, #3
 8003e36:	4610      	mov	r0, r2
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	4642      	mov	r2, r8
 8003e3e:	189b      	adds	r3, r3, r2
 8003e40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e42:	464b      	mov	r3, r9
 8003e44:	460a      	mov	r2, r1
 8003e46:	eb42 0303 	adc.w	r3, r2, r3
 8003e4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e56:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e64:	4649      	mov	r1, r9
 8003e66:	008b      	lsls	r3, r1, #2
 8003e68:	4641      	mov	r1, r8
 8003e6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e6e:	4641      	mov	r1, r8
 8003e70:	008a      	lsls	r2, r1, #2
 8003e72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003e76:	f7fc fa03 	bl	8000280 <__aeabi_uldivmod>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003eb4 <UART_SetConfig+0x4e4>)
 8003e80:	fba3 1302 	umull	r1, r3, r3, r2
 8003e84:	095b      	lsrs	r3, r3, #5
 8003e86:	2164      	movs	r1, #100	@ 0x64
 8003e88:	fb01 f303 	mul.w	r3, r1, r3
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	3332      	adds	r3, #50	@ 0x32
 8003e92:	4a08      	ldr	r2, [pc, #32]	@ (8003eb4 <UART_SetConfig+0x4e4>)
 8003e94:	fba2 2303 	umull	r2, r3, r2, r3
 8003e98:	095b      	lsrs	r3, r3, #5
 8003e9a:	f003 020f 	and.w	r2, r3, #15
 8003e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4422      	add	r2, r4
 8003ea6:	609a      	str	r2, [r3, #8]
}
 8003ea8:	bf00      	nop
 8003eaa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eb4:	51eb851f 	.word	0x51eb851f

08003eb8 <std>:
 8003eb8:	2300      	movs	r3, #0
 8003eba:	b510      	push	{r4, lr}
 8003ebc:	4604      	mov	r4, r0
 8003ebe:	e9c0 3300 	strd	r3, r3, [r0]
 8003ec2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ec6:	6083      	str	r3, [r0, #8]
 8003ec8:	8181      	strh	r1, [r0, #12]
 8003eca:	6643      	str	r3, [r0, #100]	@ 0x64
 8003ecc:	81c2      	strh	r2, [r0, #14]
 8003ece:	6183      	str	r3, [r0, #24]
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	2208      	movs	r2, #8
 8003ed4:	305c      	adds	r0, #92	@ 0x5c
 8003ed6:	f000 f9f9 	bl	80042cc <memset>
 8003eda:	4b0d      	ldr	r3, [pc, #52]	@ (8003f10 <std+0x58>)
 8003edc:	6263      	str	r3, [r4, #36]	@ 0x24
 8003ede:	4b0d      	ldr	r3, [pc, #52]	@ (8003f14 <std+0x5c>)
 8003ee0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8003f18 <std+0x60>)
 8003ee4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f1c <std+0x64>)
 8003ee8:	6323      	str	r3, [r4, #48]	@ 0x30
 8003eea:	4b0d      	ldr	r3, [pc, #52]	@ (8003f20 <std+0x68>)
 8003eec:	6224      	str	r4, [r4, #32]
 8003eee:	429c      	cmp	r4, r3
 8003ef0:	d006      	beq.n	8003f00 <std+0x48>
 8003ef2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003ef6:	4294      	cmp	r4, r2
 8003ef8:	d002      	beq.n	8003f00 <std+0x48>
 8003efa:	33d0      	adds	r3, #208	@ 0xd0
 8003efc:	429c      	cmp	r4, r3
 8003efe:	d105      	bne.n	8003f0c <std+0x54>
 8003f00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f08:	f000 ba58 	b.w	80043bc <__retarget_lock_init_recursive>
 8003f0c:	bd10      	pop	{r4, pc}
 8003f0e:	bf00      	nop
 8003f10:	0800411d 	.word	0x0800411d
 8003f14:	0800413f 	.word	0x0800413f
 8003f18:	08004177 	.word	0x08004177
 8003f1c:	0800419b 	.word	0x0800419b
 8003f20:	200001b4 	.word	0x200001b4

08003f24 <stdio_exit_handler>:
 8003f24:	4a02      	ldr	r2, [pc, #8]	@ (8003f30 <stdio_exit_handler+0xc>)
 8003f26:	4903      	ldr	r1, [pc, #12]	@ (8003f34 <stdio_exit_handler+0x10>)
 8003f28:	4803      	ldr	r0, [pc, #12]	@ (8003f38 <stdio_exit_handler+0x14>)
 8003f2a:	f000 b869 	b.w	8004000 <_fwalk_sglue>
 8003f2e:	bf00      	nop
 8003f30:	2000003c 	.word	0x2000003c
 8003f34:	08004c6d 	.word	0x08004c6d
 8003f38:	2000004c 	.word	0x2000004c

08003f3c <cleanup_stdio>:
 8003f3c:	6841      	ldr	r1, [r0, #4]
 8003f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f70 <cleanup_stdio+0x34>)
 8003f40:	4299      	cmp	r1, r3
 8003f42:	b510      	push	{r4, lr}
 8003f44:	4604      	mov	r4, r0
 8003f46:	d001      	beq.n	8003f4c <cleanup_stdio+0x10>
 8003f48:	f000 fe90 	bl	8004c6c <_fflush_r>
 8003f4c:	68a1      	ldr	r1, [r4, #8]
 8003f4e:	4b09      	ldr	r3, [pc, #36]	@ (8003f74 <cleanup_stdio+0x38>)
 8003f50:	4299      	cmp	r1, r3
 8003f52:	d002      	beq.n	8003f5a <cleanup_stdio+0x1e>
 8003f54:	4620      	mov	r0, r4
 8003f56:	f000 fe89 	bl	8004c6c <_fflush_r>
 8003f5a:	68e1      	ldr	r1, [r4, #12]
 8003f5c:	4b06      	ldr	r3, [pc, #24]	@ (8003f78 <cleanup_stdio+0x3c>)
 8003f5e:	4299      	cmp	r1, r3
 8003f60:	d004      	beq.n	8003f6c <cleanup_stdio+0x30>
 8003f62:	4620      	mov	r0, r4
 8003f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f68:	f000 be80 	b.w	8004c6c <_fflush_r>
 8003f6c:	bd10      	pop	{r4, pc}
 8003f6e:	bf00      	nop
 8003f70:	200001b4 	.word	0x200001b4
 8003f74:	2000021c 	.word	0x2000021c
 8003f78:	20000284 	.word	0x20000284

08003f7c <global_stdio_init.part.0>:
 8003f7c:	b510      	push	{r4, lr}
 8003f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003fac <global_stdio_init.part.0+0x30>)
 8003f80:	4c0b      	ldr	r4, [pc, #44]	@ (8003fb0 <global_stdio_init.part.0+0x34>)
 8003f82:	4a0c      	ldr	r2, [pc, #48]	@ (8003fb4 <global_stdio_init.part.0+0x38>)
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	4620      	mov	r0, r4
 8003f88:	2200      	movs	r2, #0
 8003f8a:	2104      	movs	r1, #4
 8003f8c:	f7ff ff94 	bl	8003eb8 <std>
 8003f90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003f94:	2201      	movs	r2, #1
 8003f96:	2109      	movs	r1, #9
 8003f98:	f7ff ff8e 	bl	8003eb8 <std>
 8003f9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fa6:	2112      	movs	r1, #18
 8003fa8:	f7ff bf86 	b.w	8003eb8 <std>
 8003fac:	200002ec 	.word	0x200002ec
 8003fb0:	200001b4 	.word	0x200001b4
 8003fb4:	08003f25 	.word	0x08003f25

08003fb8 <__sfp_lock_acquire>:
 8003fb8:	4801      	ldr	r0, [pc, #4]	@ (8003fc0 <__sfp_lock_acquire+0x8>)
 8003fba:	f000 ba00 	b.w	80043be <__retarget_lock_acquire_recursive>
 8003fbe:	bf00      	nop
 8003fc0:	200002f5 	.word	0x200002f5

08003fc4 <__sfp_lock_release>:
 8003fc4:	4801      	ldr	r0, [pc, #4]	@ (8003fcc <__sfp_lock_release+0x8>)
 8003fc6:	f000 b9fb 	b.w	80043c0 <__retarget_lock_release_recursive>
 8003fca:	bf00      	nop
 8003fcc:	200002f5 	.word	0x200002f5

08003fd0 <__sinit>:
 8003fd0:	b510      	push	{r4, lr}
 8003fd2:	4604      	mov	r4, r0
 8003fd4:	f7ff fff0 	bl	8003fb8 <__sfp_lock_acquire>
 8003fd8:	6a23      	ldr	r3, [r4, #32]
 8003fda:	b11b      	cbz	r3, 8003fe4 <__sinit+0x14>
 8003fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fe0:	f7ff bff0 	b.w	8003fc4 <__sfp_lock_release>
 8003fe4:	4b04      	ldr	r3, [pc, #16]	@ (8003ff8 <__sinit+0x28>)
 8003fe6:	6223      	str	r3, [r4, #32]
 8003fe8:	4b04      	ldr	r3, [pc, #16]	@ (8003ffc <__sinit+0x2c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1f5      	bne.n	8003fdc <__sinit+0xc>
 8003ff0:	f7ff ffc4 	bl	8003f7c <global_stdio_init.part.0>
 8003ff4:	e7f2      	b.n	8003fdc <__sinit+0xc>
 8003ff6:	bf00      	nop
 8003ff8:	08003f3d 	.word	0x08003f3d
 8003ffc:	200002ec 	.word	0x200002ec

08004000 <_fwalk_sglue>:
 8004000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004004:	4607      	mov	r7, r0
 8004006:	4688      	mov	r8, r1
 8004008:	4614      	mov	r4, r2
 800400a:	2600      	movs	r6, #0
 800400c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004010:	f1b9 0901 	subs.w	r9, r9, #1
 8004014:	d505      	bpl.n	8004022 <_fwalk_sglue+0x22>
 8004016:	6824      	ldr	r4, [r4, #0]
 8004018:	2c00      	cmp	r4, #0
 800401a:	d1f7      	bne.n	800400c <_fwalk_sglue+0xc>
 800401c:	4630      	mov	r0, r6
 800401e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004022:	89ab      	ldrh	r3, [r5, #12]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d907      	bls.n	8004038 <_fwalk_sglue+0x38>
 8004028:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800402c:	3301      	adds	r3, #1
 800402e:	d003      	beq.n	8004038 <_fwalk_sglue+0x38>
 8004030:	4629      	mov	r1, r5
 8004032:	4638      	mov	r0, r7
 8004034:	47c0      	blx	r8
 8004036:	4306      	orrs	r6, r0
 8004038:	3568      	adds	r5, #104	@ 0x68
 800403a:	e7e9      	b.n	8004010 <_fwalk_sglue+0x10>

0800403c <iprintf>:
 800403c:	b40f      	push	{r0, r1, r2, r3}
 800403e:	b507      	push	{r0, r1, r2, lr}
 8004040:	4906      	ldr	r1, [pc, #24]	@ (800405c <iprintf+0x20>)
 8004042:	ab04      	add	r3, sp, #16
 8004044:	6808      	ldr	r0, [r1, #0]
 8004046:	f853 2b04 	ldr.w	r2, [r3], #4
 800404a:	6881      	ldr	r1, [r0, #8]
 800404c:	9301      	str	r3, [sp, #4]
 800404e:	f000 fae3 	bl	8004618 <_vfiprintf_r>
 8004052:	b003      	add	sp, #12
 8004054:	f85d eb04 	ldr.w	lr, [sp], #4
 8004058:	b004      	add	sp, #16
 800405a:	4770      	bx	lr
 800405c:	20000048 	.word	0x20000048

08004060 <_puts_r>:
 8004060:	6a03      	ldr	r3, [r0, #32]
 8004062:	b570      	push	{r4, r5, r6, lr}
 8004064:	6884      	ldr	r4, [r0, #8]
 8004066:	4605      	mov	r5, r0
 8004068:	460e      	mov	r6, r1
 800406a:	b90b      	cbnz	r3, 8004070 <_puts_r+0x10>
 800406c:	f7ff ffb0 	bl	8003fd0 <__sinit>
 8004070:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004072:	07db      	lsls	r3, r3, #31
 8004074:	d405      	bmi.n	8004082 <_puts_r+0x22>
 8004076:	89a3      	ldrh	r3, [r4, #12]
 8004078:	0598      	lsls	r0, r3, #22
 800407a:	d402      	bmi.n	8004082 <_puts_r+0x22>
 800407c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800407e:	f000 f99e 	bl	80043be <__retarget_lock_acquire_recursive>
 8004082:	89a3      	ldrh	r3, [r4, #12]
 8004084:	0719      	lsls	r1, r3, #28
 8004086:	d502      	bpl.n	800408e <_puts_r+0x2e>
 8004088:	6923      	ldr	r3, [r4, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d135      	bne.n	80040fa <_puts_r+0x9a>
 800408e:	4621      	mov	r1, r4
 8004090:	4628      	mov	r0, r5
 8004092:	f000 f8c5 	bl	8004220 <__swsetup_r>
 8004096:	b380      	cbz	r0, 80040fa <_puts_r+0x9a>
 8004098:	f04f 35ff 	mov.w	r5, #4294967295
 800409c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800409e:	07da      	lsls	r2, r3, #31
 80040a0:	d405      	bmi.n	80040ae <_puts_r+0x4e>
 80040a2:	89a3      	ldrh	r3, [r4, #12]
 80040a4:	059b      	lsls	r3, r3, #22
 80040a6:	d402      	bmi.n	80040ae <_puts_r+0x4e>
 80040a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040aa:	f000 f989 	bl	80043c0 <__retarget_lock_release_recursive>
 80040ae:	4628      	mov	r0, r5
 80040b0:	bd70      	pop	{r4, r5, r6, pc}
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	da04      	bge.n	80040c0 <_puts_r+0x60>
 80040b6:	69a2      	ldr	r2, [r4, #24]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	dc17      	bgt.n	80040ec <_puts_r+0x8c>
 80040bc:	290a      	cmp	r1, #10
 80040be:	d015      	beq.n	80040ec <_puts_r+0x8c>
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	6022      	str	r2, [r4, #0]
 80040c6:	7019      	strb	r1, [r3, #0]
 80040c8:	68a3      	ldr	r3, [r4, #8]
 80040ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80040ce:	3b01      	subs	r3, #1
 80040d0:	60a3      	str	r3, [r4, #8]
 80040d2:	2900      	cmp	r1, #0
 80040d4:	d1ed      	bne.n	80040b2 <_puts_r+0x52>
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	da11      	bge.n	80040fe <_puts_r+0x9e>
 80040da:	4622      	mov	r2, r4
 80040dc:	210a      	movs	r1, #10
 80040de:	4628      	mov	r0, r5
 80040e0:	f000 f85f 	bl	80041a2 <__swbuf_r>
 80040e4:	3001      	adds	r0, #1
 80040e6:	d0d7      	beq.n	8004098 <_puts_r+0x38>
 80040e8:	250a      	movs	r5, #10
 80040ea:	e7d7      	b.n	800409c <_puts_r+0x3c>
 80040ec:	4622      	mov	r2, r4
 80040ee:	4628      	mov	r0, r5
 80040f0:	f000 f857 	bl	80041a2 <__swbuf_r>
 80040f4:	3001      	adds	r0, #1
 80040f6:	d1e7      	bne.n	80040c8 <_puts_r+0x68>
 80040f8:	e7ce      	b.n	8004098 <_puts_r+0x38>
 80040fa:	3e01      	subs	r6, #1
 80040fc:	e7e4      	b.n	80040c8 <_puts_r+0x68>
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	6022      	str	r2, [r4, #0]
 8004104:	220a      	movs	r2, #10
 8004106:	701a      	strb	r2, [r3, #0]
 8004108:	e7ee      	b.n	80040e8 <_puts_r+0x88>
	...

0800410c <puts>:
 800410c:	4b02      	ldr	r3, [pc, #8]	@ (8004118 <puts+0xc>)
 800410e:	4601      	mov	r1, r0
 8004110:	6818      	ldr	r0, [r3, #0]
 8004112:	f7ff bfa5 	b.w	8004060 <_puts_r>
 8004116:	bf00      	nop
 8004118:	20000048 	.word	0x20000048

0800411c <__sread>:
 800411c:	b510      	push	{r4, lr}
 800411e:	460c      	mov	r4, r1
 8004120:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004124:	f000 f8fc 	bl	8004320 <_read_r>
 8004128:	2800      	cmp	r0, #0
 800412a:	bfab      	itete	ge
 800412c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800412e:	89a3      	ldrhlt	r3, [r4, #12]
 8004130:	181b      	addge	r3, r3, r0
 8004132:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004136:	bfac      	ite	ge
 8004138:	6563      	strge	r3, [r4, #84]	@ 0x54
 800413a:	81a3      	strhlt	r3, [r4, #12]
 800413c:	bd10      	pop	{r4, pc}

0800413e <__swrite>:
 800413e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004142:	461f      	mov	r7, r3
 8004144:	898b      	ldrh	r3, [r1, #12]
 8004146:	05db      	lsls	r3, r3, #23
 8004148:	4605      	mov	r5, r0
 800414a:	460c      	mov	r4, r1
 800414c:	4616      	mov	r6, r2
 800414e:	d505      	bpl.n	800415c <__swrite+0x1e>
 8004150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004154:	2302      	movs	r3, #2
 8004156:	2200      	movs	r2, #0
 8004158:	f000 f8d0 	bl	80042fc <_lseek_r>
 800415c:	89a3      	ldrh	r3, [r4, #12]
 800415e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004162:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004166:	81a3      	strh	r3, [r4, #12]
 8004168:	4632      	mov	r2, r6
 800416a:	463b      	mov	r3, r7
 800416c:	4628      	mov	r0, r5
 800416e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004172:	f000 b8e7 	b.w	8004344 <_write_r>

08004176 <__sseek>:
 8004176:	b510      	push	{r4, lr}
 8004178:	460c      	mov	r4, r1
 800417a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800417e:	f000 f8bd 	bl	80042fc <_lseek_r>
 8004182:	1c43      	adds	r3, r0, #1
 8004184:	89a3      	ldrh	r3, [r4, #12]
 8004186:	bf15      	itete	ne
 8004188:	6560      	strne	r0, [r4, #84]	@ 0x54
 800418a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800418e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004192:	81a3      	strheq	r3, [r4, #12]
 8004194:	bf18      	it	ne
 8004196:	81a3      	strhne	r3, [r4, #12]
 8004198:	bd10      	pop	{r4, pc}

0800419a <__sclose>:
 800419a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800419e:	f000 b89d 	b.w	80042dc <_close_r>

080041a2 <__swbuf_r>:
 80041a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a4:	460e      	mov	r6, r1
 80041a6:	4614      	mov	r4, r2
 80041a8:	4605      	mov	r5, r0
 80041aa:	b118      	cbz	r0, 80041b4 <__swbuf_r+0x12>
 80041ac:	6a03      	ldr	r3, [r0, #32]
 80041ae:	b90b      	cbnz	r3, 80041b4 <__swbuf_r+0x12>
 80041b0:	f7ff ff0e 	bl	8003fd0 <__sinit>
 80041b4:	69a3      	ldr	r3, [r4, #24]
 80041b6:	60a3      	str	r3, [r4, #8]
 80041b8:	89a3      	ldrh	r3, [r4, #12]
 80041ba:	071a      	lsls	r2, r3, #28
 80041bc:	d501      	bpl.n	80041c2 <__swbuf_r+0x20>
 80041be:	6923      	ldr	r3, [r4, #16]
 80041c0:	b943      	cbnz	r3, 80041d4 <__swbuf_r+0x32>
 80041c2:	4621      	mov	r1, r4
 80041c4:	4628      	mov	r0, r5
 80041c6:	f000 f82b 	bl	8004220 <__swsetup_r>
 80041ca:	b118      	cbz	r0, 80041d4 <__swbuf_r+0x32>
 80041cc:	f04f 37ff 	mov.w	r7, #4294967295
 80041d0:	4638      	mov	r0, r7
 80041d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041d4:	6823      	ldr	r3, [r4, #0]
 80041d6:	6922      	ldr	r2, [r4, #16]
 80041d8:	1a98      	subs	r0, r3, r2
 80041da:	6963      	ldr	r3, [r4, #20]
 80041dc:	b2f6      	uxtb	r6, r6
 80041de:	4283      	cmp	r3, r0
 80041e0:	4637      	mov	r7, r6
 80041e2:	dc05      	bgt.n	80041f0 <__swbuf_r+0x4e>
 80041e4:	4621      	mov	r1, r4
 80041e6:	4628      	mov	r0, r5
 80041e8:	f000 fd40 	bl	8004c6c <_fflush_r>
 80041ec:	2800      	cmp	r0, #0
 80041ee:	d1ed      	bne.n	80041cc <__swbuf_r+0x2a>
 80041f0:	68a3      	ldr	r3, [r4, #8]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	60a3      	str	r3, [r4, #8]
 80041f6:	6823      	ldr	r3, [r4, #0]
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	6022      	str	r2, [r4, #0]
 80041fc:	701e      	strb	r6, [r3, #0]
 80041fe:	6962      	ldr	r2, [r4, #20]
 8004200:	1c43      	adds	r3, r0, #1
 8004202:	429a      	cmp	r2, r3
 8004204:	d004      	beq.n	8004210 <__swbuf_r+0x6e>
 8004206:	89a3      	ldrh	r3, [r4, #12]
 8004208:	07db      	lsls	r3, r3, #31
 800420a:	d5e1      	bpl.n	80041d0 <__swbuf_r+0x2e>
 800420c:	2e0a      	cmp	r6, #10
 800420e:	d1df      	bne.n	80041d0 <__swbuf_r+0x2e>
 8004210:	4621      	mov	r1, r4
 8004212:	4628      	mov	r0, r5
 8004214:	f000 fd2a 	bl	8004c6c <_fflush_r>
 8004218:	2800      	cmp	r0, #0
 800421a:	d0d9      	beq.n	80041d0 <__swbuf_r+0x2e>
 800421c:	e7d6      	b.n	80041cc <__swbuf_r+0x2a>
	...

08004220 <__swsetup_r>:
 8004220:	b538      	push	{r3, r4, r5, lr}
 8004222:	4b29      	ldr	r3, [pc, #164]	@ (80042c8 <__swsetup_r+0xa8>)
 8004224:	4605      	mov	r5, r0
 8004226:	6818      	ldr	r0, [r3, #0]
 8004228:	460c      	mov	r4, r1
 800422a:	b118      	cbz	r0, 8004234 <__swsetup_r+0x14>
 800422c:	6a03      	ldr	r3, [r0, #32]
 800422e:	b90b      	cbnz	r3, 8004234 <__swsetup_r+0x14>
 8004230:	f7ff fece 	bl	8003fd0 <__sinit>
 8004234:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004238:	0719      	lsls	r1, r3, #28
 800423a:	d422      	bmi.n	8004282 <__swsetup_r+0x62>
 800423c:	06da      	lsls	r2, r3, #27
 800423e:	d407      	bmi.n	8004250 <__swsetup_r+0x30>
 8004240:	2209      	movs	r2, #9
 8004242:	602a      	str	r2, [r5, #0]
 8004244:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004248:	81a3      	strh	r3, [r4, #12]
 800424a:	f04f 30ff 	mov.w	r0, #4294967295
 800424e:	e033      	b.n	80042b8 <__swsetup_r+0x98>
 8004250:	0758      	lsls	r0, r3, #29
 8004252:	d512      	bpl.n	800427a <__swsetup_r+0x5a>
 8004254:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004256:	b141      	cbz	r1, 800426a <__swsetup_r+0x4a>
 8004258:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800425c:	4299      	cmp	r1, r3
 800425e:	d002      	beq.n	8004266 <__swsetup_r+0x46>
 8004260:	4628      	mov	r0, r5
 8004262:	f000 f8b7 	bl	80043d4 <_free_r>
 8004266:	2300      	movs	r3, #0
 8004268:	6363      	str	r3, [r4, #52]	@ 0x34
 800426a:	89a3      	ldrh	r3, [r4, #12]
 800426c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004270:	81a3      	strh	r3, [r4, #12]
 8004272:	2300      	movs	r3, #0
 8004274:	6063      	str	r3, [r4, #4]
 8004276:	6923      	ldr	r3, [r4, #16]
 8004278:	6023      	str	r3, [r4, #0]
 800427a:	89a3      	ldrh	r3, [r4, #12]
 800427c:	f043 0308 	orr.w	r3, r3, #8
 8004280:	81a3      	strh	r3, [r4, #12]
 8004282:	6923      	ldr	r3, [r4, #16]
 8004284:	b94b      	cbnz	r3, 800429a <__swsetup_r+0x7a>
 8004286:	89a3      	ldrh	r3, [r4, #12]
 8004288:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800428c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004290:	d003      	beq.n	800429a <__swsetup_r+0x7a>
 8004292:	4621      	mov	r1, r4
 8004294:	4628      	mov	r0, r5
 8004296:	f000 fd37 	bl	8004d08 <__smakebuf_r>
 800429a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800429e:	f013 0201 	ands.w	r2, r3, #1
 80042a2:	d00a      	beq.n	80042ba <__swsetup_r+0x9a>
 80042a4:	2200      	movs	r2, #0
 80042a6:	60a2      	str	r2, [r4, #8]
 80042a8:	6962      	ldr	r2, [r4, #20]
 80042aa:	4252      	negs	r2, r2
 80042ac:	61a2      	str	r2, [r4, #24]
 80042ae:	6922      	ldr	r2, [r4, #16]
 80042b0:	b942      	cbnz	r2, 80042c4 <__swsetup_r+0xa4>
 80042b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80042b6:	d1c5      	bne.n	8004244 <__swsetup_r+0x24>
 80042b8:	bd38      	pop	{r3, r4, r5, pc}
 80042ba:	0799      	lsls	r1, r3, #30
 80042bc:	bf58      	it	pl
 80042be:	6962      	ldrpl	r2, [r4, #20]
 80042c0:	60a2      	str	r2, [r4, #8]
 80042c2:	e7f4      	b.n	80042ae <__swsetup_r+0x8e>
 80042c4:	2000      	movs	r0, #0
 80042c6:	e7f7      	b.n	80042b8 <__swsetup_r+0x98>
 80042c8:	20000048 	.word	0x20000048

080042cc <memset>:
 80042cc:	4402      	add	r2, r0
 80042ce:	4603      	mov	r3, r0
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d100      	bne.n	80042d6 <memset+0xa>
 80042d4:	4770      	bx	lr
 80042d6:	f803 1b01 	strb.w	r1, [r3], #1
 80042da:	e7f9      	b.n	80042d0 <memset+0x4>

080042dc <_close_r>:
 80042dc:	b538      	push	{r3, r4, r5, lr}
 80042de:	4d06      	ldr	r5, [pc, #24]	@ (80042f8 <_close_r+0x1c>)
 80042e0:	2300      	movs	r3, #0
 80042e2:	4604      	mov	r4, r0
 80042e4:	4608      	mov	r0, r1
 80042e6:	602b      	str	r3, [r5, #0]
 80042e8:	f7fc ff85 	bl	80011f6 <_close>
 80042ec:	1c43      	adds	r3, r0, #1
 80042ee:	d102      	bne.n	80042f6 <_close_r+0x1a>
 80042f0:	682b      	ldr	r3, [r5, #0]
 80042f2:	b103      	cbz	r3, 80042f6 <_close_r+0x1a>
 80042f4:	6023      	str	r3, [r4, #0]
 80042f6:	bd38      	pop	{r3, r4, r5, pc}
 80042f8:	200002f0 	.word	0x200002f0

080042fc <_lseek_r>:
 80042fc:	b538      	push	{r3, r4, r5, lr}
 80042fe:	4d07      	ldr	r5, [pc, #28]	@ (800431c <_lseek_r+0x20>)
 8004300:	4604      	mov	r4, r0
 8004302:	4608      	mov	r0, r1
 8004304:	4611      	mov	r1, r2
 8004306:	2200      	movs	r2, #0
 8004308:	602a      	str	r2, [r5, #0]
 800430a:	461a      	mov	r2, r3
 800430c:	f7fc ff9a 	bl	8001244 <_lseek>
 8004310:	1c43      	adds	r3, r0, #1
 8004312:	d102      	bne.n	800431a <_lseek_r+0x1e>
 8004314:	682b      	ldr	r3, [r5, #0]
 8004316:	b103      	cbz	r3, 800431a <_lseek_r+0x1e>
 8004318:	6023      	str	r3, [r4, #0]
 800431a:	bd38      	pop	{r3, r4, r5, pc}
 800431c:	200002f0 	.word	0x200002f0

08004320 <_read_r>:
 8004320:	b538      	push	{r3, r4, r5, lr}
 8004322:	4d07      	ldr	r5, [pc, #28]	@ (8004340 <_read_r+0x20>)
 8004324:	4604      	mov	r4, r0
 8004326:	4608      	mov	r0, r1
 8004328:	4611      	mov	r1, r2
 800432a:	2200      	movs	r2, #0
 800432c:	602a      	str	r2, [r5, #0]
 800432e:	461a      	mov	r2, r3
 8004330:	f7fc ff28 	bl	8001184 <_read>
 8004334:	1c43      	adds	r3, r0, #1
 8004336:	d102      	bne.n	800433e <_read_r+0x1e>
 8004338:	682b      	ldr	r3, [r5, #0]
 800433a:	b103      	cbz	r3, 800433e <_read_r+0x1e>
 800433c:	6023      	str	r3, [r4, #0]
 800433e:	bd38      	pop	{r3, r4, r5, pc}
 8004340:	200002f0 	.word	0x200002f0

08004344 <_write_r>:
 8004344:	b538      	push	{r3, r4, r5, lr}
 8004346:	4d07      	ldr	r5, [pc, #28]	@ (8004364 <_write_r+0x20>)
 8004348:	4604      	mov	r4, r0
 800434a:	4608      	mov	r0, r1
 800434c:	4611      	mov	r1, r2
 800434e:	2200      	movs	r2, #0
 8004350:	602a      	str	r2, [r5, #0]
 8004352:	461a      	mov	r2, r3
 8004354:	f7fc ff33 	bl	80011be <_write>
 8004358:	1c43      	adds	r3, r0, #1
 800435a:	d102      	bne.n	8004362 <_write_r+0x1e>
 800435c:	682b      	ldr	r3, [r5, #0]
 800435e:	b103      	cbz	r3, 8004362 <_write_r+0x1e>
 8004360:	6023      	str	r3, [r4, #0]
 8004362:	bd38      	pop	{r3, r4, r5, pc}
 8004364:	200002f0 	.word	0x200002f0

08004368 <__errno>:
 8004368:	4b01      	ldr	r3, [pc, #4]	@ (8004370 <__errno+0x8>)
 800436a:	6818      	ldr	r0, [r3, #0]
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop
 8004370:	20000048 	.word	0x20000048

08004374 <__libc_init_array>:
 8004374:	b570      	push	{r4, r5, r6, lr}
 8004376:	4d0d      	ldr	r5, [pc, #52]	@ (80043ac <__libc_init_array+0x38>)
 8004378:	4c0d      	ldr	r4, [pc, #52]	@ (80043b0 <__libc_init_array+0x3c>)
 800437a:	1b64      	subs	r4, r4, r5
 800437c:	10a4      	asrs	r4, r4, #2
 800437e:	2600      	movs	r6, #0
 8004380:	42a6      	cmp	r6, r4
 8004382:	d109      	bne.n	8004398 <__libc_init_array+0x24>
 8004384:	4d0b      	ldr	r5, [pc, #44]	@ (80043b4 <__libc_init_array+0x40>)
 8004386:	4c0c      	ldr	r4, [pc, #48]	@ (80043b8 <__libc_init_array+0x44>)
 8004388:	f000 fd2c 	bl	8004de4 <_init>
 800438c:	1b64      	subs	r4, r4, r5
 800438e:	10a4      	asrs	r4, r4, #2
 8004390:	2600      	movs	r6, #0
 8004392:	42a6      	cmp	r6, r4
 8004394:	d105      	bne.n	80043a2 <__libc_init_array+0x2e>
 8004396:	bd70      	pop	{r4, r5, r6, pc}
 8004398:	f855 3b04 	ldr.w	r3, [r5], #4
 800439c:	4798      	blx	r3
 800439e:	3601      	adds	r6, #1
 80043a0:	e7ee      	b.n	8004380 <__libc_init_array+0xc>
 80043a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043a6:	4798      	blx	r3
 80043a8:	3601      	adds	r6, #1
 80043aa:	e7f2      	b.n	8004392 <__libc_init_array+0x1e>
 80043ac:	08005030 	.word	0x08005030
 80043b0:	08005030 	.word	0x08005030
 80043b4:	08005030 	.word	0x08005030
 80043b8:	08005034 	.word	0x08005034

080043bc <__retarget_lock_init_recursive>:
 80043bc:	4770      	bx	lr

080043be <__retarget_lock_acquire_recursive>:
 80043be:	4770      	bx	lr

080043c0 <__retarget_lock_release_recursive>:
 80043c0:	4770      	bx	lr

080043c2 <strcpy>:
 80043c2:	4603      	mov	r3, r0
 80043c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043c8:	f803 2b01 	strb.w	r2, [r3], #1
 80043cc:	2a00      	cmp	r2, #0
 80043ce:	d1f9      	bne.n	80043c4 <strcpy+0x2>
 80043d0:	4770      	bx	lr
	...

080043d4 <_free_r>:
 80043d4:	b538      	push	{r3, r4, r5, lr}
 80043d6:	4605      	mov	r5, r0
 80043d8:	2900      	cmp	r1, #0
 80043da:	d041      	beq.n	8004460 <_free_r+0x8c>
 80043dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043e0:	1f0c      	subs	r4, r1, #4
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	bfb8      	it	lt
 80043e6:	18e4      	addlt	r4, r4, r3
 80043e8:	f000 f8e0 	bl	80045ac <__malloc_lock>
 80043ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004464 <_free_r+0x90>)
 80043ee:	6813      	ldr	r3, [r2, #0]
 80043f0:	b933      	cbnz	r3, 8004400 <_free_r+0x2c>
 80043f2:	6063      	str	r3, [r4, #4]
 80043f4:	6014      	str	r4, [r2, #0]
 80043f6:	4628      	mov	r0, r5
 80043f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043fc:	f000 b8dc 	b.w	80045b8 <__malloc_unlock>
 8004400:	42a3      	cmp	r3, r4
 8004402:	d908      	bls.n	8004416 <_free_r+0x42>
 8004404:	6820      	ldr	r0, [r4, #0]
 8004406:	1821      	adds	r1, r4, r0
 8004408:	428b      	cmp	r3, r1
 800440a:	bf01      	itttt	eq
 800440c:	6819      	ldreq	r1, [r3, #0]
 800440e:	685b      	ldreq	r3, [r3, #4]
 8004410:	1809      	addeq	r1, r1, r0
 8004412:	6021      	streq	r1, [r4, #0]
 8004414:	e7ed      	b.n	80043f2 <_free_r+0x1e>
 8004416:	461a      	mov	r2, r3
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	b10b      	cbz	r3, 8004420 <_free_r+0x4c>
 800441c:	42a3      	cmp	r3, r4
 800441e:	d9fa      	bls.n	8004416 <_free_r+0x42>
 8004420:	6811      	ldr	r1, [r2, #0]
 8004422:	1850      	adds	r0, r2, r1
 8004424:	42a0      	cmp	r0, r4
 8004426:	d10b      	bne.n	8004440 <_free_r+0x6c>
 8004428:	6820      	ldr	r0, [r4, #0]
 800442a:	4401      	add	r1, r0
 800442c:	1850      	adds	r0, r2, r1
 800442e:	4283      	cmp	r3, r0
 8004430:	6011      	str	r1, [r2, #0]
 8004432:	d1e0      	bne.n	80043f6 <_free_r+0x22>
 8004434:	6818      	ldr	r0, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	6053      	str	r3, [r2, #4]
 800443a:	4408      	add	r0, r1
 800443c:	6010      	str	r0, [r2, #0]
 800443e:	e7da      	b.n	80043f6 <_free_r+0x22>
 8004440:	d902      	bls.n	8004448 <_free_r+0x74>
 8004442:	230c      	movs	r3, #12
 8004444:	602b      	str	r3, [r5, #0]
 8004446:	e7d6      	b.n	80043f6 <_free_r+0x22>
 8004448:	6820      	ldr	r0, [r4, #0]
 800444a:	1821      	adds	r1, r4, r0
 800444c:	428b      	cmp	r3, r1
 800444e:	bf04      	itt	eq
 8004450:	6819      	ldreq	r1, [r3, #0]
 8004452:	685b      	ldreq	r3, [r3, #4]
 8004454:	6063      	str	r3, [r4, #4]
 8004456:	bf04      	itt	eq
 8004458:	1809      	addeq	r1, r1, r0
 800445a:	6021      	streq	r1, [r4, #0]
 800445c:	6054      	str	r4, [r2, #4]
 800445e:	e7ca      	b.n	80043f6 <_free_r+0x22>
 8004460:	bd38      	pop	{r3, r4, r5, pc}
 8004462:	bf00      	nop
 8004464:	200002fc 	.word	0x200002fc

08004468 <sbrk_aligned>:
 8004468:	b570      	push	{r4, r5, r6, lr}
 800446a:	4e0f      	ldr	r6, [pc, #60]	@ (80044a8 <sbrk_aligned+0x40>)
 800446c:	460c      	mov	r4, r1
 800446e:	6831      	ldr	r1, [r6, #0]
 8004470:	4605      	mov	r5, r0
 8004472:	b911      	cbnz	r1, 800447a <sbrk_aligned+0x12>
 8004474:	f000 fca6 	bl	8004dc4 <_sbrk_r>
 8004478:	6030      	str	r0, [r6, #0]
 800447a:	4621      	mov	r1, r4
 800447c:	4628      	mov	r0, r5
 800447e:	f000 fca1 	bl	8004dc4 <_sbrk_r>
 8004482:	1c43      	adds	r3, r0, #1
 8004484:	d103      	bne.n	800448e <sbrk_aligned+0x26>
 8004486:	f04f 34ff 	mov.w	r4, #4294967295
 800448a:	4620      	mov	r0, r4
 800448c:	bd70      	pop	{r4, r5, r6, pc}
 800448e:	1cc4      	adds	r4, r0, #3
 8004490:	f024 0403 	bic.w	r4, r4, #3
 8004494:	42a0      	cmp	r0, r4
 8004496:	d0f8      	beq.n	800448a <sbrk_aligned+0x22>
 8004498:	1a21      	subs	r1, r4, r0
 800449a:	4628      	mov	r0, r5
 800449c:	f000 fc92 	bl	8004dc4 <_sbrk_r>
 80044a0:	3001      	adds	r0, #1
 80044a2:	d1f2      	bne.n	800448a <sbrk_aligned+0x22>
 80044a4:	e7ef      	b.n	8004486 <sbrk_aligned+0x1e>
 80044a6:	bf00      	nop
 80044a8:	200002f8 	.word	0x200002f8

080044ac <_malloc_r>:
 80044ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044b0:	1ccd      	adds	r5, r1, #3
 80044b2:	f025 0503 	bic.w	r5, r5, #3
 80044b6:	3508      	adds	r5, #8
 80044b8:	2d0c      	cmp	r5, #12
 80044ba:	bf38      	it	cc
 80044bc:	250c      	movcc	r5, #12
 80044be:	2d00      	cmp	r5, #0
 80044c0:	4606      	mov	r6, r0
 80044c2:	db01      	blt.n	80044c8 <_malloc_r+0x1c>
 80044c4:	42a9      	cmp	r1, r5
 80044c6:	d904      	bls.n	80044d2 <_malloc_r+0x26>
 80044c8:	230c      	movs	r3, #12
 80044ca:	6033      	str	r3, [r6, #0]
 80044cc:	2000      	movs	r0, #0
 80044ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80045a8 <_malloc_r+0xfc>
 80044d6:	f000 f869 	bl	80045ac <__malloc_lock>
 80044da:	f8d8 3000 	ldr.w	r3, [r8]
 80044de:	461c      	mov	r4, r3
 80044e0:	bb44      	cbnz	r4, 8004534 <_malloc_r+0x88>
 80044e2:	4629      	mov	r1, r5
 80044e4:	4630      	mov	r0, r6
 80044e6:	f7ff ffbf 	bl	8004468 <sbrk_aligned>
 80044ea:	1c43      	adds	r3, r0, #1
 80044ec:	4604      	mov	r4, r0
 80044ee:	d158      	bne.n	80045a2 <_malloc_r+0xf6>
 80044f0:	f8d8 4000 	ldr.w	r4, [r8]
 80044f4:	4627      	mov	r7, r4
 80044f6:	2f00      	cmp	r7, #0
 80044f8:	d143      	bne.n	8004582 <_malloc_r+0xd6>
 80044fa:	2c00      	cmp	r4, #0
 80044fc:	d04b      	beq.n	8004596 <_malloc_r+0xea>
 80044fe:	6823      	ldr	r3, [r4, #0]
 8004500:	4639      	mov	r1, r7
 8004502:	4630      	mov	r0, r6
 8004504:	eb04 0903 	add.w	r9, r4, r3
 8004508:	f000 fc5c 	bl	8004dc4 <_sbrk_r>
 800450c:	4581      	cmp	r9, r0
 800450e:	d142      	bne.n	8004596 <_malloc_r+0xea>
 8004510:	6821      	ldr	r1, [r4, #0]
 8004512:	1a6d      	subs	r5, r5, r1
 8004514:	4629      	mov	r1, r5
 8004516:	4630      	mov	r0, r6
 8004518:	f7ff ffa6 	bl	8004468 <sbrk_aligned>
 800451c:	3001      	adds	r0, #1
 800451e:	d03a      	beq.n	8004596 <_malloc_r+0xea>
 8004520:	6823      	ldr	r3, [r4, #0]
 8004522:	442b      	add	r3, r5
 8004524:	6023      	str	r3, [r4, #0]
 8004526:	f8d8 3000 	ldr.w	r3, [r8]
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	bb62      	cbnz	r2, 8004588 <_malloc_r+0xdc>
 800452e:	f8c8 7000 	str.w	r7, [r8]
 8004532:	e00f      	b.n	8004554 <_malloc_r+0xa8>
 8004534:	6822      	ldr	r2, [r4, #0]
 8004536:	1b52      	subs	r2, r2, r5
 8004538:	d420      	bmi.n	800457c <_malloc_r+0xd0>
 800453a:	2a0b      	cmp	r2, #11
 800453c:	d917      	bls.n	800456e <_malloc_r+0xc2>
 800453e:	1961      	adds	r1, r4, r5
 8004540:	42a3      	cmp	r3, r4
 8004542:	6025      	str	r5, [r4, #0]
 8004544:	bf18      	it	ne
 8004546:	6059      	strne	r1, [r3, #4]
 8004548:	6863      	ldr	r3, [r4, #4]
 800454a:	bf08      	it	eq
 800454c:	f8c8 1000 	streq.w	r1, [r8]
 8004550:	5162      	str	r2, [r4, r5]
 8004552:	604b      	str	r3, [r1, #4]
 8004554:	4630      	mov	r0, r6
 8004556:	f000 f82f 	bl	80045b8 <__malloc_unlock>
 800455a:	f104 000b 	add.w	r0, r4, #11
 800455e:	1d23      	adds	r3, r4, #4
 8004560:	f020 0007 	bic.w	r0, r0, #7
 8004564:	1ac2      	subs	r2, r0, r3
 8004566:	bf1c      	itt	ne
 8004568:	1a1b      	subne	r3, r3, r0
 800456a:	50a3      	strne	r3, [r4, r2]
 800456c:	e7af      	b.n	80044ce <_malloc_r+0x22>
 800456e:	6862      	ldr	r2, [r4, #4]
 8004570:	42a3      	cmp	r3, r4
 8004572:	bf0c      	ite	eq
 8004574:	f8c8 2000 	streq.w	r2, [r8]
 8004578:	605a      	strne	r2, [r3, #4]
 800457a:	e7eb      	b.n	8004554 <_malloc_r+0xa8>
 800457c:	4623      	mov	r3, r4
 800457e:	6864      	ldr	r4, [r4, #4]
 8004580:	e7ae      	b.n	80044e0 <_malloc_r+0x34>
 8004582:	463c      	mov	r4, r7
 8004584:	687f      	ldr	r7, [r7, #4]
 8004586:	e7b6      	b.n	80044f6 <_malloc_r+0x4a>
 8004588:	461a      	mov	r2, r3
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	42a3      	cmp	r3, r4
 800458e:	d1fb      	bne.n	8004588 <_malloc_r+0xdc>
 8004590:	2300      	movs	r3, #0
 8004592:	6053      	str	r3, [r2, #4]
 8004594:	e7de      	b.n	8004554 <_malloc_r+0xa8>
 8004596:	230c      	movs	r3, #12
 8004598:	6033      	str	r3, [r6, #0]
 800459a:	4630      	mov	r0, r6
 800459c:	f000 f80c 	bl	80045b8 <__malloc_unlock>
 80045a0:	e794      	b.n	80044cc <_malloc_r+0x20>
 80045a2:	6005      	str	r5, [r0, #0]
 80045a4:	e7d6      	b.n	8004554 <_malloc_r+0xa8>
 80045a6:	bf00      	nop
 80045a8:	200002fc 	.word	0x200002fc

080045ac <__malloc_lock>:
 80045ac:	4801      	ldr	r0, [pc, #4]	@ (80045b4 <__malloc_lock+0x8>)
 80045ae:	f7ff bf06 	b.w	80043be <__retarget_lock_acquire_recursive>
 80045b2:	bf00      	nop
 80045b4:	200002f4 	.word	0x200002f4

080045b8 <__malloc_unlock>:
 80045b8:	4801      	ldr	r0, [pc, #4]	@ (80045c0 <__malloc_unlock+0x8>)
 80045ba:	f7ff bf01 	b.w	80043c0 <__retarget_lock_release_recursive>
 80045be:	bf00      	nop
 80045c0:	200002f4 	.word	0x200002f4

080045c4 <__sfputc_r>:
 80045c4:	6893      	ldr	r3, [r2, #8]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	b410      	push	{r4}
 80045cc:	6093      	str	r3, [r2, #8]
 80045ce:	da08      	bge.n	80045e2 <__sfputc_r+0x1e>
 80045d0:	6994      	ldr	r4, [r2, #24]
 80045d2:	42a3      	cmp	r3, r4
 80045d4:	db01      	blt.n	80045da <__sfputc_r+0x16>
 80045d6:	290a      	cmp	r1, #10
 80045d8:	d103      	bne.n	80045e2 <__sfputc_r+0x1e>
 80045da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045de:	f7ff bde0 	b.w	80041a2 <__swbuf_r>
 80045e2:	6813      	ldr	r3, [r2, #0]
 80045e4:	1c58      	adds	r0, r3, #1
 80045e6:	6010      	str	r0, [r2, #0]
 80045e8:	7019      	strb	r1, [r3, #0]
 80045ea:	4608      	mov	r0, r1
 80045ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <__sfputs_r>:
 80045f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f4:	4606      	mov	r6, r0
 80045f6:	460f      	mov	r7, r1
 80045f8:	4614      	mov	r4, r2
 80045fa:	18d5      	adds	r5, r2, r3
 80045fc:	42ac      	cmp	r4, r5
 80045fe:	d101      	bne.n	8004604 <__sfputs_r+0x12>
 8004600:	2000      	movs	r0, #0
 8004602:	e007      	b.n	8004614 <__sfputs_r+0x22>
 8004604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004608:	463a      	mov	r2, r7
 800460a:	4630      	mov	r0, r6
 800460c:	f7ff ffda 	bl	80045c4 <__sfputc_r>
 8004610:	1c43      	adds	r3, r0, #1
 8004612:	d1f3      	bne.n	80045fc <__sfputs_r+0xa>
 8004614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004618 <_vfiprintf_r>:
 8004618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800461c:	460d      	mov	r5, r1
 800461e:	b09d      	sub	sp, #116	@ 0x74
 8004620:	4614      	mov	r4, r2
 8004622:	4698      	mov	r8, r3
 8004624:	4606      	mov	r6, r0
 8004626:	b118      	cbz	r0, 8004630 <_vfiprintf_r+0x18>
 8004628:	6a03      	ldr	r3, [r0, #32]
 800462a:	b90b      	cbnz	r3, 8004630 <_vfiprintf_r+0x18>
 800462c:	f7ff fcd0 	bl	8003fd0 <__sinit>
 8004630:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004632:	07d9      	lsls	r1, r3, #31
 8004634:	d405      	bmi.n	8004642 <_vfiprintf_r+0x2a>
 8004636:	89ab      	ldrh	r3, [r5, #12]
 8004638:	059a      	lsls	r2, r3, #22
 800463a:	d402      	bmi.n	8004642 <_vfiprintf_r+0x2a>
 800463c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800463e:	f7ff febe 	bl	80043be <__retarget_lock_acquire_recursive>
 8004642:	89ab      	ldrh	r3, [r5, #12]
 8004644:	071b      	lsls	r3, r3, #28
 8004646:	d501      	bpl.n	800464c <_vfiprintf_r+0x34>
 8004648:	692b      	ldr	r3, [r5, #16]
 800464a:	b99b      	cbnz	r3, 8004674 <_vfiprintf_r+0x5c>
 800464c:	4629      	mov	r1, r5
 800464e:	4630      	mov	r0, r6
 8004650:	f7ff fde6 	bl	8004220 <__swsetup_r>
 8004654:	b170      	cbz	r0, 8004674 <_vfiprintf_r+0x5c>
 8004656:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004658:	07dc      	lsls	r4, r3, #31
 800465a:	d504      	bpl.n	8004666 <_vfiprintf_r+0x4e>
 800465c:	f04f 30ff 	mov.w	r0, #4294967295
 8004660:	b01d      	add	sp, #116	@ 0x74
 8004662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004666:	89ab      	ldrh	r3, [r5, #12]
 8004668:	0598      	lsls	r0, r3, #22
 800466a:	d4f7      	bmi.n	800465c <_vfiprintf_r+0x44>
 800466c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800466e:	f7ff fea7 	bl	80043c0 <__retarget_lock_release_recursive>
 8004672:	e7f3      	b.n	800465c <_vfiprintf_r+0x44>
 8004674:	2300      	movs	r3, #0
 8004676:	9309      	str	r3, [sp, #36]	@ 0x24
 8004678:	2320      	movs	r3, #32
 800467a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800467e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004682:	2330      	movs	r3, #48	@ 0x30
 8004684:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004834 <_vfiprintf_r+0x21c>
 8004688:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800468c:	f04f 0901 	mov.w	r9, #1
 8004690:	4623      	mov	r3, r4
 8004692:	469a      	mov	sl, r3
 8004694:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004698:	b10a      	cbz	r2, 800469e <_vfiprintf_r+0x86>
 800469a:	2a25      	cmp	r2, #37	@ 0x25
 800469c:	d1f9      	bne.n	8004692 <_vfiprintf_r+0x7a>
 800469e:	ebba 0b04 	subs.w	fp, sl, r4
 80046a2:	d00b      	beq.n	80046bc <_vfiprintf_r+0xa4>
 80046a4:	465b      	mov	r3, fp
 80046a6:	4622      	mov	r2, r4
 80046a8:	4629      	mov	r1, r5
 80046aa:	4630      	mov	r0, r6
 80046ac:	f7ff ffa1 	bl	80045f2 <__sfputs_r>
 80046b0:	3001      	adds	r0, #1
 80046b2:	f000 80a7 	beq.w	8004804 <_vfiprintf_r+0x1ec>
 80046b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80046b8:	445a      	add	r2, fp
 80046ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80046bc:	f89a 3000 	ldrb.w	r3, [sl]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 809f 	beq.w	8004804 <_vfiprintf_r+0x1ec>
 80046c6:	2300      	movs	r3, #0
 80046c8:	f04f 32ff 	mov.w	r2, #4294967295
 80046cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046d0:	f10a 0a01 	add.w	sl, sl, #1
 80046d4:	9304      	str	r3, [sp, #16]
 80046d6:	9307      	str	r3, [sp, #28]
 80046d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80046dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80046de:	4654      	mov	r4, sl
 80046e0:	2205      	movs	r2, #5
 80046e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046e6:	4853      	ldr	r0, [pc, #332]	@ (8004834 <_vfiprintf_r+0x21c>)
 80046e8:	f7fb fd7a 	bl	80001e0 <memchr>
 80046ec:	9a04      	ldr	r2, [sp, #16]
 80046ee:	b9d8      	cbnz	r0, 8004728 <_vfiprintf_r+0x110>
 80046f0:	06d1      	lsls	r1, r2, #27
 80046f2:	bf44      	itt	mi
 80046f4:	2320      	movmi	r3, #32
 80046f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046fa:	0713      	lsls	r3, r2, #28
 80046fc:	bf44      	itt	mi
 80046fe:	232b      	movmi	r3, #43	@ 0x2b
 8004700:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004704:	f89a 3000 	ldrb.w	r3, [sl]
 8004708:	2b2a      	cmp	r3, #42	@ 0x2a
 800470a:	d015      	beq.n	8004738 <_vfiprintf_r+0x120>
 800470c:	9a07      	ldr	r2, [sp, #28]
 800470e:	4654      	mov	r4, sl
 8004710:	2000      	movs	r0, #0
 8004712:	f04f 0c0a 	mov.w	ip, #10
 8004716:	4621      	mov	r1, r4
 8004718:	f811 3b01 	ldrb.w	r3, [r1], #1
 800471c:	3b30      	subs	r3, #48	@ 0x30
 800471e:	2b09      	cmp	r3, #9
 8004720:	d94b      	bls.n	80047ba <_vfiprintf_r+0x1a2>
 8004722:	b1b0      	cbz	r0, 8004752 <_vfiprintf_r+0x13a>
 8004724:	9207      	str	r2, [sp, #28]
 8004726:	e014      	b.n	8004752 <_vfiprintf_r+0x13a>
 8004728:	eba0 0308 	sub.w	r3, r0, r8
 800472c:	fa09 f303 	lsl.w	r3, r9, r3
 8004730:	4313      	orrs	r3, r2
 8004732:	9304      	str	r3, [sp, #16]
 8004734:	46a2      	mov	sl, r4
 8004736:	e7d2      	b.n	80046de <_vfiprintf_r+0xc6>
 8004738:	9b03      	ldr	r3, [sp, #12]
 800473a:	1d19      	adds	r1, r3, #4
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	9103      	str	r1, [sp, #12]
 8004740:	2b00      	cmp	r3, #0
 8004742:	bfbb      	ittet	lt
 8004744:	425b      	neglt	r3, r3
 8004746:	f042 0202 	orrlt.w	r2, r2, #2
 800474a:	9307      	strge	r3, [sp, #28]
 800474c:	9307      	strlt	r3, [sp, #28]
 800474e:	bfb8      	it	lt
 8004750:	9204      	strlt	r2, [sp, #16]
 8004752:	7823      	ldrb	r3, [r4, #0]
 8004754:	2b2e      	cmp	r3, #46	@ 0x2e
 8004756:	d10a      	bne.n	800476e <_vfiprintf_r+0x156>
 8004758:	7863      	ldrb	r3, [r4, #1]
 800475a:	2b2a      	cmp	r3, #42	@ 0x2a
 800475c:	d132      	bne.n	80047c4 <_vfiprintf_r+0x1ac>
 800475e:	9b03      	ldr	r3, [sp, #12]
 8004760:	1d1a      	adds	r2, r3, #4
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	9203      	str	r2, [sp, #12]
 8004766:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800476a:	3402      	adds	r4, #2
 800476c:	9305      	str	r3, [sp, #20]
 800476e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004844 <_vfiprintf_r+0x22c>
 8004772:	7821      	ldrb	r1, [r4, #0]
 8004774:	2203      	movs	r2, #3
 8004776:	4650      	mov	r0, sl
 8004778:	f7fb fd32 	bl	80001e0 <memchr>
 800477c:	b138      	cbz	r0, 800478e <_vfiprintf_r+0x176>
 800477e:	9b04      	ldr	r3, [sp, #16]
 8004780:	eba0 000a 	sub.w	r0, r0, sl
 8004784:	2240      	movs	r2, #64	@ 0x40
 8004786:	4082      	lsls	r2, r0
 8004788:	4313      	orrs	r3, r2
 800478a:	3401      	adds	r4, #1
 800478c:	9304      	str	r3, [sp, #16]
 800478e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004792:	4829      	ldr	r0, [pc, #164]	@ (8004838 <_vfiprintf_r+0x220>)
 8004794:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004798:	2206      	movs	r2, #6
 800479a:	f7fb fd21 	bl	80001e0 <memchr>
 800479e:	2800      	cmp	r0, #0
 80047a0:	d03f      	beq.n	8004822 <_vfiprintf_r+0x20a>
 80047a2:	4b26      	ldr	r3, [pc, #152]	@ (800483c <_vfiprintf_r+0x224>)
 80047a4:	bb1b      	cbnz	r3, 80047ee <_vfiprintf_r+0x1d6>
 80047a6:	9b03      	ldr	r3, [sp, #12]
 80047a8:	3307      	adds	r3, #7
 80047aa:	f023 0307 	bic.w	r3, r3, #7
 80047ae:	3308      	adds	r3, #8
 80047b0:	9303      	str	r3, [sp, #12]
 80047b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047b4:	443b      	add	r3, r7
 80047b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80047b8:	e76a      	b.n	8004690 <_vfiprintf_r+0x78>
 80047ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80047be:	460c      	mov	r4, r1
 80047c0:	2001      	movs	r0, #1
 80047c2:	e7a8      	b.n	8004716 <_vfiprintf_r+0xfe>
 80047c4:	2300      	movs	r3, #0
 80047c6:	3401      	adds	r4, #1
 80047c8:	9305      	str	r3, [sp, #20]
 80047ca:	4619      	mov	r1, r3
 80047cc:	f04f 0c0a 	mov.w	ip, #10
 80047d0:	4620      	mov	r0, r4
 80047d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047d6:	3a30      	subs	r2, #48	@ 0x30
 80047d8:	2a09      	cmp	r2, #9
 80047da:	d903      	bls.n	80047e4 <_vfiprintf_r+0x1cc>
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d0c6      	beq.n	800476e <_vfiprintf_r+0x156>
 80047e0:	9105      	str	r1, [sp, #20]
 80047e2:	e7c4      	b.n	800476e <_vfiprintf_r+0x156>
 80047e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80047e8:	4604      	mov	r4, r0
 80047ea:	2301      	movs	r3, #1
 80047ec:	e7f0      	b.n	80047d0 <_vfiprintf_r+0x1b8>
 80047ee:	ab03      	add	r3, sp, #12
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	462a      	mov	r2, r5
 80047f4:	4b12      	ldr	r3, [pc, #72]	@ (8004840 <_vfiprintf_r+0x228>)
 80047f6:	a904      	add	r1, sp, #16
 80047f8:	4630      	mov	r0, r6
 80047fa:	f3af 8000 	nop.w
 80047fe:	4607      	mov	r7, r0
 8004800:	1c78      	adds	r0, r7, #1
 8004802:	d1d6      	bne.n	80047b2 <_vfiprintf_r+0x19a>
 8004804:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004806:	07d9      	lsls	r1, r3, #31
 8004808:	d405      	bmi.n	8004816 <_vfiprintf_r+0x1fe>
 800480a:	89ab      	ldrh	r3, [r5, #12]
 800480c:	059a      	lsls	r2, r3, #22
 800480e:	d402      	bmi.n	8004816 <_vfiprintf_r+0x1fe>
 8004810:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004812:	f7ff fdd5 	bl	80043c0 <__retarget_lock_release_recursive>
 8004816:	89ab      	ldrh	r3, [r5, #12]
 8004818:	065b      	lsls	r3, r3, #25
 800481a:	f53f af1f 	bmi.w	800465c <_vfiprintf_r+0x44>
 800481e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004820:	e71e      	b.n	8004660 <_vfiprintf_r+0x48>
 8004822:	ab03      	add	r3, sp, #12
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	462a      	mov	r2, r5
 8004828:	4b05      	ldr	r3, [pc, #20]	@ (8004840 <_vfiprintf_r+0x228>)
 800482a:	a904      	add	r1, sp, #16
 800482c:	4630      	mov	r0, r6
 800482e:	f000 f879 	bl	8004924 <_printf_i>
 8004832:	e7e4      	b.n	80047fe <_vfiprintf_r+0x1e6>
 8004834:	08004ff4 	.word	0x08004ff4
 8004838:	08004ffe 	.word	0x08004ffe
 800483c:	00000000 	.word	0x00000000
 8004840:	080045f3 	.word	0x080045f3
 8004844:	08004ffa 	.word	0x08004ffa

08004848 <_printf_common>:
 8004848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800484c:	4616      	mov	r6, r2
 800484e:	4698      	mov	r8, r3
 8004850:	688a      	ldr	r2, [r1, #8]
 8004852:	690b      	ldr	r3, [r1, #16]
 8004854:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004858:	4293      	cmp	r3, r2
 800485a:	bfb8      	it	lt
 800485c:	4613      	movlt	r3, r2
 800485e:	6033      	str	r3, [r6, #0]
 8004860:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004864:	4607      	mov	r7, r0
 8004866:	460c      	mov	r4, r1
 8004868:	b10a      	cbz	r2, 800486e <_printf_common+0x26>
 800486a:	3301      	adds	r3, #1
 800486c:	6033      	str	r3, [r6, #0]
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	0699      	lsls	r1, r3, #26
 8004872:	bf42      	ittt	mi
 8004874:	6833      	ldrmi	r3, [r6, #0]
 8004876:	3302      	addmi	r3, #2
 8004878:	6033      	strmi	r3, [r6, #0]
 800487a:	6825      	ldr	r5, [r4, #0]
 800487c:	f015 0506 	ands.w	r5, r5, #6
 8004880:	d106      	bne.n	8004890 <_printf_common+0x48>
 8004882:	f104 0a19 	add.w	sl, r4, #25
 8004886:	68e3      	ldr	r3, [r4, #12]
 8004888:	6832      	ldr	r2, [r6, #0]
 800488a:	1a9b      	subs	r3, r3, r2
 800488c:	42ab      	cmp	r3, r5
 800488e:	dc26      	bgt.n	80048de <_printf_common+0x96>
 8004890:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004894:	6822      	ldr	r2, [r4, #0]
 8004896:	3b00      	subs	r3, #0
 8004898:	bf18      	it	ne
 800489a:	2301      	movne	r3, #1
 800489c:	0692      	lsls	r2, r2, #26
 800489e:	d42b      	bmi.n	80048f8 <_printf_common+0xb0>
 80048a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80048a4:	4641      	mov	r1, r8
 80048a6:	4638      	mov	r0, r7
 80048a8:	47c8      	blx	r9
 80048aa:	3001      	adds	r0, #1
 80048ac:	d01e      	beq.n	80048ec <_printf_common+0xa4>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	6922      	ldr	r2, [r4, #16]
 80048b2:	f003 0306 	and.w	r3, r3, #6
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	bf02      	ittt	eq
 80048ba:	68e5      	ldreq	r5, [r4, #12]
 80048bc:	6833      	ldreq	r3, [r6, #0]
 80048be:	1aed      	subeq	r5, r5, r3
 80048c0:	68a3      	ldr	r3, [r4, #8]
 80048c2:	bf0c      	ite	eq
 80048c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048c8:	2500      	movne	r5, #0
 80048ca:	4293      	cmp	r3, r2
 80048cc:	bfc4      	itt	gt
 80048ce:	1a9b      	subgt	r3, r3, r2
 80048d0:	18ed      	addgt	r5, r5, r3
 80048d2:	2600      	movs	r6, #0
 80048d4:	341a      	adds	r4, #26
 80048d6:	42b5      	cmp	r5, r6
 80048d8:	d11a      	bne.n	8004910 <_printf_common+0xc8>
 80048da:	2000      	movs	r0, #0
 80048dc:	e008      	b.n	80048f0 <_printf_common+0xa8>
 80048de:	2301      	movs	r3, #1
 80048e0:	4652      	mov	r2, sl
 80048e2:	4641      	mov	r1, r8
 80048e4:	4638      	mov	r0, r7
 80048e6:	47c8      	blx	r9
 80048e8:	3001      	adds	r0, #1
 80048ea:	d103      	bne.n	80048f4 <_printf_common+0xac>
 80048ec:	f04f 30ff 	mov.w	r0, #4294967295
 80048f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f4:	3501      	adds	r5, #1
 80048f6:	e7c6      	b.n	8004886 <_printf_common+0x3e>
 80048f8:	18e1      	adds	r1, r4, r3
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	2030      	movs	r0, #48	@ 0x30
 80048fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004902:	4422      	add	r2, r4
 8004904:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004908:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800490c:	3302      	adds	r3, #2
 800490e:	e7c7      	b.n	80048a0 <_printf_common+0x58>
 8004910:	2301      	movs	r3, #1
 8004912:	4622      	mov	r2, r4
 8004914:	4641      	mov	r1, r8
 8004916:	4638      	mov	r0, r7
 8004918:	47c8      	blx	r9
 800491a:	3001      	adds	r0, #1
 800491c:	d0e6      	beq.n	80048ec <_printf_common+0xa4>
 800491e:	3601      	adds	r6, #1
 8004920:	e7d9      	b.n	80048d6 <_printf_common+0x8e>
	...

08004924 <_printf_i>:
 8004924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004928:	7e0f      	ldrb	r7, [r1, #24]
 800492a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800492c:	2f78      	cmp	r7, #120	@ 0x78
 800492e:	4691      	mov	r9, r2
 8004930:	4680      	mov	r8, r0
 8004932:	460c      	mov	r4, r1
 8004934:	469a      	mov	sl, r3
 8004936:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800493a:	d807      	bhi.n	800494c <_printf_i+0x28>
 800493c:	2f62      	cmp	r7, #98	@ 0x62
 800493e:	d80a      	bhi.n	8004956 <_printf_i+0x32>
 8004940:	2f00      	cmp	r7, #0
 8004942:	f000 80d2 	beq.w	8004aea <_printf_i+0x1c6>
 8004946:	2f58      	cmp	r7, #88	@ 0x58
 8004948:	f000 80b9 	beq.w	8004abe <_printf_i+0x19a>
 800494c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004950:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004954:	e03a      	b.n	80049cc <_printf_i+0xa8>
 8004956:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800495a:	2b15      	cmp	r3, #21
 800495c:	d8f6      	bhi.n	800494c <_printf_i+0x28>
 800495e:	a101      	add	r1, pc, #4	@ (adr r1, 8004964 <_printf_i+0x40>)
 8004960:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004964:	080049bd 	.word	0x080049bd
 8004968:	080049d1 	.word	0x080049d1
 800496c:	0800494d 	.word	0x0800494d
 8004970:	0800494d 	.word	0x0800494d
 8004974:	0800494d 	.word	0x0800494d
 8004978:	0800494d 	.word	0x0800494d
 800497c:	080049d1 	.word	0x080049d1
 8004980:	0800494d 	.word	0x0800494d
 8004984:	0800494d 	.word	0x0800494d
 8004988:	0800494d 	.word	0x0800494d
 800498c:	0800494d 	.word	0x0800494d
 8004990:	08004ad1 	.word	0x08004ad1
 8004994:	080049fb 	.word	0x080049fb
 8004998:	08004a8b 	.word	0x08004a8b
 800499c:	0800494d 	.word	0x0800494d
 80049a0:	0800494d 	.word	0x0800494d
 80049a4:	08004af3 	.word	0x08004af3
 80049a8:	0800494d 	.word	0x0800494d
 80049ac:	080049fb 	.word	0x080049fb
 80049b0:	0800494d 	.word	0x0800494d
 80049b4:	0800494d 	.word	0x0800494d
 80049b8:	08004a93 	.word	0x08004a93
 80049bc:	6833      	ldr	r3, [r6, #0]
 80049be:	1d1a      	adds	r2, r3, #4
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6032      	str	r2, [r6, #0]
 80049c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80049cc:	2301      	movs	r3, #1
 80049ce:	e09d      	b.n	8004b0c <_printf_i+0x1e8>
 80049d0:	6833      	ldr	r3, [r6, #0]
 80049d2:	6820      	ldr	r0, [r4, #0]
 80049d4:	1d19      	adds	r1, r3, #4
 80049d6:	6031      	str	r1, [r6, #0]
 80049d8:	0606      	lsls	r6, r0, #24
 80049da:	d501      	bpl.n	80049e0 <_printf_i+0xbc>
 80049dc:	681d      	ldr	r5, [r3, #0]
 80049de:	e003      	b.n	80049e8 <_printf_i+0xc4>
 80049e0:	0645      	lsls	r5, r0, #25
 80049e2:	d5fb      	bpl.n	80049dc <_printf_i+0xb8>
 80049e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80049e8:	2d00      	cmp	r5, #0
 80049ea:	da03      	bge.n	80049f4 <_printf_i+0xd0>
 80049ec:	232d      	movs	r3, #45	@ 0x2d
 80049ee:	426d      	negs	r5, r5
 80049f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049f4:	4859      	ldr	r0, [pc, #356]	@ (8004b5c <_printf_i+0x238>)
 80049f6:	230a      	movs	r3, #10
 80049f8:	e011      	b.n	8004a1e <_printf_i+0xfa>
 80049fa:	6821      	ldr	r1, [r4, #0]
 80049fc:	6833      	ldr	r3, [r6, #0]
 80049fe:	0608      	lsls	r0, r1, #24
 8004a00:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a04:	d402      	bmi.n	8004a0c <_printf_i+0xe8>
 8004a06:	0649      	lsls	r1, r1, #25
 8004a08:	bf48      	it	mi
 8004a0a:	b2ad      	uxthmi	r5, r5
 8004a0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a0e:	4853      	ldr	r0, [pc, #332]	@ (8004b5c <_printf_i+0x238>)
 8004a10:	6033      	str	r3, [r6, #0]
 8004a12:	bf14      	ite	ne
 8004a14:	230a      	movne	r3, #10
 8004a16:	2308      	moveq	r3, #8
 8004a18:	2100      	movs	r1, #0
 8004a1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a1e:	6866      	ldr	r6, [r4, #4]
 8004a20:	60a6      	str	r6, [r4, #8]
 8004a22:	2e00      	cmp	r6, #0
 8004a24:	bfa2      	ittt	ge
 8004a26:	6821      	ldrge	r1, [r4, #0]
 8004a28:	f021 0104 	bicge.w	r1, r1, #4
 8004a2c:	6021      	strge	r1, [r4, #0]
 8004a2e:	b90d      	cbnz	r5, 8004a34 <_printf_i+0x110>
 8004a30:	2e00      	cmp	r6, #0
 8004a32:	d04b      	beq.n	8004acc <_printf_i+0x1a8>
 8004a34:	4616      	mov	r6, r2
 8004a36:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a3a:	fb03 5711 	mls	r7, r3, r1, r5
 8004a3e:	5dc7      	ldrb	r7, [r0, r7]
 8004a40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a44:	462f      	mov	r7, r5
 8004a46:	42bb      	cmp	r3, r7
 8004a48:	460d      	mov	r5, r1
 8004a4a:	d9f4      	bls.n	8004a36 <_printf_i+0x112>
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d10b      	bne.n	8004a68 <_printf_i+0x144>
 8004a50:	6823      	ldr	r3, [r4, #0]
 8004a52:	07df      	lsls	r7, r3, #31
 8004a54:	d508      	bpl.n	8004a68 <_printf_i+0x144>
 8004a56:	6923      	ldr	r3, [r4, #16]
 8004a58:	6861      	ldr	r1, [r4, #4]
 8004a5a:	4299      	cmp	r1, r3
 8004a5c:	bfde      	ittt	le
 8004a5e:	2330      	movle	r3, #48	@ 0x30
 8004a60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a68:	1b92      	subs	r2, r2, r6
 8004a6a:	6122      	str	r2, [r4, #16]
 8004a6c:	f8cd a000 	str.w	sl, [sp]
 8004a70:	464b      	mov	r3, r9
 8004a72:	aa03      	add	r2, sp, #12
 8004a74:	4621      	mov	r1, r4
 8004a76:	4640      	mov	r0, r8
 8004a78:	f7ff fee6 	bl	8004848 <_printf_common>
 8004a7c:	3001      	adds	r0, #1
 8004a7e:	d14a      	bne.n	8004b16 <_printf_i+0x1f2>
 8004a80:	f04f 30ff 	mov.w	r0, #4294967295
 8004a84:	b004      	add	sp, #16
 8004a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	f043 0320 	orr.w	r3, r3, #32
 8004a90:	6023      	str	r3, [r4, #0]
 8004a92:	4833      	ldr	r0, [pc, #204]	@ (8004b60 <_printf_i+0x23c>)
 8004a94:	2778      	movs	r7, #120	@ 0x78
 8004a96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	6831      	ldr	r1, [r6, #0]
 8004a9e:	061f      	lsls	r7, r3, #24
 8004aa0:	f851 5b04 	ldr.w	r5, [r1], #4
 8004aa4:	d402      	bmi.n	8004aac <_printf_i+0x188>
 8004aa6:	065f      	lsls	r7, r3, #25
 8004aa8:	bf48      	it	mi
 8004aaa:	b2ad      	uxthmi	r5, r5
 8004aac:	6031      	str	r1, [r6, #0]
 8004aae:	07d9      	lsls	r1, r3, #31
 8004ab0:	bf44      	itt	mi
 8004ab2:	f043 0320 	orrmi.w	r3, r3, #32
 8004ab6:	6023      	strmi	r3, [r4, #0]
 8004ab8:	b11d      	cbz	r5, 8004ac2 <_printf_i+0x19e>
 8004aba:	2310      	movs	r3, #16
 8004abc:	e7ac      	b.n	8004a18 <_printf_i+0xf4>
 8004abe:	4827      	ldr	r0, [pc, #156]	@ (8004b5c <_printf_i+0x238>)
 8004ac0:	e7e9      	b.n	8004a96 <_printf_i+0x172>
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	f023 0320 	bic.w	r3, r3, #32
 8004ac8:	6023      	str	r3, [r4, #0]
 8004aca:	e7f6      	b.n	8004aba <_printf_i+0x196>
 8004acc:	4616      	mov	r6, r2
 8004ace:	e7bd      	b.n	8004a4c <_printf_i+0x128>
 8004ad0:	6833      	ldr	r3, [r6, #0]
 8004ad2:	6825      	ldr	r5, [r4, #0]
 8004ad4:	6961      	ldr	r1, [r4, #20]
 8004ad6:	1d18      	adds	r0, r3, #4
 8004ad8:	6030      	str	r0, [r6, #0]
 8004ada:	062e      	lsls	r6, r5, #24
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	d501      	bpl.n	8004ae4 <_printf_i+0x1c0>
 8004ae0:	6019      	str	r1, [r3, #0]
 8004ae2:	e002      	b.n	8004aea <_printf_i+0x1c6>
 8004ae4:	0668      	lsls	r0, r5, #25
 8004ae6:	d5fb      	bpl.n	8004ae0 <_printf_i+0x1bc>
 8004ae8:	8019      	strh	r1, [r3, #0]
 8004aea:	2300      	movs	r3, #0
 8004aec:	6123      	str	r3, [r4, #16]
 8004aee:	4616      	mov	r6, r2
 8004af0:	e7bc      	b.n	8004a6c <_printf_i+0x148>
 8004af2:	6833      	ldr	r3, [r6, #0]
 8004af4:	1d1a      	adds	r2, r3, #4
 8004af6:	6032      	str	r2, [r6, #0]
 8004af8:	681e      	ldr	r6, [r3, #0]
 8004afa:	6862      	ldr	r2, [r4, #4]
 8004afc:	2100      	movs	r1, #0
 8004afe:	4630      	mov	r0, r6
 8004b00:	f7fb fb6e 	bl	80001e0 <memchr>
 8004b04:	b108      	cbz	r0, 8004b0a <_printf_i+0x1e6>
 8004b06:	1b80      	subs	r0, r0, r6
 8004b08:	6060      	str	r0, [r4, #4]
 8004b0a:	6863      	ldr	r3, [r4, #4]
 8004b0c:	6123      	str	r3, [r4, #16]
 8004b0e:	2300      	movs	r3, #0
 8004b10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b14:	e7aa      	b.n	8004a6c <_printf_i+0x148>
 8004b16:	6923      	ldr	r3, [r4, #16]
 8004b18:	4632      	mov	r2, r6
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	4640      	mov	r0, r8
 8004b1e:	47d0      	blx	sl
 8004b20:	3001      	adds	r0, #1
 8004b22:	d0ad      	beq.n	8004a80 <_printf_i+0x15c>
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	079b      	lsls	r3, r3, #30
 8004b28:	d413      	bmi.n	8004b52 <_printf_i+0x22e>
 8004b2a:	68e0      	ldr	r0, [r4, #12]
 8004b2c:	9b03      	ldr	r3, [sp, #12]
 8004b2e:	4298      	cmp	r0, r3
 8004b30:	bfb8      	it	lt
 8004b32:	4618      	movlt	r0, r3
 8004b34:	e7a6      	b.n	8004a84 <_printf_i+0x160>
 8004b36:	2301      	movs	r3, #1
 8004b38:	4632      	mov	r2, r6
 8004b3a:	4649      	mov	r1, r9
 8004b3c:	4640      	mov	r0, r8
 8004b3e:	47d0      	blx	sl
 8004b40:	3001      	adds	r0, #1
 8004b42:	d09d      	beq.n	8004a80 <_printf_i+0x15c>
 8004b44:	3501      	adds	r5, #1
 8004b46:	68e3      	ldr	r3, [r4, #12]
 8004b48:	9903      	ldr	r1, [sp, #12]
 8004b4a:	1a5b      	subs	r3, r3, r1
 8004b4c:	42ab      	cmp	r3, r5
 8004b4e:	dcf2      	bgt.n	8004b36 <_printf_i+0x212>
 8004b50:	e7eb      	b.n	8004b2a <_printf_i+0x206>
 8004b52:	2500      	movs	r5, #0
 8004b54:	f104 0619 	add.w	r6, r4, #25
 8004b58:	e7f5      	b.n	8004b46 <_printf_i+0x222>
 8004b5a:	bf00      	nop
 8004b5c:	08005005 	.word	0x08005005
 8004b60:	08005016 	.word	0x08005016

08004b64 <__sflush_r>:
 8004b64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b6c:	0716      	lsls	r6, r2, #28
 8004b6e:	4605      	mov	r5, r0
 8004b70:	460c      	mov	r4, r1
 8004b72:	d454      	bmi.n	8004c1e <__sflush_r+0xba>
 8004b74:	684b      	ldr	r3, [r1, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	dc02      	bgt.n	8004b80 <__sflush_r+0x1c>
 8004b7a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	dd48      	ble.n	8004c12 <__sflush_r+0xae>
 8004b80:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004b82:	2e00      	cmp	r6, #0
 8004b84:	d045      	beq.n	8004c12 <__sflush_r+0xae>
 8004b86:	2300      	movs	r3, #0
 8004b88:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004b8c:	682f      	ldr	r7, [r5, #0]
 8004b8e:	6a21      	ldr	r1, [r4, #32]
 8004b90:	602b      	str	r3, [r5, #0]
 8004b92:	d030      	beq.n	8004bf6 <__sflush_r+0x92>
 8004b94:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004b96:	89a3      	ldrh	r3, [r4, #12]
 8004b98:	0759      	lsls	r1, r3, #29
 8004b9a:	d505      	bpl.n	8004ba8 <__sflush_r+0x44>
 8004b9c:	6863      	ldr	r3, [r4, #4]
 8004b9e:	1ad2      	subs	r2, r2, r3
 8004ba0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004ba2:	b10b      	cbz	r3, 8004ba8 <__sflush_r+0x44>
 8004ba4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ba6:	1ad2      	subs	r2, r2, r3
 8004ba8:	2300      	movs	r3, #0
 8004baa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004bac:	6a21      	ldr	r1, [r4, #32]
 8004bae:	4628      	mov	r0, r5
 8004bb0:	47b0      	blx	r6
 8004bb2:	1c43      	adds	r3, r0, #1
 8004bb4:	89a3      	ldrh	r3, [r4, #12]
 8004bb6:	d106      	bne.n	8004bc6 <__sflush_r+0x62>
 8004bb8:	6829      	ldr	r1, [r5, #0]
 8004bba:	291d      	cmp	r1, #29
 8004bbc:	d82b      	bhi.n	8004c16 <__sflush_r+0xb2>
 8004bbe:	4a2a      	ldr	r2, [pc, #168]	@ (8004c68 <__sflush_r+0x104>)
 8004bc0:	410a      	asrs	r2, r1
 8004bc2:	07d6      	lsls	r6, r2, #31
 8004bc4:	d427      	bmi.n	8004c16 <__sflush_r+0xb2>
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	6062      	str	r2, [r4, #4]
 8004bca:	04d9      	lsls	r1, r3, #19
 8004bcc:	6922      	ldr	r2, [r4, #16]
 8004bce:	6022      	str	r2, [r4, #0]
 8004bd0:	d504      	bpl.n	8004bdc <__sflush_r+0x78>
 8004bd2:	1c42      	adds	r2, r0, #1
 8004bd4:	d101      	bne.n	8004bda <__sflush_r+0x76>
 8004bd6:	682b      	ldr	r3, [r5, #0]
 8004bd8:	b903      	cbnz	r3, 8004bdc <__sflush_r+0x78>
 8004bda:	6560      	str	r0, [r4, #84]	@ 0x54
 8004bdc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004bde:	602f      	str	r7, [r5, #0]
 8004be0:	b1b9      	cbz	r1, 8004c12 <__sflush_r+0xae>
 8004be2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004be6:	4299      	cmp	r1, r3
 8004be8:	d002      	beq.n	8004bf0 <__sflush_r+0x8c>
 8004bea:	4628      	mov	r0, r5
 8004bec:	f7ff fbf2 	bl	80043d4 <_free_r>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	6363      	str	r3, [r4, #52]	@ 0x34
 8004bf4:	e00d      	b.n	8004c12 <__sflush_r+0xae>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	47b0      	blx	r6
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	1c50      	adds	r0, r2, #1
 8004c00:	d1c9      	bne.n	8004b96 <__sflush_r+0x32>
 8004c02:	682b      	ldr	r3, [r5, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0c6      	beq.n	8004b96 <__sflush_r+0x32>
 8004c08:	2b1d      	cmp	r3, #29
 8004c0a:	d001      	beq.n	8004c10 <__sflush_r+0xac>
 8004c0c:	2b16      	cmp	r3, #22
 8004c0e:	d11e      	bne.n	8004c4e <__sflush_r+0xea>
 8004c10:	602f      	str	r7, [r5, #0]
 8004c12:	2000      	movs	r0, #0
 8004c14:	e022      	b.n	8004c5c <__sflush_r+0xf8>
 8004c16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c1a:	b21b      	sxth	r3, r3
 8004c1c:	e01b      	b.n	8004c56 <__sflush_r+0xf2>
 8004c1e:	690f      	ldr	r7, [r1, #16]
 8004c20:	2f00      	cmp	r7, #0
 8004c22:	d0f6      	beq.n	8004c12 <__sflush_r+0xae>
 8004c24:	0793      	lsls	r3, r2, #30
 8004c26:	680e      	ldr	r6, [r1, #0]
 8004c28:	bf08      	it	eq
 8004c2a:	694b      	ldreq	r3, [r1, #20]
 8004c2c:	600f      	str	r7, [r1, #0]
 8004c2e:	bf18      	it	ne
 8004c30:	2300      	movne	r3, #0
 8004c32:	eba6 0807 	sub.w	r8, r6, r7
 8004c36:	608b      	str	r3, [r1, #8]
 8004c38:	f1b8 0f00 	cmp.w	r8, #0
 8004c3c:	dde9      	ble.n	8004c12 <__sflush_r+0xae>
 8004c3e:	6a21      	ldr	r1, [r4, #32]
 8004c40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004c42:	4643      	mov	r3, r8
 8004c44:	463a      	mov	r2, r7
 8004c46:	4628      	mov	r0, r5
 8004c48:	47b0      	blx	r6
 8004c4a:	2800      	cmp	r0, #0
 8004c4c:	dc08      	bgt.n	8004c60 <__sflush_r+0xfc>
 8004c4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c56:	81a3      	strh	r3, [r4, #12]
 8004c58:	f04f 30ff 	mov.w	r0, #4294967295
 8004c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c60:	4407      	add	r7, r0
 8004c62:	eba8 0800 	sub.w	r8, r8, r0
 8004c66:	e7e7      	b.n	8004c38 <__sflush_r+0xd4>
 8004c68:	dfbffffe 	.word	0xdfbffffe

08004c6c <_fflush_r>:
 8004c6c:	b538      	push	{r3, r4, r5, lr}
 8004c6e:	690b      	ldr	r3, [r1, #16]
 8004c70:	4605      	mov	r5, r0
 8004c72:	460c      	mov	r4, r1
 8004c74:	b913      	cbnz	r3, 8004c7c <_fflush_r+0x10>
 8004c76:	2500      	movs	r5, #0
 8004c78:	4628      	mov	r0, r5
 8004c7a:	bd38      	pop	{r3, r4, r5, pc}
 8004c7c:	b118      	cbz	r0, 8004c86 <_fflush_r+0x1a>
 8004c7e:	6a03      	ldr	r3, [r0, #32]
 8004c80:	b90b      	cbnz	r3, 8004c86 <_fflush_r+0x1a>
 8004c82:	f7ff f9a5 	bl	8003fd0 <__sinit>
 8004c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d0f3      	beq.n	8004c76 <_fflush_r+0xa>
 8004c8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004c90:	07d0      	lsls	r0, r2, #31
 8004c92:	d404      	bmi.n	8004c9e <_fflush_r+0x32>
 8004c94:	0599      	lsls	r1, r3, #22
 8004c96:	d402      	bmi.n	8004c9e <_fflush_r+0x32>
 8004c98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c9a:	f7ff fb90 	bl	80043be <__retarget_lock_acquire_recursive>
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	4621      	mov	r1, r4
 8004ca2:	f7ff ff5f 	bl	8004b64 <__sflush_r>
 8004ca6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ca8:	07da      	lsls	r2, r3, #31
 8004caa:	4605      	mov	r5, r0
 8004cac:	d4e4      	bmi.n	8004c78 <_fflush_r+0xc>
 8004cae:	89a3      	ldrh	r3, [r4, #12]
 8004cb0:	059b      	lsls	r3, r3, #22
 8004cb2:	d4e1      	bmi.n	8004c78 <_fflush_r+0xc>
 8004cb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cb6:	f7ff fb83 	bl	80043c0 <__retarget_lock_release_recursive>
 8004cba:	e7dd      	b.n	8004c78 <_fflush_r+0xc>

08004cbc <__swhatbuf_r>:
 8004cbc:	b570      	push	{r4, r5, r6, lr}
 8004cbe:	460c      	mov	r4, r1
 8004cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cc4:	2900      	cmp	r1, #0
 8004cc6:	b096      	sub	sp, #88	@ 0x58
 8004cc8:	4615      	mov	r5, r2
 8004cca:	461e      	mov	r6, r3
 8004ccc:	da0d      	bge.n	8004cea <__swhatbuf_r+0x2e>
 8004cce:	89a3      	ldrh	r3, [r4, #12]
 8004cd0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004cd4:	f04f 0100 	mov.w	r1, #0
 8004cd8:	bf14      	ite	ne
 8004cda:	2340      	movne	r3, #64	@ 0x40
 8004cdc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004ce0:	2000      	movs	r0, #0
 8004ce2:	6031      	str	r1, [r6, #0]
 8004ce4:	602b      	str	r3, [r5, #0]
 8004ce6:	b016      	add	sp, #88	@ 0x58
 8004ce8:	bd70      	pop	{r4, r5, r6, pc}
 8004cea:	466a      	mov	r2, sp
 8004cec:	f000 f848 	bl	8004d80 <_fstat_r>
 8004cf0:	2800      	cmp	r0, #0
 8004cf2:	dbec      	blt.n	8004cce <__swhatbuf_r+0x12>
 8004cf4:	9901      	ldr	r1, [sp, #4]
 8004cf6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004cfa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004cfe:	4259      	negs	r1, r3
 8004d00:	4159      	adcs	r1, r3
 8004d02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d06:	e7eb      	b.n	8004ce0 <__swhatbuf_r+0x24>

08004d08 <__smakebuf_r>:
 8004d08:	898b      	ldrh	r3, [r1, #12]
 8004d0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d0c:	079d      	lsls	r5, r3, #30
 8004d0e:	4606      	mov	r6, r0
 8004d10:	460c      	mov	r4, r1
 8004d12:	d507      	bpl.n	8004d24 <__smakebuf_r+0x1c>
 8004d14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004d18:	6023      	str	r3, [r4, #0]
 8004d1a:	6123      	str	r3, [r4, #16]
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	6163      	str	r3, [r4, #20]
 8004d20:	b003      	add	sp, #12
 8004d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d24:	ab01      	add	r3, sp, #4
 8004d26:	466a      	mov	r2, sp
 8004d28:	f7ff ffc8 	bl	8004cbc <__swhatbuf_r>
 8004d2c:	9f00      	ldr	r7, [sp, #0]
 8004d2e:	4605      	mov	r5, r0
 8004d30:	4639      	mov	r1, r7
 8004d32:	4630      	mov	r0, r6
 8004d34:	f7ff fbba 	bl	80044ac <_malloc_r>
 8004d38:	b948      	cbnz	r0, 8004d4e <__smakebuf_r+0x46>
 8004d3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d3e:	059a      	lsls	r2, r3, #22
 8004d40:	d4ee      	bmi.n	8004d20 <__smakebuf_r+0x18>
 8004d42:	f023 0303 	bic.w	r3, r3, #3
 8004d46:	f043 0302 	orr.w	r3, r3, #2
 8004d4a:	81a3      	strh	r3, [r4, #12]
 8004d4c:	e7e2      	b.n	8004d14 <__smakebuf_r+0xc>
 8004d4e:	89a3      	ldrh	r3, [r4, #12]
 8004d50:	6020      	str	r0, [r4, #0]
 8004d52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d56:	81a3      	strh	r3, [r4, #12]
 8004d58:	9b01      	ldr	r3, [sp, #4]
 8004d5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004d5e:	b15b      	cbz	r3, 8004d78 <__smakebuf_r+0x70>
 8004d60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d64:	4630      	mov	r0, r6
 8004d66:	f000 f81d 	bl	8004da4 <_isatty_r>
 8004d6a:	b128      	cbz	r0, 8004d78 <__smakebuf_r+0x70>
 8004d6c:	89a3      	ldrh	r3, [r4, #12]
 8004d6e:	f023 0303 	bic.w	r3, r3, #3
 8004d72:	f043 0301 	orr.w	r3, r3, #1
 8004d76:	81a3      	strh	r3, [r4, #12]
 8004d78:	89a3      	ldrh	r3, [r4, #12]
 8004d7a:	431d      	orrs	r5, r3
 8004d7c:	81a5      	strh	r5, [r4, #12]
 8004d7e:	e7cf      	b.n	8004d20 <__smakebuf_r+0x18>

08004d80 <_fstat_r>:
 8004d80:	b538      	push	{r3, r4, r5, lr}
 8004d82:	4d07      	ldr	r5, [pc, #28]	@ (8004da0 <_fstat_r+0x20>)
 8004d84:	2300      	movs	r3, #0
 8004d86:	4604      	mov	r4, r0
 8004d88:	4608      	mov	r0, r1
 8004d8a:	4611      	mov	r1, r2
 8004d8c:	602b      	str	r3, [r5, #0]
 8004d8e:	f7fc fa3e 	bl	800120e <_fstat>
 8004d92:	1c43      	adds	r3, r0, #1
 8004d94:	d102      	bne.n	8004d9c <_fstat_r+0x1c>
 8004d96:	682b      	ldr	r3, [r5, #0]
 8004d98:	b103      	cbz	r3, 8004d9c <_fstat_r+0x1c>
 8004d9a:	6023      	str	r3, [r4, #0]
 8004d9c:	bd38      	pop	{r3, r4, r5, pc}
 8004d9e:	bf00      	nop
 8004da0:	200002f0 	.word	0x200002f0

08004da4 <_isatty_r>:
 8004da4:	b538      	push	{r3, r4, r5, lr}
 8004da6:	4d06      	ldr	r5, [pc, #24]	@ (8004dc0 <_isatty_r+0x1c>)
 8004da8:	2300      	movs	r3, #0
 8004daa:	4604      	mov	r4, r0
 8004dac:	4608      	mov	r0, r1
 8004dae:	602b      	str	r3, [r5, #0]
 8004db0:	f7fc fa3d 	bl	800122e <_isatty>
 8004db4:	1c43      	adds	r3, r0, #1
 8004db6:	d102      	bne.n	8004dbe <_isatty_r+0x1a>
 8004db8:	682b      	ldr	r3, [r5, #0]
 8004dba:	b103      	cbz	r3, 8004dbe <_isatty_r+0x1a>
 8004dbc:	6023      	str	r3, [r4, #0]
 8004dbe:	bd38      	pop	{r3, r4, r5, pc}
 8004dc0:	200002f0 	.word	0x200002f0

08004dc4 <_sbrk_r>:
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	4d06      	ldr	r5, [pc, #24]	@ (8004de0 <_sbrk_r+0x1c>)
 8004dc8:	2300      	movs	r3, #0
 8004dca:	4604      	mov	r4, r0
 8004dcc:	4608      	mov	r0, r1
 8004dce:	602b      	str	r3, [r5, #0]
 8004dd0:	f7fc fa46 	bl	8001260 <_sbrk>
 8004dd4:	1c43      	adds	r3, r0, #1
 8004dd6:	d102      	bne.n	8004dde <_sbrk_r+0x1a>
 8004dd8:	682b      	ldr	r3, [r5, #0]
 8004dda:	b103      	cbz	r3, 8004dde <_sbrk_r+0x1a>
 8004ddc:	6023      	str	r3, [r4, #0]
 8004dde:	bd38      	pop	{r3, r4, r5, pc}
 8004de0:	200002f0 	.word	0x200002f0

08004de4 <_init>:
 8004de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de6:	bf00      	nop
 8004de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dea:	bc08      	pop	{r3}
 8004dec:	469e      	mov	lr, r3
 8004dee:	4770      	bx	lr

08004df0 <_fini>:
 8004df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df2:	bf00      	nop
 8004df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004df6:	bc08      	pop	{r3}
 8004df8:	469e      	mov	lr, r3
 8004dfa:	4770      	bx	lr
>>>>>>> 3a18c9df277c3c62d57d98ba238f40c4dd45d2ff
